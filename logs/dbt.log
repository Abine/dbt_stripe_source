2020-05-21 23:29:11.010267 (MainThread): Running with dbt=0.17.0-rc1
2020-05-21 23:29:11.185351 (MainThread): Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
2020-05-21 23:29:11.594350 (MainThread): $HOME=/Users/erikm
2020-05-21 23:29:11.594569 (MainThread): CONFIGDIR=/Users/erikm/.matplotlib
2020-05-21 23:29:11.594691 (MainThread): matplotlib data path: /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-21 23:29:11.599937 (MainThread): loaded rc file /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-21 23:29:11.601600 (MainThread): matplotlib version 3.1.1
2020-05-21 23:29:11.601774 (MainThread): interactive is False
2020-05-21 23:29:11.601821 (MainThread): platform is darwin
2020-05-21 23:29:11.601945 (MainThread): loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'snowflake', 'sphinxcontrib', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'dbt', 'dbt.main', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'dbt.logger', 'dbt.flags', 'multiprocessing', 'multiprocessing.context', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'multiprocessing.process', 'signal', 'multiprocessing.reduction', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'socket', '_socket', 'selectors', 'math', 'select', 'errno', 'array', '__mp_main__', 'dbt.ui', 'dbt.ui.colors', 'colorama', 'colorama.initialise', 'atexit', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'logging', 'weakref', 'string', '_string', 'dataclasses', 'copy', 'inspect', 'dis', 'opcode', '_opcode', 'datetime', '_datetime', 'logbook', 'logbook.base', 'logbook.concurrency', 'gevent', '__future__', 'gevent._config', 'textwrap', 'gevent._compat', 'gevent.libev', 'gevent.libev.corecext', '_cython_0_29_2', 'cython_runtime', 'gevent._hub_local', 'gevent._util', 'gevent.__hub_local', 'greenlet', 'gevent.__greenlet_primitives', 'gc', 'gevent.exceptions', 'gevent._hub_primitives', 'gevent._greenlet_primitives', 'gevent._waiter', 'gevent.__waiter', 'gevent.timeout', 'gevent.__hub_primitives', 'gevent.greenlet', 'gevent._tblib', 'gevent._greenlet', 'gevent.__ident', 'gevent.hub', 'gevent._ident', 'gevent.os', 'fcntl', 'gevent.signal', 'gevent.monkey', 'gevent.thread', 'gevent.lock', 'gevent._semaphore', 'gevent._abstract_linkable', 'gevent.__abstract_linkable', 'gevent.__semaphore', 'gevent.local', 'gevent._local', 'gevent.threading', 'contextvars', '_contextvars', 'logbook.helpers', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'http', 'http.client', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'locale', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'logbook._fallback', 'logbook.handlers', 'gzip', 'zlib', '_compression', 'logbook.compat', 'logbook.__version__', 'hologram', 'uuid', '_uuid', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'six', 'decimal', 'numbers', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'jsonschema', 'jsonschema.exceptions', 'pprint', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'platform', 'subprocess', '_posixsubprocess', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version', 'jsonschema._utils', 'pkgutil', 'jsonschema.compat', 'urllib.request', 'tempfile', 'shutil', 'fnmatch', 'bz2', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'urllib.error', 'urllib.response', '_scproxy', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'unicodedata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._compat', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sysconfig', '_osx_support', '_sysconfigdata_m_darwin_darwin', 'argparse', 'gettext', 'dbt.version', 'glob', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'queue', '_queue', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._errors', 'asn1crypto._types', 'asn1crypto.algos', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._ordereddict', 'asn1crypto.core', 'fractions', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'dbt.exceptions', 'dbt.node_types', 'hologram.helpers', 'dbt.semver', 'dbt.utils', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'typing_extensions', 'dbt.clients', 'dbt.clients.yaml_helper', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', '_yaml', 'dbt.task', 'dbt.task.run', 'dbt.node_runners', 'dbt.deprecations', 'dbt.links', 'dbt.ui.printer', 'dbt.tracking', 'snowplow_tracker', 'snowplow_tracker._version', 'snowplow_tracker.subject', 'snowplow_tracker.emitters', 'snowplow_tracker.self_describing_json', 'snowplow_tracker.tracker', 'snowplow_tracker.payload', 'snowplow_tracker.timestamp', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dbt.adapters', 'dbt.adapters.base', 'dbt.contracts', 'dbt.contracts.connection', 'dbt.contracts.util', 'dbt.clients.system', 'tarfile', 'dbt.adapters.base.meta', 'dbt.adapters.base.connections', 'multiprocessing.synchronize', '_multiprocessing', 'multiprocessing.util', 'agate', 'agate.aggregations', 'agate.aggregations.base', 'agate.exceptions', 'agate.aggregations.all', 'agate.data_types', 'agate.data_types.base', 'agate.data_types.boolean', 'agate.data_types.date', 'isodate', 'isodate.isodates', 'isodate.isostrf', 'isodate.duration', 'isodate.isotzinfo', 'isodate.isoerror', 'isodate.tzinfo', 'isodate.isotime', 'isodate.isodatetime', 'isodate.isoduration', 'parsedatetime', 'parsedatetime.pdt_locales', 'parsedatetime.pdt_locales.icu', 'parsedatetime.context', 'parsedatetime.warns', 'parsedatetime.pdt_locales.de_DE', 'parsedatetime.pdt_locales.base', 'parsedatetime.pdt_locales.en_AU', 'parsedatetime.pdt_locales.en_US', 'parsedatetime.pdt_locales.es', 'parsedatetime.pdt_locales.nl_NL', 'parsedatetime.pdt_locales.pt_BR', 'parsedatetime.pdt_locales.ru_RU', 'parsedatetime.pdt_locales.fr_FR', 'agate.data_types.date_time', 'agate.data_types.number', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'babel.plural', 'agate.data_types.text', 'agate.data_types.time_delta', 'pytimeparse', 'pytimeparse.timeparse', 'agate.aggregations.any', 'agate.aggregations.count', 'agate.utils', 'slugify', 'slugify.special', 'slugify.slugify', 'html', 'html.entities', 'text_unidecode', 'agate.warns', 'agate.aggregations.deciles', 'agate.aggregations.has_nulls', 'agate.aggregations.percentiles', 'agate.aggregations.first', 'agate.aggregations.iqr', 'agate.aggregations.mad', 'agate.aggregations.median', 'agate.aggregations.max_length', 'agate.aggregations.max_precision', 'agate.aggregations.max', 'agate.aggregations.mean', 'agate.aggregations.sum', 'agate.aggregations.min', 'agate.aggregations.mode', 'agate.aggregations.quartiles', 'agate.aggregations.quintiles', 'agate.aggregations.stdev', 'agate.aggregations.variance', 'agate.aggregations.summary', 'agate.columns', 'agate.mapped_sequence', 'agate.computations', 'agate.computations.base', 'agate.computations.formula', 'agate.computations.change', 'agate.computations.percent', 'agate.computations.percent_change', 'agate.computations.rank', 'agate.computations.percentile_rank', 'agate.computations.slug', 'agate.config', 'agate.rows', 'agate.table', 'agate.type_tester', 'agate.table.aggregate', 'agate.table.bar_chart', 'leather', 'leather.axis', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'leather.svg', 'leather.theme', 'leather.data_types', 'leather.chart', 'leather.scales', 'leather.scales.base', 'leather.shapes', 'leather.shapes.base', 'leather.shapes.bars', 'leather.series', 'leather.series.base', 'leather.utils', 'leather.series.category', 'leather.shapes.columns', 'leather.shapes.dots', 'leather.shapes.line', 'leather.scales.linear', 'leather.ticks', 'leather.ticks.base', 'leather.ticks.score', 'leather.ticks.score_time', 'leather.scales.ordinal', 'leather.scales.temporal', 'leather.grid', 'leather.lattice', 'leather.testcase', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'agate.table.bins', 'babel.numbers', 'agate.table.column_chart', 'agate.table.compute', 'agate.table.denormalize', 'agate.table.distinct', 'agate.table.exclude', 'agate.table.find', 'agate.table.from_csv', 'agate.table.from_fixed', 'agate.fixed', 'agate.table.from_json', 'agate.table.from_object', 'agate.table.group_by', 'agate.tableset', 'agate.tableset.aggregate', 'agate.tableset.bar_chart', 'agate.tableset.column_chart', 'agate.tableset.from_csv', 'agate.tableset.from_json', 'agate.tableset.having', 'agate.tableset.line_chart', 'agate.tableset.merge', 'agate.tableset.print_structure', 'agate.tableset.proxy_methods', 'agate.tableset.scatterplot', 'agate.tableset.to_csv', 'agate.tableset.to_json', 'agate.table.homogenize', 'agate.table.join', 'agate.table.limit', 'agate.table.line_chart', 'agate.table.merge', 'agate.table.normalize', 'agate.table.order_by', 'agate.table.pivot', 'agate.table.print_bars', 'agate.table.print_html', 'agate.table.print_structure', 'agate.table.print_table', 'agate.table.rename', 'agate.table.scatterplot', 'agate.table.select', 'agate.table.to_csv', 'agate.table.to_json', 'agate.table.where', 'agate.testcase', 'agate.csv_py3', 'csv', '_csv', 'dbt.contracts.graph', 'dbt.contracts.graph.manifest', 'dbt.contracts.graph.compiled', 'dbt.contracts.graph.parsed', 'pathlib', 'dbt.contracts.graph.unparsed', 'dbt.helper_types', 'dbt.contracts.graph.model_config', 'dbt.hooks', 'sqlparse', 'sqlparse.sql', 'sqlparse.tokens', 'sqlparse.compat', 'sqlparse.utils', 'sqlparse.cli', 'sqlparse.exceptions', 'sqlparse.engine', 'sqlparse.engine.grouping', 'sqlparse.engine.filter_stack', 'sqlparse.lexer', 'sqlparse.keywords', 'sqlparse.engine.statement_splitter', 'sqlparse.filters', 'sqlparse.filters.others', 'sqlparse.filters.output', 'sqlparse.filters.tokens', 'sqlparse.filters.reindent', 'sqlparse.filters.right_margin', 'sqlparse.filters.aligned_indent', 'sqlparse.formatter', 'dbt.include', 'dbt.include.global_project', 'dbt.adapters.base.query_headers', 'dbt.clients.jinja', 'ast', '_ast', 'jinja2', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.bccache', 'jinja2._compat', 'jinja2.utils', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'jinja2.lexer', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'jinja2.ext', 'jinja2.nativetypes', 'jinja2.sandbox', 'dbt.clients._jinja_blocks', 'dbt.context', 'dbt.context.configured', 'dbt.context.base', 'dbt.context.target', 'dbt.adapters.base.relation', 'dbt.adapters.base.column', 'dbt.adapters.base.impl', 'dbt.clients.agate_helper', 'babel.dates', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'dbt.adapters.cache', 'dbt.adapters.base.plugin', 'dbt.compilation', 'dbt.linker', 'networkx', 'networkx.release', 'networkx.exception', 'networkx.utils', 'networkx.utils.misc', 'networkx.utils.decorators', 'decorator', 'networkx.utils.random_sequence', 'networkx.utils.union_find', 'networkx.utils.rcm', 'networkx.utils.heaps', 'networkx.utils.contextmanagers', 'networkx.classes', 'networkx.classes.graph', 'networkx.classes.coreviews', 'networkx.classes.reportviews', 'networkx.convert', 'networkx.classes.digraph', 'networkx.classes.multigraph', 'networkx.classes.multidigraph', 'networkx.classes.ordered', 'networkx.classes.function', 'networkx.classes.filters', 'networkx.classes.graphviews', 'networkx.convert_matrix', 'networkx.relabel', 'networkx.generators', 'networkx.generators.atlas', 'networkx.generators.classic', 'networkx.generators.community', 'networkx.generators.degree_seq', 'networkx.generators.directed', 'networkx.generators.duplication', 'networkx.generators.ego', 'networkx.generators.expanders', 'networkx.generators.geometric', 'scipy', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.pocketfft', 'numpy.fft.pocketfft_internal', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_12', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'mkl_fft._float_utils', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'numpy.random.entropy', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy._lib._util', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'numpy.dual', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'networkx.generators.intersection', 'networkx.algorithms', 'networkx.algorithms.assortativity', 'networkx.algorithms.assortativity.connectivity', 'networkx.algorithms.assortativity.correlation', 'networkx.algorithms.assortativity.mixing', 'networkx.algorithms.assortativity.pairs', 'networkx.algorithms.assortativity.neighbor_degree', 'networkx.algorithms.boundary', 'networkx.algorithms.bridges', 'networkx.algorithms.chains', 'networkx.algorithms.centrality', 'networkx.algorithms.centrality.betweenness', 'networkx.algorithms.centrality.betweenness_subset', 'networkx.algorithms.centrality.closeness', 'networkx.algorithms.centrality.subgraph_alg', 'networkx.algorithms.centrality.current_flow_closeness', 'networkx.algorithms.centrality.flow_matrix', 'networkx.algorithms.centrality.current_flow_betweenness', 'networkx.algorithms.centrality.current_flow_betweenness_subset', 'networkx.algorithms.centrality.degree_alg', 'networkx.algorithms.centrality.dispersion', 'networkx.algorithms.centrality.eigenvector', 'networkx.algorithms.centrality.harmonic', 'networkx.algorithms.centrality.katz', 'networkx.algorithms.centrality.load', 'networkx.algorithms.centrality.reaching', 'networkx.algorithms.centrality.percolation', 'networkx.algorithms.centrality.second_order', 'networkx.algorithms.centrality.voterank_alg', 'networkx.algorithms.chordal', 'networkx.algorithms.cluster', 'networkx.algorithms.clique', 'networkx.algorithms.communicability_alg', 'networkx.algorithms.components', 'networkx.algorithms.components.connected', 'networkx.algorithms.components.strongly_connected', 'networkx.algorithms.components.weakly_connected', 'networkx.algorithms.components.attracting', 'networkx.algorithms.components.biconnected', 'networkx.algorithms.components.semiconnected', 'networkx.algorithms.coloring', 'networkx.algorithms.coloring.greedy_coloring', 'networkx.algorithms.coloring.greedy_coloring_with_interchange', 'networkx.algorithms.coloring.equitable_coloring', 'networkx.algorithms.core', 'networkx.algorithms.covering', 'networkx.algorithms.cycles', 'networkx.algorithms.cuts', 'networkx.algorithms.dag', 'networkx.generators.trees', 'networkx.algorithms.distance_measures', 'networkx.algorithms.distance_regular', 'networkx.algorithms.dominance', 'networkx.algorithms.dominating', 'networkx.algorithms.efficiency', 'networkx.algorithms.euler', 'networkx.algorithms.graphical', 'networkx.algorithms.hierarchy', 'networkx.algorithms.hybrid', 'networkx.algorithms.link_analysis', 'networkx.algorithms.link_analysis.pagerank_alg', 'networkx.algorithms.link_analysis.hits_alg', 'networkx.algorithms.link_prediction', 'networkx.algorithms.lowest_common_ancestors', 'networkx.algorithms.isolate', 'networkx.algorithms.matching', 'networkx.algorithms.minors', 'networkx.algorithms.mis', 'networkx.algorithms.operators', 'networkx.algorithms.operators.all', 'networkx.algorithms.operators.binary', 'networkx.algorithms.operators.product', 'networkx.algorithms.operators.unary', 'networkx.algorithms.planarity', 'networkx.algorithms.planar_drawing', 'networkx.algorithms.reciprocity', 'networkx.algorithms.richclub', 'networkx.algorithms.shortest_paths', 'networkx.algorithms.shortest_paths.generic', 'networkx.algorithms.shortest_paths.unweighted', 'networkx.algorithms.shortest_paths.weighted', 'networkx.algorithms.shortest_paths.astar', 'networkx.algorithms.shortest_paths.dense', 'networkx.algorithms.similarity', 'networkx.algorithms.simple_paths', 'networkx.algorithms.smallworld', 'networkx.algorithms.smetric', 'networkx.algorithms.structuralholes', 'networkx.algorithms.sparsifiers', 'networkx.algorithms.swap', 'networkx.algorithms.traversal', 'networkx.algorithms.traversal.beamsearch', 'networkx.algorithms.traversal.breadth_first_search', 'networkx.algorithms.traversal.depth_first_search', 'networkx.algorithms.traversal.edgedfs', 'networkx.algorithms.traversal.edgebfs', 'networkx.algorithms.triads', 'networkx.algorithms.vitality', 'networkx.algorithms.voronoi', 'networkx.algorithms.wiener', 'networkx.algorithms.bipartite', 'networkx.algorithms.bipartite.basic', 'networkx.algorithms.bipartite.centrality', 'networkx.algorithms.bipartite.cluster', 'networkx.algorithms.bipartite.covering', 'networkx.algorithms.bipartite.matching', 'networkx.algorithms.bipartite.edgelist', 'networkx.algorithms.bipartite.matrix', 'networkx.algorithms.bipartite.projection', 'networkx.algorithms.bipartite.redundancy', 'networkx.algorithms.bipartite.spectral', 'networkx.algorithms.bipartite.generators', 'networkx.algorithms.node_classification', 'networkx.algorithms.node_classification.hmn', 'networkx.algorithms.node_classification.utils', 'networkx.algorithms.node_classification.lgc', 'networkx.algorithms.connectivity', 'networkx.algorithms.connectivity.connectivity', 'networkx.algorithms.flow', 'networkx.algorithms.flow.maxflow', 'networkx.algorithms.flow.boykovkolmogorov', 'networkx.algorithms.flow.utils', 'networkx.algorithms.flow.dinitz_alg', 'networkx.algorithms.flow.edmondskarp', 'networkx.algorithms.flow.preflowpush', 'networkx.algorithms.flow.shortestaugmentingpath', 'networkx.algorithms.flow.mincost', 'networkx.algorithms.flow.gomory_hu', 'networkx.algorithms.flow.capacityscaling', 'networkx.algorithms.flow.networksimplex', 'networkx.algorithms.connectivity.utils', 'networkx.algorithms.connectivity.cuts', 'networkx.algorithms.connectivity.edge_augmentation', 'networkx.algorithms.connectivity.edge_kcomponents', 'networkx.algorithms.connectivity.disjoint_paths', 'networkx.algorithms.connectivity.kcomponents', 'networkx.algorithms.connectivity.kcutsets', 'networkx.algorithms.connectivity.stoerwagner', 'networkx.algorithms.community', 'networkx.algorithms.community.asyn_fluid', 'networkx.algorithms.community.centrality', 'networkx.algorithms.community.community_generators', 'networkx.algorithms.community.kclique', 'networkx.algorithms.community.kernighan_lin', 'networkx.algorithms.community.community_utils', 'networkx.algorithms.community.label_propagation', 'networkx.algorithms.community.modularity_max', 'networkx.algorithms.community.quality', 'networkx.utils.mapped_queue', 'networkx.algorithms.isomorphism', 'networkx.algorithms.isomorphism.isomorph', 'networkx.algorithms.isomorphism.vf2userfunc', 'networkx.algorithms.isomorphism.isomorphvf2', 'networkx.algorithms.isomorphism.matchhelpers', 'networkx.algorithms.isomorphism.temporalisomorphvf2', 'networkx.algorithms.tournament', 'networkx.algorithms.tree', 'networkx.algorithms.tree.branchings', 'networkx.algorithms.tree.recognition', 'networkx.algorithms.tree.coding', 'networkx.algorithms.tree.mst', 'networkx.algorithms.tree.operations', 'networkx.generators.joint_degree_seq', 'networkx.generators.lattice', 'networkx.generators.line', 'networkx.generators.mycielski', 'networkx.generators.nonisomorphic_trees', 'networkx.generators.random_clustered', 'networkx.generators.random_graphs', 'networkx.generators.small', 'networkx.generators.social', 'networkx.generators.spectral_graph_forge', 'networkx.generators.stochastic', 'networkx.generators.triads', 'networkx.readwrite', 'networkx.readwrite.adjlist', 'networkx.readwrite.multiline_adjlist', 'networkx.readwrite.edgelist', 'networkx.readwrite.gpickle', 'networkx.readwrite.pajek', 'networkx.readwrite.leda', 'networkx.readwrite.sparse6', 'networkx.readwrite.graph6', 'networkx.readwrite.nx_yaml', 'networkx.readwrite.gml', 'networkx.readwrite.graphml', 'xml.etree.cElementTree', 'lxml', 'lxml.etree', 'lxml._elementpath', 'networkx.readwrite.gexf', 'networkx.readwrite.nx_shp', 'networkx.readwrite.json_graph', 'networkx.readwrite.json_graph.node_link', 'networkx.readwrite.json_graph.adjacency', 'networkx.readwrite.json_graph.tree', 'networkx.readwrite.json_graph.jit', 'networkx.readwrite.json_graph.cytoscape', 'networkx.linalg', 'networkx.linalg.attrmatrix', 'networkx.linalg.spectrum', 'networkx.linalg.graphmatrix', 'networkx.linalg.laplacianmatrix', 'networkx.linalg.algebraicconnectivity', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'networkx.linalg.modularitymatrix', 'networkx.tests', 'networkx.tests.test', 'networkx.drawing', 'networkx.drawing.layout', 'networkx.drawing.nx_pylab', 'networkx.drawing.nx_agraph', 'networkx.drawing.nx_pydot', 'dbt.context.providers', 'dbt.adapters.factory', 'dbt.config', 'dbt.config.profile', 'dbt.contracts.project', 'dbt.config.renderer', 'dbt.config.project', 'dbt.legacy_config_updater', 'dbt.config.runtime', 'dbt.context.context_config', 'dbt.contracts.results', 'dbt.task.compile', 'dbt.task.runnable', 'multiprocessing.dummy', 'multiprocessing.dummy.connection', 'dbt.task.base', 'dbt.perf_utils', 'dbt.parser', 'dbt.parser.analysis', 'dbt.parser.base', 'dbt.parser.results', 'dbt.parser.search', 'dbt.parser.data_test', 'dbt.parser.docs', 'dbt.parser.hooks', 'dbt.parser.macros', 'dbt.parser.models', 'dbt.parser.schemas', 'dbt.parser.schema_test_builders', 'dbt.parser.seeds', 'dbt.parser.snapshots', 'dbt.parser.manifest', 'dbt.context.docs', 'dbt.parser.sources', 'dbt.graph', 'dbt.graph.selector', 'dbt.task.debug', 'dbt.task.clean', 'dbt.task.deps', 'dbt.deps', 'dbt.deps.base', 'dbt.deps.resolver', 'dbt.deps.local', 'dbt.deps.git', 'dbt.clients.git', 'dbt.deps.registry', 'dbt.clients.registry', 'dbt.task.init', 'dbt.task.seed', 'dbt.task.test', 'dbt.task.snapshot', 'dbt.task.generate', 'dbt.task.serve', 'webbrowser', 'shlex', 'http.server', 'socketserver', 'dbt.task.freshness', 'dbt.task.run_operation', 'dbt.task.list', 'dbt.task.rpc', 'dbt.task.rpc.server', 'dbt.task.rpc.sql_commands', 'dbt.contracts.rpc', 'dbt.parser.rpc', 'dbt.rpc', 'dbt.rpc.error', 'jsonrpc', 'jsonrpc.manager', 'jsonrpc.utils', 'jsonrpc.six', 'jsonrpc.six.moves', 'jsonrpc.six.moves.urllib_parse', 'jsonrpc.six.moves.urllib.parse', 'jsonrpc.six.moves.urllib_error', 'jsonrpc.six.moves.urllib.error', 'jsonrpc.six.moves.urllib_request', 'jsonrpc.six.moves.urllib.request', 'jsonrpc.six.moves.urllib_response', 'jsonrpc.six.moves.urllib.response', 'jsonrpc.six.moves.urllib_robotparser', 'jsonrpc.six.moves.urllib.robotparser', 'jsonrpc.six.moves.urllib', 'jsonrpc.exceptions', 'jsonrpc.jsonrpc1', 'jsonrpc.base', 'jsonrpc.jsonrpc2', 'jsonrpc.jsonrpc', 'jsonrpc.dispatcher', 'dbt.rpc.node_runners', 'dbt.task.rpc.base', 'dbt.rpc.method', 'dbt.task.rpc.project_commands', 'dbt.task.rpc.cli', 'dbt.task.rpc.deps', 'werkzeug', 'werkzeug.serving', 'werkzeug._compat', 'werkzeug._internal', 'werkzeug.exceptions', 'werkzeug.utils', 'werkzeug.urls', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'werkzeug.middleware', 'werkzeug.middleware.dispatcher', 'dbt.rpc.logger', 'logbook.queues', 'dbt.rpc.response_manager', 'dbt.rpc.task_handler', 'dbt.rpc.task_handler_protocol', 'dbt.rpc.task_manager', 'dbt.rpc.gc', 'dbt.rpc.builtins', 'dbt.profiler', 'cProfile', '_lsprof', 'profile', 'pstats', 'dbt.adapters.bigquery', 'dbt.adapters.bigquery.connections', 'google.auth', 'google.auth._default', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'six.moves.urllib', 'google.cloud.bigquery', 'google.cloud.bigquery.client', 'pyarrow', 'pyarrow._generated_version', 'pyarrow.compat', 'cloudpickle', 'cloudpickle.cloudpickle', 'pyarrow.lib', 'pyarrow.util', 'pyarrow.filesystem', 'six.moves.urllib.parse', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'google.resumable_media', 'google.resumable_media.common', 'google.resumable_media.requests', 'google.resumable_media.requests.download', 'google.resumable_media._download', 'google.resumable_media._helpers', 'google.resumable_media.requests._helpers', 'google.resumable_media.requests.upload', 'google.resumable_media._upload', 'google.api_core', 'google.api_core.client_options', 'google.api_core.exceptions', 'google.api_core.page_iterator', 'google.auth.transport.requests', 'google.auth.transport._mtls_helper', 'google.cloud._helpers', 'google.protobuf', 'google.protobuf.duration_pb2', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'google.protobuf.internal.well_known_types', 'google.protobuf.timestamp_pb2', 'google.cloud.exceptions', 'google.cloud.client', 'google.auth.credentials', 'google.auth._helpers', 'google.oauth2', 'google.oauth2.service_account', 'google.auth._service_account_info', 'google.auth.crypt', 'google.auth.crypt.base', 'google.auth.crypt.rsa', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.es256', 'google.auth.jwt', 'cachetools', 'cachetools.keys', 'cachetools.cache', 'cachetools.abc', 'cachetools.lfu', 'cachetools.lru', 'cachetools.rr', 'cachetools.ttl', 'google.oauth2._client', 'google.cloud.bigquery._helpers', 'google.cloud.bigquery._http', 'google.cloud._http', 'google.api_core.client_info', 'google.cloud.bigquery._pandas_helpers', 'google.cloud.bigquery_storage_v1beta1.types', 'google.api_core.protobuf_helpers', 'google.protobuf.field_mask_pb2', 'google.protobuf.wrappers_pb2', 'google.cloud.bigquery_storage_v1beta1.proto', 'google.cloud.bigquery_storage_v1beta1.proto.arrow_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.avro_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.read_options_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.storage_pb2', 'google.api', 'google.api.annotations_pb2', 'google.api.http_pb2', 'google.protobuf.descriptor_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.table_reference_pb2', 'google.protobuf.empty_pb2', 'google.api.client_pb2', 'google.api_core.gapic_v1.client_info', 'pandas', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'timeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-21 23:29:11.699601 (MainThread): CACHEDIR=/Users/erikm/.matplotlib
2020-05-21 23:29:11.702529 (MainThread): Using fontManager instance from /Users/erikm/.matplotlib/fontlist-v310.json
2020-05-21 23:29:11.961673 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/erikm/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-05-21 23:29:11.966826 (MainThread): Tracking: tracking
2020-05-21 23:29:11.976236 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa27829250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa25bee210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26e330d0>]}
2020-05-21 23:29:11.999512 (MainThread): Partial parsing not enabled
2020-05-21 23:29:12.002743 (MainThread): Parsing macros/core.sql
2020-05-21 23:29:12.009572 (MainThread): Parsing macros/materializations/helpers.sql
2020-05-21 23:29:12.018651 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-05-21 23:29:12.021300 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-05-21 23:29:12.039003 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-05-21 23:29:12.069878 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-05-21 23:29:12.093978 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-05-21 23:29:12.096554 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-05-21 23:29:12.103874 (MainThread): Parsing macros/materializations/common/merge.sql
2020-05-21 23:29:12.120250 (MainThread): Parsing macros/materializations/table/table.sql
2020-05-21 23:29:12.127867 (MainThread): Parsing macros/materializations/view/view.sql
2020-05-21 23:29:12.135141 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-05-21 23:29:12.140913 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-05-21 23:29:12.142184 (MainThread): Parsing macros/etc/query.sql
2020-05-21 23:29:12.143549 (MainThread): Parsing macros/etc/is_incremental.sql
2020-05-21 23:29:12.145582 (MainThread): Parsing macros/etc/datetime.sql
2020-05-21 23:29:12.154944 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-05-21 23:29:12.157232 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-05-21 23:29:12.158552 (MainThread): Parsing macros/adapters/common.sql
2020-05-21 23:29:12.208961 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-05-21 23:29:12.210881 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-05-21 23:29:12.212339 (MainThread): Parsing macros/schema_tests/unique.sql
2020-05-21 23:29:12.214061 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-05-21 23:29:12.217067 (MainThread): Parsing macros/etc.sql
2020-05-21 23:29:12.217993 (MainThread): Parsing macros/catalog.sql
2020-05-21 23:29:12.224556 (MainThread): Parsing macros/adapters.sql
2020-05-21 23:29:12.242031 (MainThread): Parsing macros/materializations/seed.sql
2020-05-21 23:29:12.244401 (MainThread): Parsing macros/materializations/view.sql
2020-05-21 23:29:12.246899 (MainThread): Parsing macros/materializations/table.sql
2020-05-21 23:29:12.257760 (MainThread): Parsing macros/materializations/incremental.sql
2020-05-21 23:29:12.271090 (MainThread): Parsing macros/materializations/snapshot.sql
2020-05-21 23:29:12.291905 (MainThread): Partial parsing not enabled
2020-05-21 23:29:12.325065 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:29:12.325312 (MainThread): Opening a new connection, currently in state init
2020-05-21 23:29:12.343902 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:29:12.344029 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.359337 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:29:12.359545 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.373265 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:29:12.373404 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.385117 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:29:12.385245 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.396197 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:29:12.396323 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.406870 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:29:12.407001 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.418015 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:29:12.418156 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.428942 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:29:12.429068 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.440119 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:29:12.440247 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:29:12.473255 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa28493c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa28482e90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa282f5650>]}
2020-05-21 23:29:12.473493 (MainThread): Flushing usage events
2020-05-21 23:29:12.914560 (MainThread): Connection 'model.stripe_source.stg_stripe_balance_transaction' was properly closed.
2020-05-21 23:29:12.914917 (MainThread): Encountered an error:
2020-05-21 23:29:12.915135 (MainThread): Compilation Error
  Error reading stripe_source: dbt_stripe_source.yml - Runtime Error
    Syntax error near line 149
    ------------------------------
    146|         description: The details of a fee associated with a balance_transation
    147|         loaded_at_field: _fivetran_synced
    148|         columns:
    149| 					- name: balance_transaction_id 
    150| 					description: ID of the balance transaction entry the fee applies to
    151| 					- name: amount 
    152| 					description: Amount of the fee, in cents.
    
    Raw Error:
    ------------------------------
    while scanning for the next token
    found character '\t' that cannot start any token
      in "<unicode string>", line 149, column 1:
        					- name: balance_transaction_id 
        ^
2020-05-21 23:29:12.927851 (MainThread): Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/clients/yaml_helper.py", line 49, in load_yaml_text
    return yaml.safe_load(contents)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/__init__.py", line 162, in safe_load
    return load(stream, SafeLoader)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/__init__.py", line 114, in load
    return loader.get_single_data()
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/constructor.py", line 41, in get_single_data
    node = self.get_single_node()
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 133, in compose_mapping_node
    item_value = self.compose_node(node, item_key)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 82, in compose_node
    node = self.compose_sequence_node(anchor)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 111, in compose_sequence_node
    node.value.append(self.compose_node(node, index))
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 133, in compose_mapping_node
    item_value = self.compose_node(node, item_key)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 82, in compose_node
    node = self.compose_sequence_node(anchor)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 111, in compose_sequence_node
    node.value.append(self.compose_node(node, index))
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 133, in compose_mapping_node
    item_value = self.compose_node(node, item_key)
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/composer.py", line 64, in compose_node
    if self.check_event(AliasEvent):
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/parser.py", line 449, in parse_block_mapping_value
    if not self.check_token(KeyToken, ValueToken, BlockEndToken):
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/opt/anaconda3/lib/python3.7/site-packages/yaml/scanner.py", line 260, in fetch_more_tokens
    self.get_mark())
yaml.scanner.ScannerError: while scanning for the next token
found character '\t' that cannot start any token
  in "<unicode string>", line 149, column 1:
    					- name: balance_transaction_id 
    ^

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 213, in _yaml_from_file
    return load_yaml_text(source_file.contents)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/clients/yaml_helper.py", line 56, in load_yaml_text
    raise dbt.exceptions.ValidationException(error)
dbt.exceptions.ValidationException: Runtime Error
  Syntax error near line 149
  ------------------------------
  146|         description: The details of a fee associated with a balance_transation
  147|         loaded_at_field: _fivetran_synced
  148|         columns:
  149| 					- name: balance_transaction_id 
  150| 					description: ID of the balance transaction entry the fee applies to
  151| 					- name: amount 
  152| 					description: Amount of the fee, in cents.
  
  Raw Error:
  ------------------------------
  while scanning for the next token
  found character '\t' that cannot start any token
    in "<unicode string>", line 149, column 1:
      					- name: balance_transaction_id 
      ^

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 396, in run
    self._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 110, in _runtime_initialize
    super()._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 78, in _runtime_initialize
    self.load_manifest()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 66, in load_manifest
    self.manifest = get_full_manifest(self.config)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/perf_utils.py", line 23, in get_full_manifest
    return load_manifest(config, internal, set_header)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 641, in load_manifest
    return ManifestLoader.load_all(config, internal_manifest, macro_hook)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 356, in load_all
    loader.load(internal_manifest=internal_manifest)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 212, in load
    self.parse_project(project, macro_manifest, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 186, in parse_project
    self.parse_with_cache(path, parser, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 142, in parse_with_cache
    parser.parse_file(block)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 506, in parse_file
    dct = self._yaml_from_file(block.file)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 218, in _yaml_from_file
    .format(self.project.project_name, path, reason)
dbt.exceptions.CompilationException: Compilation Error
  Error reading stripe_source: dbt_stripe_source.yml - Runtime Error
    Syntax error near line 149
    ------------------------------
    146|         description: The details of a fee associated with a balance_transation
    147|         loaded_at_field: _fivetran_synced
    148|         columns:
    149| 					- name: balance_transaction_id 
    150| 					description: ID of the balance transaction entry the fee applies to
    151| 					- name: amount 
    152| 					description: Amount of the fee, in cents.
    
    Raw Error:
    ------------------------------
    while scanning for the next token
    found character '\t' that cannot start any token
      in "<unicode string>", line 149, column 1:
        					- name: balance_transaction_id 
        ^

2020-05-21 23:31:22.003593 (MainThread): Running with dbt=0.17.0-rc1
2020-05-21 23:31:22.158454 (MainThread): Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
2020-05-21 23:31:22.534956 (MainThread): $HOME=/Users/erikm
2020-05-21 23:31:22.535154 (MainThread): CONFIGDIR=/Users/erikm/.matplotlib
2020-05-21 23:31:22.535273 (MainThread): matplotlib data path: /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-21 23:31:22.539004 (MainThread): loaded rc file /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-21 23:31:22.540545 (MainThread): matplotlib version 3.1.1
2020-05-21 23:31:22.540715 (MainThread): interactive is False
2020-05-21 23:31:22.540761 (MainThread): platform is darwin
2020-05-21 23:31:22.540864 (MainThread): loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'snowflake', 'sphinxcontrib', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'dbt', 'dbt.main', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'dbt.logger', 'dbt.flags', 'multiprocessing', 'multiprocessing.context', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'multiprocessing.process', 'signal', 'multiprocessing.reduction', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'socket', '_socket', 'selectors', 'math', 'select', 'errno', 'array', '__mp_main__', 'dbt.ui', 'dbt.ui.colors', 'colorama', 'colorama.initialise', 'atexit', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'logging', 'weakref', 'string', '_string', 'dataclasses', 'copy', 'inspect', 'dis', 'opcode', '_opcode', 'datetime', '_datetime', 'logbook', 'logbook.base', 'logbook.concurrency', 'gevent', '__future__', 'gevent._config', 'textwrap', 'gevent._compat', 'gevent.libev', 'gevent.libev.corecext', '_cython_0_29_2', 'cython_runtime', 'gevent._hub_local', 'gevent._util', 'gevent.__hub_local', 'greenlet', 'gevent.__greenlet_primitives', 'gc', 'gevent.exceptions', 'gevent._hub_primitives', 'gevent._greenlet_primitives', 'gevent._waiter', 'gevent.__waiter', 'gevent.timeout', 'gevent.__hub_primitives', 'gevent.greenlet', 'gevent._tblib', 'gevent._greenlet', 'gevent.__ident', 'gevent.hub', 'gevent._ident', 'gevent.os', 'fcntl', 'gevent.signal', 'gevent.monkey', 'gevent.thread', 'gevent.lock', 'gevent._semaphore', 'gevent._abstract_linkable', 'gevent.__abstract_linkable', 'gevent.__semaphore', 'gevent.local', 'gevent._local', 'gevent.threading', 'contextvars', '_contextvars', 'logbook.helpers', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'http', 'http.client', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'locale', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'logbook._fallback', 'logbook.handlers', 'gzip', 'zlib', '_compression', 'logbook.compat', 'logbook.__version__', 'hologram', 'uuid', '_uuid', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'six', 'decimal', 'numbers', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'jsonschema', 'jsonschema.exceptions', 'pprint', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'platform', 'subprocess', '_posixsubprocess', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version', 'jsonschema._utils', 'pkgutil', 'jsonschema.compat', 'urllib.request', 'tempfile', 'shutil', 'fnmatch', 'bz2', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'urllib.error', 'urllib.response', '_scproxy', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'unicodedata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._compat', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sysconfig', '_osx_support', '_sysconfigdata_m_darwin_darwin', 'argparse', 'gettext', 'dbt.version', 'glob', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'queue', '_queue', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._errors', 'asn1crypto._types', 'asn1crypto.algos', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._ordereddict', 'asn1crypto.core', 'fractions', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'dbt.exceptions', 'dbt.node_types', 'hologram.helpers', 'dbt.semver', 'dbt.utils', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'typing_extensions', 'dbt.clients', 'dbt.clients.yaml_helper', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', '_yaml', 'dbt.task', 'dbt.task.run', 'dbt.node_runners', 'dbt.deprecations', 'dbt.links', 'dbt.ui.printer', 'dbt.tracking', 'snowplow_tracker', 'snowplow_tracker._version', 'snowplow_tracker.subject', 'snowplow_tracker.emitters', 'snowplow_tracker.self_describing_json', 'snowplow_tracker.tracker', 'snowplow_tracker.payload', 'snowplow_tracker.timestamp', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dbt.adapters', 'dbt.adapters.base', 'dbt.contracts', 'dbt.contracts.connection', 'dbt.contracts.util', 'dbt.clients.system', 'tarfile', 'dbt.adapters.base.meta', 'dbt.adapters.base.connections', 'multiprocessing.synchronize', '_multiprocessing', 'multiprocessing.util', 'agate', 'agate.aggregations', 'agate.aggregations.base', 'agate.exceptions', 'agate.aggregations.all', 'agate.data_types', 'agate.data_types.base', 'agate.data_types.boolean', 'agate.data_types.date', 'isodate', 'isodate.isodates', 'isodate.isostrf', 'isodate.duration', 'isodate.isotzinfo', 'isodate.isoerror', 'isodate.tzinfo', 'isodate.isotime', 'isodate.isodatetime', 'isodate.isoduration', 'parsedatetime', 'parsedatetime.pdt_locales', 'parsedatetime.pdt_locales.icu', 'parsedatetime.context', 'parsedatetime.warns', 'parsedatetime.pdt_locales.de_DE', 'parsedatetime.pdt_locales.base', 'parsedatetime.pdt_locales.en_AU', 'parsedatetime.pdt_locales.en_US', 'parsedatetime.pdt_locales.es', 'parsedatetime.pdt_locales.nl_NL', 'parsedatetime.pdt_locales.pt_BR', 'parsedatetime.pdt_locales.ru_RU', 'parsedatetime.pdt_locales.fr_FR', 'agate.data_types.date_time', 'agate.data_types.number', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'babel.plural', 'agate.data_types.text', 'agate.data_types.time_delta', 'pytimeparse', 'pytimeparse.timeparse', 'agate.aggregations.any', 'agate.aggregations.count', 'agate.utils', 'slugify', 'slugify.special', 'slugify.slugify', 'html', 'html.entities', 'text_unidecode', 'agate.warns', 'agate.aggregations.deciles', 'agate.aggregations.has_nulls', 'agate.aggregations.percentiles', 'agate.aggregations.first', 'agate.aggregations.iqr', 'agate.aggregations.mad', 'agate.aggregations.median', 'agate.aggregations.max_length', 'agate.aggregations.max_precision', 'agate.aggregations.max', 'agate.aggregations.mean', 'agate.aggregations.sum', 'agate.aggregations.min', 'agate.aggregations.mode', 'agate.aggregations.quartiles', 'agate.aggregations.quintiles', 'agate.aggregations.stdev', 'agate.aggregations.variance', 'agate.aggregations.summary', 'agate.columns', 'agate.mapped_sequence', 'agate.computations', 'agate.computations.base', 'agate.computations.formula', 'agate.computations.change', 'agate.computations.percent', 'agate.computations.percent_change', 'agate.computations.rank', 'agate.computations.percentile_rank', 'agate.computations.slug', 'agate.config', 'agate.rows', 'agate.table', 'agate.type_tester', 'agate.table.aggregate', 'agate.table.bar_chart', 'leather', 'leather.axis', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'leather.svg', 'leather.theme', 'leather.data_types', 'leather.chart', 'leather.scales', 'leather.scales.base', 'leather.shapes', 'leather.shapes.base', 'leather.shapes.bars', 'leather.series', 'leather.series.base', 'leather.utils', 'leather.series.category', 'leather.shapes.columns', 'leather.shapes.dots', 'leather.shapes.line', 'leather.scales.linear', 'leather.ticks', 'leather.ticks.base', 'leather.ticks.score', 'leather.ticks.score_time', 'leather.scales.ordinal', 'leather.scales.temporal', 'leather.grid', 'leather.lattice', 'leather.testcase', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'agate.table.bins', 'babel.numbers', 'agate.table.column_chart', 'agate.table.compute', 'agate.table.denormalize', 'agate.table.distinct', 'agate.table.exclude', 'agate.table.find', 'agate.table.from_csv', 'agate.table.from_fixed', 'agate.fixed', 'agate.table.from_json', 'agate.table.from_object', 'agate.table.group_by', 'agate.tableset', 'agate.tableset.aggregate', 'agate.tableset.bar_chart', 'agate.tableset.column_chart', 'agate.tableset.from_csv', 'agate.tableset.from_json', 'agate.tableset.having', 'agate.tableset.line_chart', 'agate.tableset.merge', 'agate.tableset.print_structure', 'agate.tableset.proxy_methods', 'agate.tableset.scatterplot', 'agate.tableset.to_csv', 'agate.tableset.to_json', 'agate.table.homogenize', 'agate.table.join', 'agate.table.limit', 'agate.table.line_chart', 'agate.table.merge', 'agate.table.normalize', 'agate.table.order_by', 'agate.table.pivot', 'agate.table.print_bars', 'agate.table.print_html', 'agate.table.print_structure', 'agate.table.print_table', 'agate.table.rename', 'agate.table.scatterplot', 'agate.table.select', 'agate.table.to_csv', 'agate.table.to_json', 'agate.table.where', 'agate.testcase', 'agate.csv_py3', 'csv', '_csv', 'dbt.contracts.graph', 'dbt.contracts.graph.manifest', 'dbt.contracts.graph.compiled', 'dbt.contracts.graph.parsed', 'pathlib', 'dbt.contracts.graph.unparsed', 'dbt.helper_types', 'dbt.contracts.graph.model_config', 'dbt.hooks', 'sqlparse', 'sqlparse.sql', 'sqlparse.tokens', 'sqlparse.compat', 'sqlparse.utils', 'sqlparse.cli', 'sqlparse.exceptions', 'sqlparse.engine', 'sqlparse.engine.grouping', 'sqlparse.engine.filter_stack', 'sqlparse.lexer', 'sqlparse.keywords', 'sqlparse.engine.statement_splitter', 'sqlparse.filters', 'sqlparse.filters.others', 'sqlparse.filters.output', 'sqlparse.filters.tokens', 'sqlparse.filters.reindent', 'sqlparse.filters.right_margin', 'sqlparse.filters.aligned_indent', 'sqlparse.formatter', 'dbt.include', 'dbt.include.global_project', 'dbt.adapters.base.query_headers', 'dbt.clients.jinja', 'ast', '_ast', 'jinja2', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.bccache', 'jinja2._compat', 'jinja2.utils', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'jinja2.lexer', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'jinja2.ext', 'jinja2.nativetypes', 'jinja2.sandbox', 'dbt.clients._jinja_blocks', 'dbt.context', 'dbt.context.configured', 'dbt.context.base', 'dbt.context.target', 'dbt.adapters.base.relation', 'dbt.adapters.base.column', 'dbt.adapters.base.impl', 'dbt.clients.agate_helper', 'babel.dates', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'dbt.adapters.cache', 'dbt.adapters.base.plugin', 'dbt.compilation', 'dbt.linker', 'networkx', 'networkx.release', 'networkx.exception', 'networkx.utils', 'networkx.utils.misc', 'networkx.utils.decorators', 'decorator', 'networkx.utils.random_sequence', 'networkx.utils.union_find', 'networkx.utils.rcm', 'networkx.utils.heaps', 'networkx.utils.contextmanagers', 'networkx.classes', 'networkx.classes.graph', 'networkx.classes.coreviews', 'networkx.classes.reportviews', 'networkx.convert', 'networkx.classes.digraph', 'networkx.classes.multigraph', 'networkx.classes.multidigraph', 'networkx.classes.ordered', 'networkx.classes.function', 'networkx.classes.filters', 'networkx.classes.graphviews', 'networkx.convert_matrix', 'networkx.relabel', 'networkx.generators', 'networkx.generators.atlas', 'networkx.generators.classic', 'networkx.generators.community', 'networkx.generators.degree_seq', 'networkx.generators.directed', 'networkx.generators.duplication', 'networkx.generators.ego', 'networkx.generators.expanders', 'networkx.generators.geometric', 'scipy', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.pocketfft', 'numpy.fft.pocketfft_internal', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_12', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'mkl_fft._float_utils', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'numpy.random.entropy', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy._lib._util', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'numpy.dual', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'networkx.generators.intersection', 'networkx.algorithms', 'networkx.algorithms.assortativity', 'networkx.algorithms.assortativity.connectivity', 'networkx.algorithms.assortativity.correlation', 'networkx.algorithms.assortativity.mixing', 'networkx.algorithms.assortativity.pairs', 'networkx.algorithms.assortativity.neighbor_degree', 'networkx.algorithms.boundary', 'networkx.algorithms.bridges', 'networkx.algorithms.chains', 'networkx.algorithms.centrality', 'networkx.algorithms.centrality.betweenness', 'networkx.algorithms.centrality.betweenness_subset', 'networkx.algorithms.centrality.closeness', 'networkx.algorithms.centrality.subgraph_alg', 'networkx.algorithms.centrality.current_flow_closeness', 'networkx.algorithms.centrality.flow_matrix', 'networkx.algorithms.centrality.current_flow_betweenness', 'networkx.algorithms.centrality.current_flow_betweenness_subset', 'networkx.algorithms.centrality.degree_alg', 'networkx.algorithms.centrality.dispersion', 'networkx.algorithms.centrality.eigenvector', 'networkx.algorithms.centrality.harmonic', 'networkx.algorithms.centrality.katz', 'networkx.algorithms.centrality.load', 'networkx.algorithms.centrality.reaching', 'networkx.algorithms.centrality.percolation', 'networkx.algorithms.centrality.second_order', 'networkx.algorithms.centrality.voterank_alg', 'networkx.algorithms.chordal', 'networkx.algorithms.cluster', 'networkx.algorithms.clique', 'networkx.algorithms.communicability_alg', 'networkx.algorithms.components', 'networkx.algorithms.components.connected', 'networkx.algorithms.components.strongly_connected', 'networkx.algorithms.components.weakly_connected', 'networkx.algorithms.components.attracting', 'networkx.algorithms.components.biconnected', 'networkx.algorithms.components.semiconnected', 'networkx.algorithms.coloring', 'networkx.algorithms.coloring.greedy_coloring', 'networkx.algorithms.coloring.greedy_coloring_with_interchange', 'networkx.algorithms.coloring.equitable_coloring', 'networkx.algorithms.core', 'networkx.algorithms.covering', 'networkx.algorithms.cycles', 'networkx.algorithms.cuts', 'networkx.algorithms.dag', 'networkx.generators.trees', 'networkx.algorithms.distance_measures', 'networkx.algorithms.distance_regular', 'networkx.algorithms.dominance', 'networkx.algorithms.dominating', 'networkx.algorithms.efficiency', 'networkx.algorithms.euler', 'networkx.algorithms.graphical', 'networkx.algorithms.hierarchy', 'networkx.algorithms.hybrid', 'networkx.algorithms.link_analysis', 'networkx.algorithms.link_analysis.pagerank_alg', 'networkx.algorithms.link_analysis.hits_alg', 'networkx.algorithms.link_prediction', 'networkx.algorithms.lowest_common_ancestors', 'networkx.algorithms.isolate', 'networkx.algorithms.matching', 'networkx.algorithms.minors', 'networkx.algorithms.mis', 'networkx.algorithms.operators', 'networkx.algorithms.operators.all', 'networkx.algorithms.operators.binary', 'networkx.algorithms.operators.product', 'networkx.algorithms.operators.unary', 'networkx.algorithms.planarity', 'networkx.algorithms.planar_drawing', 'networkx.algorithms.reciprocity', 'networkx.algorithms.richclub', 'networkx.algorithms.shortest_paths', 'networkx.algorithms.shortest_paths.generic', 'networkx.algorithms.shortest_paths.unweighted', 'networkx.algorithms.shortest_paths.weighted', 'networkx.algorithms.shortest_paths.astar', 'networkx.algorithms.shortest_paths.dense', 'networkx.algorithms.similarity', 'networkx.algorithms.simple_paths', 'networkx.algorithms.smallworld', 'networkx.algorithms.smetric', 'networkx.algorithms.structuralholes', 'networkx.algorithms.sparsifiers', 'networkx.algorithms.swap', 'networkx.algorithms.traversal', 'networkx.algorithms.traversal.beamsearch', 'networkx.algorithms.traversal.breadth_first_search', 'networkx.algorithms.traversal.depth_first_search', 'networkx.algorithms.traversal.edgedfs', 'networkx.algorithms.traversal.edgebfs', 'networkx.algorithms.triads', 'networkx.algorithms.vitality', 'networkx.algorithms.voronoi', 'networkx.algorithms.wiener', 'networkx.algorithms.bipartite', 'networkx.algorithms.bipartite.basic', 'networkx.algorithms.bipartite.centrality', 'networkx.algorithms.bipartite.cluster', 'networkx.algorithms.bipartite.covering', 'networkx.algorithms.bipartite.matching', 'networkx.algorithms.bipartite.edgelist', 'networkx.algorithms.bipartite.matrix', 'networkx.algorithms.bipartite.projection', 'networkx.algorithms.bipartite.redundancy', 'networkx.algorithms.bipartite.spectral', 'networkx.algorithms.bipartite.generators', 'networkx.algorithms.node_classification', 'networkx.algorithms.node_classification.hmn', 'networkx.algorithms.node_classification.utils', 'networkx.algorithms.node_classification.lgc', 'networkx.algorithms.connectivity', 'networkx.algorithms.connectivity.connectivity', 'networkx.algorithms.flow', 'networkx.algorithms.flow.maxflow', 'networkx.algorithms.flow.boykovkolmogorov', 'networkx.algorithms.flow.utils', 'networkx.algorithms.flow.dinitz_alg', 'networkx.algorithms.flow.edmondskarp', 'networkx.algorithms.flow.preflowpush', 'networkx.algorithms.flow.shortestaugmentingpath', 'networkx.algorithms.flow.mincost', 'networkx.algorithms.flow.gomory_hu', 'networkx.algorithms.flow.capacityscaling', 'networkx.algorithms.flow.networksimplex', 'networkx.algorithms.connectivity.utils', 'networkx.algorithms.connectivity.cuts', 'networkx.algorithms.connectivity.edge_augmentation', 'networkx.algorithms.connectivity.edge_kcomponents', 'networkx.algorithms.connectivity.disjoint_paths', 'networkx.algorithms.connectivity.kcomponents', 'networkx.algorithms.connectivity.kcutsets', 'networkx.algorithms.connectivity.stoerwagner', 'networkx.algorithms.community', 'networkx.algorithms.community.asyn_fluid', 'networkx.algorithms.community.centrality', 'networkx.algorithms.community.community_generators', 'networkx.algorithms.community.kclique', 'networkx.algorithms.community.kernighan_lin', 'networkx.algorithms.community.community_utils', 'networkx.algorithms.community.label_propagation', 'networkx.algorithms.community.modularity_max', 'networkx.algorithms.community.quality', 'networkx.utils.mapped_queue', 'networkx.algorithms.isomorphism', 'networkx.algorithms.isomorphism.isomorph', 'networkx.algorithms.isomorphism.vf2userfunc', 'networkx.algorithms.isomorphism.isomorphvf2', 'networkx.algorithms.isomorphism.matchhelpers', 'networkx.algorithms.isomorphism.temporalisomorphvf2', 'networkx.algorithms.tournament', 'networkx.algorithms.tree', 'networkx.algorithms.tree.branchings', 'networkx.algorithms.tree.recognition', 'networkx.algorithms.tree.coding', 'networkx.algorithms.tree.mst', 'networkx.algorithms.tree.operations', 'networkx.generators.joint_degree_seq', 'networkx.generators.lattice', 'networkx.generators.line', 'networkx.generators.mycielski', 'networkx.generators.nonisomorphic_trees', 'networkx.generators.random_clustered', 'networkx.generators.random_graphs', 'networkx.generators.small', 'networkx.generators.social', 'networkx.generators.spectral_graph_forge', 'networkx.generators.stochastic', 'networkx.generators.triads', 'networkx.readwrite', 'networkx.readwrite.adjlist', 'networkx.readwrite.multiline_adjlist', 'networkx.readwrite.edgelist', 'networkx.readwrite.gpickle', 'networkx.readwrite.pajek', 'networkx.readwrite.leda', 'networkx.readwrite.sparse6', 'networkx.readwrite.graph6', 'networkx.readwrite.nx_yaml', 'networkx.readwrite.gml', 'networkx.readwrite.graphml', 'xml.etree.cElementTree', 'lxml', 'lxml.etree', 'lxml._elementpath', 'networkx.readwrite.gexf', 'networkx.readwrite.nx_shp', 'networkx.readwrite.json_graph', 'networkx.readwrite.json_graph.node_link', 'networkx.readwrite.json_graph.adjacency', 'networkx.readwrite.json_graph.tree', 'networkx.readwrite.json_graph.jit', 'networkx.readwrite.json_graph.cytoscape', 'networkx.linalg', 'networkx.linalg.attrmatrix', 'networkx.linalg.spectrum', 'networkx.linalg.graphmatrix', 'networkx.linalg.laplacianmatrix', 'networkx.linalg.algebraicconnectivity', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'networkx.linalg.modularitymatrix', 'networkx.tests', 'networkx.tests.test', 'networkx.drawing', 'networkx.drawing.layout', 'networkx.drawing.nx_pylab', 'networkx.drawing.nx_agraph', 'networkx.drawing.nx_pydot', 'dbt.context.providers', 'dbt.adapters.factory', 'dbt.config', 'dbt.config.profile', 'dbt.contracts.project', 'dbt.config.renderer', 'dbt.config.project', 'dbt.legacy_config_updater', 'dbt.config.runtime', 'dbt.context.context_config', 'dbt.contracts.results', 'dbt.task.compile', 'dbt.task.runnable', 'multiprocessing.dummy', 'multiprocessing.dummy.connection', 'dbt.task.base', 'dbt.perf_utils', 'dbt.parser', 'dbt.parser.analysis', 'dbt.parser.base', 'dbt.parser.results', 'dbt.parser.search', 'dbt.parser.data_test', 'dbt.parser.docs', 'dbt.parser.hooks', 'dbt.parser.macros', 'dbt.parser.models', 'dbt.parser.schemas', 'dbt.parser.schema_test_builders', 'dbt.parser.seeds', 'dbt.parser.snapshots', 'dbt.parser.manifest', 'dbt.context.docs', 'dbt.parser.sources', 'dbt.graph', 'dbt.graph.selector', 'dbt.task.debug', 'dbt.task.clean', 'dbt.task.deps', 'dbt.deps', 'dbt.deps.base', 'dbt.deps.resolver', 'dbt.deps.local', 'dbt.deps.git', 'dbt.clients.git', 'dbt.deps.registry', 'dbt.clients.registry', 'dbt.task.init', 'dbt.task.seed', 'dbt.task.test', 'dbt.task.snapshot', 'dbt.task.generate', 'dbt.task.serve', 'webbrowser', 'shlex', 'http.server', 'socketserver', 'dbt.task.freshness', 'dbt.task.run_operation', 'dbt.task.list', 'dbt.task.rpc', 'dbt.task.rpc.server', 'dbt.task.rpc.sql_commands', 'dbt.contracts.rpc', 'dbt.parser.rpc', 'dbt.rpc', 'dbt.rpc.error', 'jsonrpc', 'jsonrpc.manager', 'jsonrpc.utils', 'jsonrpc.six', 'jsonrpc.six.moves', 'jsonrpc.six.moves.urllib_parse', 'jsonrpc.six.moves.urllib.parse', 'jsonrpc.six.moves.urllib_error', 'jsonrpc.six.moves.urllib.error', 'jsonrpc.six.moves.urllib_request', 'jsonrpc.six.moves.urllib.request', 'jsonrpc.six.moves.urllib_response', 'jsonrpc.six.moves.urllib.response', 'jsonrpc.six.moves.urllib_robotparser', 'jsonrpc.six.moves.urllib.robotparser', 'jsonrpc.six.moves.urllib', 'jsonrpc.exceptions', 'jsonrpc.jsonrpc1', 'jsonrpc.base', 'jsonrpc.jsonrpc2', 'jsonrpc.jsonrpc', 'jsonrpc.dispatcher', 'dbt.rpc.node_runners', 'dbt.task.rpc.base', 'dbt.rpc.method', 'dbt.task.rpc.project_commands', 'dbt.task.rpc.cli', 'dbt.task.rpc.deps', 'werkzeug', 'werkzeug.serving', 'werkzeug._compat', 'werkzeug._internal', 'werkzeug.exceptions', 'werkzeug.utils', 'werkzeug.urls', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'werkzeug.middleware', 'werkzeug.middleware.dispatcher', 'dbt.rpc.logger', 'logbook.queues', 'dbt.rpc.response_manager', 'dbt.rpc.task_handler', 'dbt.rpc.task_handler_protocol', 'dbt.rpc.task_manager', 'dbt.rpc.gc', 'dbt.rpc.builtins', 'dbt.profiler', 'cProfile', '_lsprof', 'profile', 'pstats', 'dbt.adapters.bigquery', 'dbt.adapters.bigquery.connections', 'google.auth', 'google.auth._default', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'six.moves.urllib', 'google.cloud.bigquery', 'google.cloud.bigquery.client', 'pyarrow', 'pyarrow._generated_version', 'pyarrow.compat', 'cloudpickle', 'cloudpickle.cloudpickle', 'pyarrow.lib', 'pyarrow.util', 'pyarrow.filesystem', 'six.moves.urllib.parse', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'google.resumable_media', 'google.resumable_media.common', 'google.resumable_media.requests', 'google.resumable_media.requests.download', 'google.resumable_media._download', 'google.resumable_media._helpers', 'google.resumable_media.requests._helpers', 'google.resumable_media.requests.upload', 'google.resumable_media._upload', 'google.api_core', 'google.api_core.client_options', 'google.api_core.exceptions', 'google.api_core.page_iterator', 'google.auth.transport.requests', 'google.auth.transport._mtls_helper', 'google.cloud._helpers', 'google.protobuf', 'google.protobuf.duration_pb2', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'google.protobuf.internal.well_known_types', 'google.protobuf.timestamp_pb2', 'google.cloud.exceptions', 'google.cloud.client', 'google.auth.credentials', 'google.auth._helpers', 'google.oauth2', 'google.oauth2.service_account', 'google.auth._service_account_info', 'google.auth.crypt', 'google.auth.crypt.base', 'google.auth.crypt.rsa', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.es256', 'google.auth.jwt', 'cachetools', 'cachetools.keys', 'cachetools.cache', 'cachetools.abc', 'cachetools.lfu', 'cachetools.lru', 'cachetools.rr', 'cachetools.ttl', 'google.oauth2._client', 'google.cloud.bigquery._helpers', 'google.cloud.bigquery._http', 'google.cloud._http', 'google.api_core.client_info', 'google.cloud.bigquery._pandas_helpers', 'google.cloud.bigquery_storage_v1beta1.types', 'google.api_core.protobuf_helpers', 'google.protobuf.field_mask_pb2', 'google.protobuf.wrappers_pb2', 'google.cloud.bigquery_storage_v1beta1.proto', 'google.cloud.bigquery_storage_v1beta1.proto.arrow_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.avro_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.read_options_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.storage_pb2', 'google.api', 'google.api.annotations_pb2', 'google.api.http_pb2', 'google.protobuf.descriptor_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.table_reference_pb2', 'google.protobuf.empty_pb2', 'google.api.client_pb2', 'google.api_core.gapic_v1.client_info', 'pandas', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'timeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-21 23:31:22.634215 (MainThread): CACHEDIR=/Users/erikm/.matplotlib
2020-05-21 23:31:22.637090 (MainThread): Using fontManager instance from /Users/erikm/.matplotlib/fontlist-v310.json
2020-05-21 23:31:22.881272 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/erikm/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-05-21 23:31:22.885935 (MainThread): Tracking: tracking
2020-05-21 23:31:22.896809 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1d491ed0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1d8f8810>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1f245c10>]}
2020-05-21 23:31:22.920023 (MainThread): Partial parsing not enabled
2020-05-21 23:31:22.922198 (MainThread): Parsing macros/core.sql
2020-05-21 23:31:22.927597 (MainThread): Parsing macros/materializations/helpers.sql
2020-05-21 23:31:22.937078 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-05-21 23:31:22.939045 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-05-21 23:31:22.956049 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-05-21 23:31:22.987287 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-05-21 23:31:23.010718 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-05-21 23:31:23.012745 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-05-21 23:31:23.019615 (MainThread): Parsing macros/materializations/common/merge.sql
2020-05-21 23:31:23.034744 (MainThread): Parsing macros/materializations/table/table.sql
2020-05-21 23:31:23.041857 (MainThread): Parsing macros/materializations/view/view.sql
2020-05-21 23:31:23.048538 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-05-21 23:31:23.054078 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-05-21 23:31:23.055238 (MainThread): Parsing macros/etc/query.sql
2020-05-21 23:31:23.056437 (MainThread): Parsing macros/etc/is_incremental.sql
2020-05-21 23:31:23.058273 (MainThread): Parsing macros/etc/datetime.sql
2020-05-21 23:31:23.068380 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-05-21 23:31:23.070663 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-05-21 23:31:23.072105 (MainThread): Parsing macros/adapters/common.sql
2020-05-21 23:31:23.125977 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-05-21 23:31:23.127626 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-05-21 23:31:23.128784 (MainThread): Parsing macros/schema_tests/unique.sql
2020-05-21 23:31:23.130113 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-05-21 23:31:23.132599 (MainThread): Parsing macros/etc.sql
2020-05-21 23:31:23.133389 (MainThread): Parsing macros/catalog.sql
2020-05-21 23:31:23.140000 (MainThread): Parsing macros/adapters.sql
2020-05-21 23:31:23.156466 (MainThread): Parsing macros/materializations/seed.sql
2020-05-21 23:31:23.158846 (MainThread): Parsing macros/materializations/view.sql
2020-05-21 23:31:23.160971 (MainThread): Parsing macros/materializations/table.sql
2020-05-21 23:31:23.171245 (MainThread): Parsing macros/materializations/incremental.sql
2020-05-21 23:31:23.184429 (MainThread): Parsing macros/materializations/snapshot.sql
2020-05-21 23:31:23.205344 (MainThread): Partial parsing not enabled
2020-05-21 23:31:23.238335 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:31:23.238473 (MainThread): Opening a new connection, currently in state init
2020-05-21 23:31:23.256825 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:31:23.256950 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.267566 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:31:23.267694 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.277415 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:31:23.277521 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.288256 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:31:23.288383 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.298849 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:31:23.298974 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.309178 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:31:23.309291 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.319565 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:31:23.319693 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.330212 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:31:23.330339 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.340998 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:31:23.341128 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:31:23.459985 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1fb4f950>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1fd13910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1fd13dd0>]}
2020-05-21 23:31:23.460264 (MainThread): Flushing usage events
2020-05-21 23:31:23.904562 (MainThread): Connection 'model.stripe_source.stg_stripe_balance_transaction' was properly closed.
2020-05-21 23:31:23.904899 (MainThread): Encountered an error:
2020-05-21 23:31:23.905177 (MainThread): Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'
2020-05-21 23:31:23.915854 (MainThread): jsonschema.exceptions.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 598, in _target_from_dict
    return cls.from_dict(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 594, in from_dict
    cls.validate(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 937, in validate
    raise ValidationError.create_from(error) from error
hologram.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 396, in run
    self._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 110, in _runtime_initialize
    super()._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 78, in _runtime_initialize
    self.load_manifest()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 66, in load_manifest
    self.manifest = get_full_manifest(self.config)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/perf_utils.py", line 23, in get_full_manifest
    return load_manifest(config, internal, set_header)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 641, in load_manifest
    return ManifestLoader.load_all(config, internal_manifest, macro_hook)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 356, in load_all
    loader.load(internal_manifest=internal_manifest)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 212, in load
    self.parse_project(project, macro_manifest, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 186, in parse_project
    self.parse_with_cache(path, parser, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 142, in parse_with_cache
    parser.parse_file(block)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 526, in parse_file
    for test_block in parser.parse():
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 615, in parse
    source = self._target_from_dict(UnparsedSourceDefinition, data)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 601, in _target_from_dict
    raise CompilationException(msg) from exc
dbt.exceptions.CompilationException: Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'

2020-05-21 23:33:50.264829 (MainThread): Running with dbt=0.17.0-rc1
2020-05-21 23:33:50.397320 (MainThread): Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
2020-05-21 23:33:50.777756 (MainThread): $HOME=/Users/erikm
2020-05-21 23:33:50.777965 (MainThread): CONFIGDIR=/Users/erikm/.matplotlib
2020-05-21 23:33:50.778083 (MainThread): matplotlib data path: /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-21 23:33:50.782247 (MainThread): loaded rc file /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-21 23:33:50.783754 (MainThread): matplotlib version 3.1.1
2020-05-21 23:33:50.783925 (MainThread): interactive is False
2020-05-21 23:33:50.783980 (MainThread): platform is darwin
2020-05-21 23:33:50.784146 (MainThread): loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'snowflake', 'sphinxcontrib', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'dbt', 'dbt.main', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'dbt.logger', 'dbt.flags', 'multiprocessing', 'multiprocessing.context', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'multiprocessing.process', 'signal', 'multiprocessing.reduction', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'socket', '_socket', 'selectors', 'math', 'select', 'errno', 'array', '__mp_main__', 'dbt.ui', 'dbt.ui.colors', 'colorama', 'colorama.initialise', 'atexit', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'logging', 'weakref', 'string', '_string', 'dataclasses', 'copy', 'inspect', 'dis', 'opcode', '_opcode', 'datetime', '_datetime', 'logbook', 'logbook.base', 'logbook.concurrency', 'gevent', '__future__', 'gevent._config', 'textwrap', 'gevent._compat', 'gevent.libev', 'gevent.libev.corecext', '_cython_0_29_2', 'cython_runtime', 'gevent._hub_local', 'gevent._util', 'gevent.__hub_local', 'greenlet', 'gevent.__greenlet_primitives', 'gc', 'gevent.exceptions', 'gevent._hub_primitives', 'gevent._greenlet_primitives', 'gevent._waiter', 'gevent.__waiter', 'gevent.timeout', 'gevent.__hub_primitives', 'gevent.greenlet', 'gevent._tblib', 'gevent._greenlet', 'gevent.__ident', 'gevent.hub', 'gevent._ident', 'gevent.os', 'fcntl', 'gevent.signal', 'gevent.monkey', 'gevent.thread', 'gevent.lock', 'gevent._semaphore', 'gevent._abstract_linkable', 'gevent.__abstract_linkable', 'gevent.__semaphore', 'gevent.local', 'gevent._local', 'gevent.threading', 'contextvars', '_contextvars', 'logbook.helpers', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'http', 'http.client', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'locale', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'logbook._fallback', 'logbook.handlers', 'gzip', 'zlib', '_compression', 'logbook.compat', 'logbook.__version__', 'hologram', 'uuid', '_uuid', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'six', 'decimal', 'numbers', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'jsonschema', 'jsonschema.exceptions', 'pprint', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'platform', 'subprocess', '_posixsubprocess', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version', 'jsonschema._utils', 'pkgutil', 'jsonschema.compat', 'urllib.request', 'tempfile', 'shutil', 'fnmatch', 'bz2', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'urllib.error', 'urllib.response', '_scproxy', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'unicodedata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._compat', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sysconfig', '_osx_support', '_sysconfigdata_m_darwin_darwin', 'argparse', 'gettext', 'dbt.version', 'glob', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'queue', '_queue', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._errors', 'asn1crypto._types', 'asn1crypto.algos', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._ordereddict', 'asn1crypto.core', 'fractions', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'dbt.exceptions', 'dbt.node_types', 'hologram.helpers', 'dbt.semver', 'dbt.utils', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'typing_extensions', 'dbt.clients', 'dbt.clients.yaml_helper', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', '_yaml', 'dbt.task', 'dbt.task.run', 'dbt.node_runners', 'dbt.deprecations', 'dbt.links', 'dbt.ui.printer', 'dbt.tracking', 'snowplow_tracker', 'snowplow_tracker._version', 'snowplow_tracker.subject', 'snowplow_tracker.emitters', 'snowplow_tracker.self_describing_json', 'snowplow_tracker.tracker', 'snowplow_tracker.payload', 'snowplow_tracker.timestamp', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dbt.adapters', 'dbt.adapters.base', 'dbt.contracts', 'dbt.contracts.connection', 'dbt.contracts.util', 'dbt.clients.system', 'tarfile', 'dbt.adapters.base.meta', 'dbt.adapters.base.connections', 'multiprocessing.synchronize', '_multiprocessing', 'multiprocessing.util', 'agate', 'agate.aggregations', 'agate.aggregations.base', 'agate.exceptions', 'agate.aggregations.all', 'agate.data_types', 'agate.data_types.base', 'agate.data_types.boolean', 'agate.data_types.date', 'isodate', 'isodate.isodates', 'isodate.isostrf', 'isodate.duration', 'isodate.isotzinfo', 'isodate.isoerror', 'isodate.tzinfo', 'isodate.isotime', 'isodate.isodatetime', 'isodate.isoduration', 'parsedatetime', 'parsedatetime.pdt_locales', 'parsedatetime.pdt_locales.icu', 'parsedatetime.context', 'parsedatetime.warns', 'parsedatetime.pdt_locales.de_DE', 'parsedatetime.pdt_locales.base', 'parsedatetime.pdt_locales.en_AU', 'parsedatetime.pdt_locales.en_US', 'parsedatetime.pdt_locales.es', 'parsedatetime.pdt_locales.nl_NL', 'parsedatetime.pdt_locales.pt_BR', 'parsedatetime.pdt_locales.ru_RU', 'parsedatetime.pdt_locales.fr_FR', 'agate.data_types.date_time', 'agate.data_types.number', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'babel.plural', 'agate.data_types.text', 'agate.data_types.time_delta', 'pytimeparse', 'pytimeparse.timeparse', 'agate.aggregations.any', 'agate.aggregations.count', 'agate.utils', 'slugify', 'slugify.special', 'slugify.slugify', 'html', 'html.entities', 'text_unidecode', 'agate.warns', 'agate.aggregations.deciles', 'agate.aggregations.has_nulls', 'agate.aggregations.percentiles', 'agate.aggregations.first', 'agate.aggregations.iqr', 'agate.aggregations.mad', 'agate.aggregations.median', 'agate.aggregations.max_length', 'agate.aggregations.max_precision', 'agate.aggregations.max', 'agate.aggregations.mean', 'agate.aggregations.sum', 'agate.aggregations.min', 'agate.aggregations.mode', 'agate.aggregations.quartiles', 'agate.aggregations.quintiles', 'agate.aggregations.stdev', 'agate.aggregations.variance', 'agate.aggregations.summary', 'agate.columns', 'agate.mapped_sequence', 'agate.computations', 'agate.computations.base', 'agate.computations.formula', 'agate.computations.change', 'agate.computations.percent', 'agate.computations.percent_change', 'agate.computations.rank', 'agate.computations.percentile_rank', 'agate.computations.slug', 'agate.config', 'agate.rows', 'agate.table', 'agate.type_tester', 'agate.table.aggregate', 'agate.table.bar_chart', 'leather', 'leather.axis', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'leather.svg', 'leather.theme', 'leather.data_types', 'leather.chart', 'leather.scales', 'leather.scales.base', 'leather.shapes', 'leather.shapes.base', 'leather.shapes.bars', 'leather.series', 'leather.series.base', 'leather.utils', 'leather.series.category', 'leather.shapes.columns', 'leather.shapes.dots', 'leather.shapes.line', 'leather.scales.linear', 'leather.ticks', 'leather.ticks.base', 'leather.ticks.score', 'leather.ticks.score_time', 'leather.scales.ordinal', 'leather.scales.temporal', 'leather.grid', 'leather.lattice', 'leather.testcase', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'agate.table.bins', 'babel.numbers', 'agate.table.column_chart', 'agate.table.compute', 'agate.table.denormalize', 'agate.table.distinct', 'agate.table.exclude', 'agate.table.find', 'agate.table.from_csv', 'agate.table.from_fixed', 'agate.fixed', 'agate.table.from_json', 'agate.table.from_object', 'agate.table.group_by', 'agate.tableset', 'agate.tableset.aggregate', 'agate.tableset.bar_chart', 'agate.tableset.column_chart', 'agate.tableset.from_csv', 'agate.tableset.from_json', 'agate.tableset.having', 'agate.tableset.line_chart', 'agate.tableset.merge', 'agate.tableset.print_structure', 'agate.tableset.proxy_methods', 'agate.tableset.scatterplot', 'agate.tableset.to_csv', 'agate.tableset.to_json', 'agate.table.homogenize', 'agate.table.join', 'agate.table.limit', 'agate.table.line_chart', 'agate.table.merge', 'agate.table.normalize', 'agate.table.order_by', 'agate.table.pivot', 'agate.table.print_bars', 'agate.table.print_html', 'agate.table.print_structure', 'agate.table.print_table', 'agate.table.rename', 'agate.table.scatterplot', 'agate.table.select', 'agate.table.to_csv', 'agate.table.to_json', 'agate.table.where', 'agate.testcase', 'agate.csv_py3', 'csv', '_csv', 'dbt.contracts.graph', 'dbt.contracts.graph.manifest', 'dbt.contracts.graph.compiled', 'dbt.contracts.graph.parsed', 'pathlib', 'dbt.contracts.graph.unparsed', 'dbt.helper_types', 'dbt.contracts.graph.model_config', 'dbt.hooks', 'sqlparse', 'sqlparse.sql', 'sqlparse.tokens', 'sqlparse.compat', 'sqlparse.utils', 'sqlparse.cli', 'sqlparse.exceptions', 'sqlparse.engine', 'sqlparse.engine.grouping', 'sqlparse.engine.filter_stack', 'sqlparse.lexer', 'sqlparse.keywords', 'sqlparse.engine.statement_splitter', 'sqlparse.filters', 'sqlparse.filters.others', 'sqlparse.filters.output', 'sqlparse.filters.tokens', 'sqlparse.filters.reindent', 'sqlparse.filters.right_margin', 'sqlparse.filters.aligned_indent', 'sqlparse.formatter', 'dbt.include', 'dbt.include.global_project', 'dbt.adapters.base.query_headers', 'dbt.clients.jinja', 'ast', '_ast', 'jinja2', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.bccache', 'jinja2._compat', 'jinja2.utils', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'jinja2.lexer', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'jinja2.ext', 'jinja2.nativetypes', 'jinja2.sandbox', 'dbt.clients._jinja_blocks', 'dbt.context', 'dbt.context.configured', 'dbt.context.base', 'dbt.context.target', 'dbt.adapters.base.relation', 'dbt.adapters.base.column', 'dbt.adapters.base.impl', 'dbt.clients.agate_helper', 'babel.dates', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'dbt.adapters.cache', 'dbt.adapters.base.plugin', 'dbt.compilation', 'dbt.linker', 'networkx', 'networkx.release', 'networkx.exception', 'networkx.utils', 'networkx.utils.misc', 'networkx.utils.decorators', 'decorator', 'networkx.utils.random_sequence', 'networkx.utils.union_find', 'networkx.utils.rcm', 'networkx.utils.heaps', 'networkx.utils.contextmanagers', 'networkx.classes', 'networkx.classes.graph', 'networkx.classes.coreviews', 'networkx.classes.reportviews', 'networkx.convert', 'networkx.classes.digraph', 'networkx.classes.multigraph', 'networkx.classes.multidigraph', 'networkx.classes.ordered', 'networkx.classes.function', 'networkx.classes.filters', 'networkx.classes.graphviews', 'networkx.convert_matrix', 'networkx.relabel', 'networkx.generators', 'networkx.generators.atlas', 'networkx.generators.classic', 'networkx.generators.community', 'networkx.generators.degree_seq', 'networkx.generators.directed', 'networkx.generators.duplication', 'networkx.generators.ego', 'networkx.generators.expanders', 'networkx.generators.geometric', 'scipy', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.pocketfft', 'numpy.fft.pocketfft_internal', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_12', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'mkl_fft._float_utils', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'numpy.random.entropy', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy._lib._util', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'numpy.dual', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'networkx.generators.intersection', 'networkx.algorithms', 'networkx.algorithms.assortativity', 'networkx.algorithms.assortativity.connectivity', 'networkx.algorithms.assortativity.correlation', 'networkx.algorithms.assortativity.mixing', 'networkx.algorithms.assortativity.pairs', 'networkx.algorithms.assortativity.neighbor_degree', 'networkx.algorithms.boundary', 'networkx.algorithms.bridges', 'networkx.algorithms.chains', 'networkx.algorithms.centrality', 'networkx.algorithms.centrality.betweenness', 'networkx.algorithms.centrality.betweenness_subset', 'networkx.algorithms.centrality.closeness', 'networkx.algorithms.centrality.subgraph_alg', 'networkx.algorithms.centrality.current_flow_closeness', 'networkx.algorithms.centrality.flow_matrix', 'networkx.algorithms.centrality.current_flow_betweenness', 'networkx.algorithms.centrality.current_flow_betweenness_subset', 'networkx.algorithms.centrality.degree_alg', 'networkx.algorithms.centrality.dispersion', 'networkx.algorithms.centrality.eigenvector', 'networkx.algorithms.centrality.harmonic', 'networkx.algorithms.centrality.katz', 'networkx.algorithms.centrality.load', 'networkx.algorithms.centrality.reaching', 'networkx.algorithms.centrality.percolation', 'networkx.algorithms.centrality.second_order', 'networkx.algorithms.centrality.voterank_alg', 'networkx.algorithms.chordal', 'networkx.algorithms.cluster', 'networkx.algorithms.clique', 'networkx.algorithms.communicability_alg', 'networkx.algorithms.components', 'networkx.algorithms.components.connected', 'networkx.algorithms.components.strongly_connected', 'networkx.algorithms.components.weakly_connected', 'networkx.algorithms.components.attracting', 'networkx.algorithms.components.biconnected', 'networkx.algorithms.components.semiconnected', 'networkx.algorithms.coloring', 'networkx.algorithms.coloring.greedy_coloring', 'networkx.algorithms.coloring.greedy_coloring_with_interchange', 'networkx.algorithms.coloring.equitable_coloring', 'networkx.algorithms.core', 'networkx.algorithms.covering', 'networkx.algorithms.cycles', 'networkx.algorithms.cuts', 'networkx.algorithms.dag', 'networkx.generators.trees', 'networkx.algorithms.distance_measures', 'networkx.algorithms.distance_regular', 'networkx.algorithms.dominance', 'networkx.algorithms.dominating', 'networkx.algorithms.efficiency', 'networkx.algorithms.euler', 'networkx.algorithms.graphical', 'networkx.algorithms.hierarchy', 'networkx.algorithms.hybrid', 'networkx.algorithms.link_analysis', 'networkx.algorithms.link_analysis.pagerank_alg', 'networkx.algorithms.link_analysis.hits_alg', 'networkx.algorithms.link_prediction', 'networkx.algorithms.lowest_common_ancestors', 'networkx.algorithms.isolate', 'networkx.algorithms.matching', 'networkx.algorithms.minors', 'networkx.algorithms.mis', 'networkx.algorithms.operators', 'networkx.algorithms.operators.all', 'networkx.algorithms.operators.binary', 'networkx.algorithms.operators.product', 'networkx.algorithms.operators.unary', 'networkx.algorithms.planarity', 'networkx.algorithms.planar_drawing', 'networkx.algorithms.reciprocity', 'networkx.algorithms.richclub', 'networkx.algorithms.shortest_paths', 'networkx.algorithms.shortest_paths.generic', 'networkx.algorithms.shortest_paths.unweighted', 'networkx.algorithms.shortest_paths.weighted', 'networkx.algorithms.shortest_paths.astar', 'networkx.algorithms.shortest_paths.dense', 'networkx.algorithms.similarity', 'networkx.algorithms.simple_paths', 'networkx.algorithms.smallworld', 'networkx.algorithms.smetric', 'networkx.algorithms.structuralholes', 'networkx.algorithms.sparsifiers', 'networkx.algorithms.swap', 'networkx.algorithms.traversal', 'networkx.algorithms.traversal.beamsearch', 'networkx.algorithms.traversal.breadth_first_search', 'networkx.algorithms.traversal.depth_first_search', 'networkx.algorithms.traversal.edgedfs', 'networkx.algorithms.traversal.edgebfs', 'networkx.algorithms.triads', 'networkx.algorithms.vitality', 'networkx.algorithms.voronoi', 'networkx.algorithms.wiener', 'networkx.algorithms.bipartite', 'networkx.algorithms.bipartite.basic', 'networkx.algorithms.bipartite.centrality', 'networkx.algorithms.bipartite.cluster', 'networkx.algorithms.bipartite.covering', 'networkx.algorithms.bipartite.matching', 'networkx.algorithms.bipartite.edgelist', 'networkx.algorithms.bipartite.matrix', 'networkx.algorithms.bipartite.projection', 'networkx.algorithms.bipartite.redundancy', 'networkx.algorithms.bipartite.spectral', 'networkx.algorithms.bipartite.generators', 'networkx.algorithms.node_classification', 'networkx.algorithms.node_classification.hmn', 'networkx.algorithms.node_classification.utils', 'networkx.algorithms.node_classification.lgc', 'networkx.algorithms.connectivity', 'networkx.algorithms.connectivity.connectivity', 'networkx.algorithms.flow', 'networkx.algorithms.flow.maxflow', 'networkx.algorithms.flow.boykovkolmogorov', 'networkx.algorithms.flow.utils', 'networkx.algorithms.flow.dinitz_alg', 'networkx.algorithms.flow.edmondskarp', 'networkx.algorithms.flow.preflowpush', 'networkx.algorithms.flow.shortestaugmentingpath', 'networkx.algorithms.flow.mincost', 'networkx.algorithms.flow.gomory_hu', 'networkx.algorithms.flow.capacityscaling', 'networkx.algorithms.flow.networksimplex', 'networkx.algorithms.connectivity.utils', 'networkx.algorithms.connectivity.cuts', 'networkx.algorithms.connectivity.edge_augmentation', 'networkx.algorithms.connectivity.edge_kcomponents', 'networkx.algorithms.connectivity.disjoint_paths', 'networkx.algorithms.connectivity.kcomponents', 'networkx.algorithms.connectivity.kcutsets', 'networkx.algorithms.connectivity.stoerwagner', 'networkx.algorithms.community', 'networkx.algorithms.community.asyn_fluid', 'networkx.algorithms.community.centrality', 'networkx.algorithms.community.community_generators', 'networkx.algorithms.community.kclique', 'networkx.algorithms.community.kernighan_lin', 'networkx.algorithms.community.community_utils', 'networkx.algorithms.community.label_propagation', 'networkx.algorithms.community.modularity_max', 'networkx.algorithms.community.quality', 'networkx.utils.mapped_queue', 'networkx.algorithms.isomorphism', 'networkx.algorithms.isomorphism.isomorph', 'networkx.algorithms.isomorphism.vf2userfunc', 'networkx.algorithms.isomorphism.isomorphvf2', 'networkx.algorithms.isomorphism.matchhelpers', 'networkx.algorithms.isomorphism.temporalisomorphvf2', 'networkx.algorithms.tournament', 'networkx.algorithms.tree', 'networkx.algorithms.tree.branchings', 'networkx.algorithms.tree.recognition', 'networkx.algorithms.tree.coding', 'networkx.algorithms.tree.mst', 'networkx.algorithms.tree.operations', 'networkx.generators.joint_degree_seq', 'networkx.generators.lattice', 'networkx.generators.line', 'networkx.generators.mycielski', 'networkx.generators.nonisomorphic_trees', 'networkx.generators.random_clustered', 'networkx.generators.random_graphs', 'networkx.generators.small', 'networkx.generators.social', 'networkx.generators.spectral_graph_forge', 'networkx.generators.stochastic', 'networkx.generators.triads', 'networkx.readwrite', 'networkx.readwrite.adjlist', 'networkx.readwrite.multiline_adjlist', 'networkx.readwrite.edgelist', 'networkx.readwrite.gpickle', 'networkx.readwrite.pajek', 'networkx.readwrite.leda', 'networkx.readwrite.sparse6', 'networkx.readwrite.graph6', 'networkx.readwrite.nx_yaml', 'networkx.readwrite.gml', 'networkx.readwrite.graphml', 'xml.etree.cElementTree', 'lxml', 'lxml.etree', 'lxml._elementpath', 'networkx.readwrite.gexf', 'networkx.readwrite.nx_shp', 'networkx.readwrite.json_graph', 'networkx.readwrite.json_graph.node_link', 'networkx.readwrite.json_graph.adjacency', 'networkx.readwrite.json_graph.tree', 'networkx.readwrite.json_graph.jit', 'networkx.readwrite.json_graph.cytoscape', 'networkx.linalg', 'networkx.linalg.attrmatrix', 'networkx.linalg.spectrum', 'networkx.linalg.graphmatrix', 'networkx.linalg.laplacianmatrix', 'networkx.linalg.algebraicconnectivity', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'networkx.linalg.modularitymatrix', 'networkx.tests', 'networkx.tests.test', 'networkx.drawing', 'networkx.drawing.layout', 'networkx.drawing.nx_pylab', 'networkx.drawing.nx_agraph', 'networkx.drawing.nx_pydot', 'dbt.context.providers', 'dbt.adapters.factory', 'dbt.config', 'dbt.config.profile', 'dbt.contracts.project', 'dbt.config.renderer', 'dbt.config.project', 'dbt.legacy_config_updater', 'dbt.config.runtime', 'dbt.context.context_config', 'dbt.contracts.results', 'dbt.task.compile', 'dbt.task.runnable', 'multiprocessing.dummy', 'multiprocessing.dummy.connection', 'dbt.task.base', 'dbt.perf_utils', 'dbt.parser', 'dbt.parser.analysis', 'dbt.parser.base', 'dbt.parser.results', 'dbt.parser.search', 'dbt.parser.data_test', 'dbt.parser.docs', 'dbt.parser.hooks', 'dbt.parser.macros', 'dbt.parser.models', 'dbt.parser.schemas', 'dbt.parser.schema_test_builders', 'dbt.parser.seeds', 'dbt.parser.snapshots', 'dbt.parser.manifest', 'dbt.context.docs', 'dbt.parser.sources', 'dbt.graph', 'dbt.graph.selector', 'dbt.task.debug', 'dbt.task.clean', 'dbt.task.deps', 'dbt.deps', 'dbt.deps.base', 'dbt.deps.resolver', 'dbt.deps.local', 'dbt.deps.git', 'dbt.clients.git', 'dbt.deps.registry', 'dbt.clients.registry', 'dbt.task.init', 'dbt.task.seed', 'dbt.task.test', 'dbt.task.snapshot', 'dbt.task.generate', 'dbt.task.serve', 'webbrowser', 'shlex', 'http.server', 'socketserver', 'dbt.task.freshness', 'dbt.task.run_operation', 'dbt.task.list', 'dbt.task.rpc', 'dbt.task.rpc.server', 'dbt.task.rpc.sql_commands', 'dbt.contracts.rpc', 'dbt.parser.rpc', 'dbt.rpc', 'dbt.rpc.error', 'jsonrpc', 'jsonrpc.manager', 'jsonrpc.utils', 'jsonrpc.six', 'jsonrpc.six.moves', 'jsonrpc.six.moves.urllib_parse', 'jsonrpc.six.moves.urllib.parse', 'jsonrpc.six.moves.urllib_error', 'jsonrpc.six.moves.urllib.error', 'jsonrpc.six.moves.urllib_request', 'jsonrpc.six.moves.urllib.request', 'jsonrpc.six.moves.urllib_response', 'jsonrpc.six.moves.urllib.response', 'jsonrpc.six.moves.urllib_robotparser', 'jsonrpc.six.moves.urllib.robotparser', 'jsonrpc.six.moves.urllib', 'jsonrpc.exceptions', 'jsonrpc.jsonrpc1', 'jsonrpc.base', 'jsonrpc.jsonrpc2', 'jsonrpc.jsonrpc', 'jsonrpc.dispatcher', 'dbt.rpc.node_runners', 'dbt.task.rpc.base', 'dbt.rpc.method', 'dbt.task.rpc.project_commands', 'dbt.task.rpc.cli', 'dbt.task.rpc.deps', 'werkzeug', 'werkzeug.serving', 'werkzeug._compat', 'werkzeug._internal', 'werkzeug.exceptions', 'werkzeug.utils', 'werkzeug.urls', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'werkzeug.middleware', 'werkzeug.middleware.dispatcher', 'dbt.rpc.logger', 'logbook.queues', 'dbt.rpc.response_manager', 'dbt.rpc.task_handler', 'dbt.rpc.task_handler_protocol', 'dbt.rpc.task_manager', 'dbt.rpc.gc', 'dbt.rpc.builtins', 'dbt.profiler', 'cProfile', '_lsprof', 'profile', 'pstats', 'dbt.adapters.bigquery', 'dbt.adapters.bigquery.connections', 'google.auth', 'google.auth._default', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'six.moves.urllib', 'google.cloud.bigquery', 'google.cloud.bigquery.client', 'pyarrow', 'pyarrow._generated_version', 'pyarrow.compat', 'cloudpickle', 'cloudpickle.cloudpickle', 'pyarrow.lib', 'pyarrow.util', 'pyarrow.filesystem', 'six.moves.urllib.parse', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'google.resumable_media', 'google.resumable_media.common', 'google.resumable_media.requests', 'google.resumable_media.requests.download', 'google.resumable_media._download', 'google.resumable_media._helpers', 'google.resumable_media.requests._helpers', 'google.resumable_media.requests.upload', 'google.resumable_media._upload', 'google.api_core', 'google.api_core.client_options', 'google.api_core.exceptions', 'google.api_core.page_iterator', 'google.auth.transport.requests', 'google.auth.transport._mtls_helper', 'google.cloud._helpers', 'google.protobuf', 'google.protobuf.duration_pb2', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'google.protobuf.internal.well_known_types', 'google.protobuf.timestamp_pb2', 'google.cloud.exceptions', 'google.cloud.client', 'google.auth.credentials', 'google.auth._helpers', 'google.oauth2', 'google.oauth2.service_account', 'google.auth._service_account_info', 'google.auth.crypt', 'google.auth.crypt.base', 'google.auth.crypt.rsa', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.es256', 'google.auth.jwt', 'cachetools', 'cachetools.keys', 'cachetools.cache', 'cachetools.abc', 'cachetools.lfu', 'cachetools.lru', 'cachetools.rr', 'cachetools.ttl', 'google.oauth2._client', 'google.cloud.bigquery._helpers', 'google.cloud.bigquery._http', 'google.cloud._http', 'google.api_core.client_info', 'google.cloud.bigquery._pandas_helpers', 'google.cloud.bigquery_storage_v1beta1.types', 'google.api_core.protobuf_helpers', 'google.protobuf.field_mask_pb2', 'google.protobuf.wrappers_pb2', 'google.cloud.bigquery_storage_v1beta1.proto', 'google.cloud.bigquery_storage_v1beta1.proto.arrow_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.avro_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.read_options_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.storage_pb2', 'google.api', 'google.api.annotations_pb2', 'google.api.http_pb2', 'google.protobuf.descriptor_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.table_reference_pb2', 'google.protobuf.empty_pb2', 'google.api.client_pb2', 'google.api_core.gapic_v1.client_info', 'pandas', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'timeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-21 23:33:50.867802 (MainThread): CACHEDIR=/Users/erikm/.matplotlib
2020-05-21 23:33:50.870654 (MainThread): Using fontManager instance from /Users/erikm/.matplotlib/fontlist-v310.json
2020-05-21 23:33:51.124739 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/erikm/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-05-21 23:33:51.129894 (MainThread): Tracking: tracking
2020-05-21 23:33:51.141872 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa24195c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa20a1d610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa2770d090>]}
2020-05-21 23:33:51.167052 (MainThread): Partial parsing not enabled
2020-05-21 23:33:51.169197 (MainThread): Parsing macros/core.sql
2020-05-21 23:33:51.174994 (MainThread): Parsing macros/materializations/helpers.sql
2020-05-21 23:33:51.183434 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-05-21 23:33:51.185438 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-05-21 23:33:51.202279 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-05-21 23:33:51.232503 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-05-21 23:33:51.255255 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-05-21 23:33:51.257258 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-05-21 23:33:51.263792 (MainThread): Parsing macros/materializations/common/merge.sql
2020-05-21 23:33:51.279016 (MainThread): Parsing macros/materializations/table/table.sql
2020-05-21 23:33:51.287717 (MainThread): Parsing macros/materializations/view/view.sql
2020-05-21 23:33:51.294652 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-05-21 23:33:51.299978 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-05-21 23:33:51.301106 (MainThread): Parsing macros/etc/query.sql
2020-05-21 23:33:51.302275 (MainThread): Parsing macros/etc/is_incremental.sql
2020-05-21 23:33:51.304040 (MainThread): Parsing macros/etc/datetime.sql
2020-05-21 23:33:51.314562 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-05-21 23:33:51.317534 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-05-21 23:33:51.319140 (MainThread): Parsing macros/adapters/common.sql
2020-05-21 23:33:51.370251 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-05-21 23:33:51.371705 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-05-21 23:33:51.372835 (MainThread): Parsing macros/schema_tests/unique.sql
2020-05-21 23:33:51.374179 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-05-21 23:33:51.376642 (MainThread): Parsing macros/etc.sql
2020-05-21 23:33:51.377418 (MainThread): Parsing macros/catalog.sql
2020-05-21 23:33:51.383838 (MainThread): Parsing macros/adapters.sql
2020-05-21 23:33:51.400507 (MainThread): Parsing macros/materializations/seed.sql
2020-05-21 23:33:51.402866 (MainThread): Parsing macros/materializations/view.sql
2020-05-21 23:33:51.405020 (MainThread): Parsing macros/materializations/table.sql
2020-05-21 23:33:51.415676 (MainThread): Parsing macros/materializations/incremental.sql
2020-05-21 23:33:51.429189 (MainThread): Parsing macros/materializations/snapshot.sql
2020-05-21 23:33:51.449645 (MainThread): Partial parsing not enabled
2020-05-21 23:33:51.482230 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:33:51.482366 (MainThread): Opening a new connection, currently in state init
2020-05-21 23:33:51.499919 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:33:51.500037 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.511923 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:33:51.512099 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.526629 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:33:51.526794 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.537319 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:33:51.537431 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.547927 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:33:51.548101 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.559301 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:33:51.559435 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.570126 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:33:51.570244 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.581077 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:33:51.581195 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.591555 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:33:51.591679 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:33:51.701290 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa27506cd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa279649d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26cf2b10>]}
2020-05-21 23:33:51.701533 (MainThread): Flushing usage events
2020-05-21 23:33:52.141368 (MainThread): Connection 'model.stripe_source.stg_stripe_balance_transaction' was properly closed.
2020-05-21 23:33:52.141707 (MainThread): Encountered an error:
2020-05-21 23:33:52.141956 (MainThread): Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'
2020-05-21 23:33:52.151501 (MainThread): jsonschema.exceptions.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 598, in _target_from_dict
    return cls.from_dict(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 594, in from_dict
    cls.validate(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 937, in validate
    raise ValidationError.create_from(error) from error
hologram.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 396, in run
    self._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 110, in _runtime_initialize
    super()._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 78, in _runtime_initialize
    self.load_manifest()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 66, in load_manifest
    self.manifest = get_full_manifest(self.config)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/perf_utils.py", line 23, in get_full_manifest
    return load_manifest(config, internal, set_header)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 641, in load_manifest
    return ManifestLoader.load_all(config, internal_manifest, macro_hook)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 356, in load_all
    loader.load(internal_manifest=internal_manifest)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 212, in load
    self.parse_project(project, macro_manifest, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 186, in parse_project
    self.parse_with_cache(path, parser, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 142, in parse_with_cache
    parser.parse_file(block)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 526, in parse_file
    for test_block in parser.parse():
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 615, in parse
    source = self._target_from_dict(UnparsedSourceDefinition, data)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 601, in _target_from_dict
    raise CompilationException(msg) from exc
dbt.exceptions.CompilationException: Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'

2020-05-21 23:48:51.462582 (MainThread): Running with dbt=0.17.0-rc1
2020-05-21 23:48:51.607634 (MainThread): Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
2020-05-21 23:48:51.959266 (MainThread): $HOME=/Users/erikm
2020-05-21 23:48:51.959532 (MainThread): CONFIGDIR=/Users/erikm/.matplotlib
2020-05-21 23:48:51.959698 (MainThread): matplotlib data path: /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-21 23:48:51.964721 (MainThread): loaded rc file /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-21 23:48:51.966700 (MainThread): matplotlib version 3.1.1
2020-05-21 23:48:51.966887 (MainThread): interactive is False
2020-05-21 23:48:51.966941 (MainThread): platform is darwin
2020-05-21 23:48:51.967048 (MainThread): loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'snowflake', 'sphinxcontrib', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'dbt', 'dbt.main', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'dbt.logger', 'dbt.flags', 'multiprocessing', 'multiprocessing.context', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'multiprocessing.process', 'signal', 'multiprocessing.reduction', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'socket', '_socket', 'selectors', 'math', 'select', 'errno', 'array', '__mp_main__', 'dbt.ui', 'dbt.ui.colors', 'colorama', 'colorama.initialise', 'atexit', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'logging', 'weakref', 'string', '_string', 'dataclasses', 'copy', 'inspect', 'dis', 'opcode', '_opcode', 'datetime', '_datetime', 'logbook', 'logbook.base', 'logbook.concurrency', 'gevent', '__future__', 'gevent._config', 'textwrap', 'gevent._compat', 'gevent.libev', 'gevent.libev.corecext', '_cython_0_29_2', 'cython_runtime', 'gevent._hub_local', 'gevent._util', 'gevent.__hub_local', 'greenlet', 'gevent.__greenlet_primitives', 'gc', 'gevent.exceptions', 'gevent._hub_primitives', 'gevent._greenlet_primitives', 'gevent._waiter', 'gevent.__waiter', 'gevent.timeout', 'gevent.__hub_primitives', 'gevent.greenlet', 'gevent._tblib', 'gevent._greenlet', 'gevent.__ident', 'gevent.hub', 'gevent._ident', 'gevent.os', 'fcntl', 'gevent.signal', 'gevent.monkey', 'gevent.thread', 'gevent.lock', 'gevent._semaphore', 'gevent._abstract_linkable', 'gevent.__abstract_linkable', 'gevent.__semaphore', 'gevent.local', 'gevent._local', 'gevent.threading', 'contextvars', '_contextvars', 'logbook.helpers', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'http', 'http.client', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'locale', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'logbook._fallback', 'logbook.handlers', 'gzip', 'zlib', '_compression', 'logbook.compat', 'logbook.__version__', 'hologram', 'uuid', '_uuid', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'six', 'decimal', 'numbers', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'jsonschema', 'jsonschema.exceptions', 'pprint', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'platform', 'subprocess', '_posixsubprocess', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version', 'jsonschema._utils', 'pkgutil', 'jsonschema.compat', 'urllib.request', 'tempfile', 'shutil', 'fnmatch', 'bz2', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'urllib.error', 'urllib.response', '_scproxy', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'unicodedata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._compat', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sysconfig', '_osx_support', '_sysconfigdata_m_darwin_darwin', 'argparse', 'gettext', 'dbt.version', 'glob', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'queue', '_queue', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._errors', 'asn1crypto._types', 'asn1crypto.algos', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._ordereddict', 'asn1crypto.core', 'fractions', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'dbt.exceptions', 'dbt.node_types', 'hologram.helpers', 'dbt.semver', 'dbt.utils', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'typing_extensions', 'dbt.clients', 'dbt.clients.yaml_helper', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', '_yaml', 'dbt.task', 'dbt.task.run', 'dbt.node_runners', 'dbt.deprecations', 'dbt.links', 'dbt.ui.printer', 'dbt.tracking', 'snowplow_tracker', 'snowplow_tracker._version', 'snowplow_tracker.subject', 'snowplow_tracker.emitters', 'snowplow_tracker.self_describing_json', 'snowplow_tracker.tracker', 'snowplow_tracker.payload', 'snowplow_tracker.timestamp', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dbt.adapters', 'dbt.adapters.base', 'dbt.contracts', 'dbt.contracts.connection', 'dbt.contracts.util', 'dbt.clients.system', 'tarfile', 'dbt.adapters.base.meta', 'dbt.adapters.base.connections', 'multiprocessing.synchronize', '_multiprocessing', 'multiprocessing.util', 'agate', 'agate.aggregations', 'agate.aggregations.base', 'agate.exceptions', 'agate.aggregations.all', 'agate.data_types', 'agate.data_types.base', 'agate.data_types.boolean', 'agate.data_types.date', 'isodate', 'isodate.isodates', 'isodate.isostrf', 'isodate.duration', 'isodate.isotzinfo', 'isodate.isoerror', 'isodate.tzinfo', 'isodate.isotime', 'isodate.isodatetime', 'isodate.isoduration', 'parsedatetime', 'parsedatetime.pdt_locales', 'parsedatetime.pdt_locales.icu', 'parsedatetime.context', 'parsedatetime.warns', 'parsedatetime.pdt_locales.de_DE', 'parsedatetime.pdt_locales.base', 'parsedatetime.pdt_locales.en_AU', 'parsedatetime.pdt_locales.en_US', 'parsedatetime.pdt_locales.es', 'parsedatetime.pdt_locales.nl_NL', 'parsedatetime.pdt_locales.pt_BR', 'parsedatetime.pdt_locales.ru_RU', 'parsedatetime.pdt_locales.fr_FR', 'agate.data_types.date_time', 'agate.data_types.number', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'babel.plural', 'agate.data_types.text', 'agate.data_types.time_delta', 'pytimeparse', 'pytimeparse.timeparse', 'agate.aggregations.any', 'agate.aggregations.count', 'agate.utils', 'slugify', 'slugify.special', 'slugify.slugify', 'html', 'html.entities', 'text_unidecode', 'agate.warns', 'agate.aggregations.deciles', 'agate.aggregations.has_nulls', 'agate.aggregations.percentiles', 'agate.aggregations.first', 'agate.aggregations.iqr', 'agate.aggregations.mad', 'agate.aggregations.median', 'agate.aggregations.max_length', 'agate.aggregations.max_precision', 'agate.aggregations.max', 'agate.aggregations.mean', 'agate.aggregations.sum', 'agate.aggregations.min', 'agate.aggregations.mode', 'agate.aggregations.quartiles', 'agate.aggregations.quintiles', 'agate.aggregations.stdev', 'agate.aggregations.variance', 'agate.aggregations.summary', 'agate.columns', 'agate.mapped_sequence', 'agate.computations', 'agate.computations.base', 'agate.computations.formula', 'agate.computations.change', 'agate.computations.percent', 'agate.computations.percent_change', 'agate.computations.rank', 'agate.computations.percentile_rank', 'agate.computations.slug', 'agate.config', 'agate.rows', 'agate.table', 'agate.type_tester', 'agate.table.aggregate', 'agate.table.bar_chart', 'leather', 'leather.axis', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'leather.svg', 'leather.theme', 'leather.data_types', 'leather.chart', 'leather.scales', 'leather.scales.base', 'leather.shapes', 'leather.shapes.base', 'leather.shapes.bars', 'leather.series', 'leather.series.base', 'leather.utils', 'leather.series.category', 'leather.shapes.columns', 'leather.shapes.dots', 'leather.shapes.line', 'leather.scales.linear', 'leather.ticks', 'leather.ticks.base', 'leather.ticks.score', 'leather.ticks.score_time', 'leather.scales.ordinal', 'leather.scales.temporal', 'leather.grid', 'leather.lattice', 'leather.testcase', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'agate.table.bins', 'babel.numbers', 'agate.table.column_chart', 'agate.table.compute', 'agate.table.denormalize', 'agate.table.distinct', 'agate.table.exclude', 'agate.table.find', 'agate.table.from_csv', 'agate.table.from_fixed', 'agate.fixed', 'agate.table.from_json', 'agate.table.from_object', 'agate.table.group_by', 'agate.tableset', 'agate.tableset.aggregate', 'agate.tableset.bar_chart', 'agate.tableset.column_chart', 'agate.tableset.from_csv', 'agate.tableset.from_json', 'agate.tableset.having', 'agate.tableset.line_chart', 'agate.tableset.merge', 'agate.tableset.print_structure', 'agate.tableset.proxy_methods', 'agate.tableset.scatterplot', 'agate.tableset.to_csv', 'agate.tableset.to_json', 'agate.table.homogenize', 'agate.table.join', 'agate.table.limit', 'agate.table.line_chart', 'agate.table.merge', 'agate.table.normalize', 'agate.table.order_by', 'agate.table.pivot', 'agate.table.print_bars', 'agate.table.print_html', 'agate.table.print_structure', 'agate.table.print_table', 'agate.table.rename', 'agate.table.scatterplot', 'agate.table.select', 'agate.table.to_csv', 'agate.table.to_json', 'agate.table.where', 'agate.testcase', 'agate.csv_py3', 'csv', '_csv', 'dbt.contracts.graph', 'dbt.contracts.graph.manifest', 'dbt.contracts.graph.compiled', 'dbt.contracts.graph.parsed', 'pathlib', 'dbt.contracts.graph.unparsed', 'dbt.helper_types', 'dbt.contracts.graph.model_config', 'dbt.hooks', 'sqlparse', 'sqlparse.sql', 'sqlparse.tokens', 'sqlparse.compat', 'sqlparse.utils', 'sqlparse.cli', 'sqlparse.exceptions', 'sqlparse.engine', 'sqlparse.engine.grouping', 'sqlparse.engine.filter_stack', 'sqlparse.lexer', 'sqlparse.keywords', 'sqlparse.engine.statement_splitter', 'sqlparse.filters', 'sqlparse.filters.others', 'sqlparse.filters.output', 'sqlparse.filters.tokens', 'sqlparse.filters.reindent', 'sqlparse.filters.right_margin', 'sqlparse.filters.aligned_indent', 'sqlparse.formatter', 'dbt.include', 'dbt.include.global_project', 'dbt.adapters.base.query_headers', 'dbt.clients.jinja', 'ast', '_ast', 'jinja2', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.bccache', 'jinja2._compat', 'jinja2.utils', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'jinja2.lexer', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'jinja2.ext', 'jinja2.nativetypes', 'jinja2.sandbox', 'dbt.clients._jinja_blocks', 'dbt.context', 'dbt.context.configured', 'dbt.context.base', 'dbt.context.target', 'dbt.adapters.base.relation', 'dbt.adapters.base.column', 'dbt.adapters.base.impl', 'dbt.clients.agate_helper', 'babel.dates', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'dbt.adapters.cache', 'dbt.adapters.base.plugin', 'dbt.compilation', 'dbt.linker', 'networkx', 'networkx.release', 'networkx.exception', 'networkx.utils', 'networkx.utils.misc', 'networkx.utils.decorators', 'decorator', 'networkx.utils.random_sequence', 'networkx.utils.union_find', 'networkx.utils.rcm', 'networkx.utils.heaps', 'networkx.utils.contextmanagers', 'networkx.classes', 'networkx.classes.graph', 'networkx.classes.coreviews', 'networkx.classes.reportviews', 'networkx.convert', 'networkx.classes.digraph', 'networkx.classes.multigraph', 'networkx.classes.multidigraph', 'networkx.classes.ordered', 'networkx.classes.function', 'networkx.classes.filters', 'networkx.classes.graphviews', 'networkx.convert_matrix', 'networkx.relabel', 'networkx.generators', 'networkx.generators.atlas', 'networkx.generators.classic', 'networkx.generators.community', 'networkx.generators.degree_seq', 'networkx.generators.directed', 'networkx.generators.duplication', 'networkx.generators.ego', 'networkx.generators.expanders', 'networkx.generators.geometric', 'scipy', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.pocketfft', 'numpy.fft.pocketfft_internal', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_12', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'mkl_fft._float_utils', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'numpy.random.entropy', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy._lib._util', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'numpy.dual', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'networkx.generators.intersection', 'networkx.algorithms', 'networkx.algorithms.assortativity', 'networkx.algorithms.assortativity.connectivity', 'networkx.algorithms.assortativity.correlation', 'networkx.algorithms.assortativity.mixing', 'networkx.algorithms.assortativity.pairs', 'networkx.algorithms.assortativity.neighbor_degree', 'networkx.algorithms.boundary', 'networkx.algorithms.bridges', 'networkx.algorithms.chains', 'networkx.algorithms.centrality', 'networkx.algorithms.centrality.betweenness', 'networkx.algorithms.centrality.betweenness_subset', 'networkx.algorithms.centrality.closeness', 'networkx.algorithms.centrality.subgraph_alg', 'networkx.algorithms.centrality.current_flow_closeness', 'networkx.algorithms.centrality.flow_matrix', 'networkx.algorithms.centrality.current_flow_betweenness', 'networkx.algorithms.centrality.current_flow_betweenness_subset', 'networkx.algorithms.centrality.degree_alg', 'networkx.algorithms.centrality.dispersion', 'networkx.algorithms.centrality.eigenvector', 'networkx.algorithms.centrality.harmonic', 'networkx.algorithms.centrality.katz', 'networkx.algorithms.centrality.load', 'networkx.algorithms.centrality.reaching', 'networkx.algorithms.centrality.percolation', 'networkx.algorithms.centrality.second_order', 'networkx.algorithms.centrality.voterank_alg', 'networkx.algorithms.chordal', 'networkx.algorithms.cluster', 'networkx.algorithms.clique', 'networkx.algorithms.communicability_alg', 'networkx.algorithms.components', 'networkx.algorithms.components.connected', 'networkx.algorithms.components.strongly_connected', 'networkx.algorithms.components.weakly_connected', 'networkx.algorithms.components.attracting', 'networkx.algorithms.components.biconnected', 'networkx.algorithms.components.semiconnected', 'networkx.algorithms.coloring', 'networkx.algorithms.coloring.greedy_coloring', 'networkx.algorithms.coloring.greedy_coloring_with_interchange', 'networkx.algorithms.coloring.equitable_coloring', 'networkx.algorithms.core', 'networkx.algorithms.covering', 'networkx.algorithms.cycles', 'networkx.algorithms.cuts', 'networkx.algorithms.dag', 'networkx.generators.trees', 'networkx.algorithms.distance_measures', 'networkx.algorithms.distance_regular', 'networkx.algorithms.dominance', 'networkx.algorithms.dominating', 'networkx.algorithms.efficiency', 'networkx.algorithms.euler', 'networkx.algorithms.graphical', 'networkx.algorithms.hierarchy', 'networkx.algorithms.hybrid', 'networkx.algorithms.link_analysis', 'networkx.algorithms.link_analysis.pagerank_alg', 'networkx.algorithms.link_analysis.hits_alg', 'networkx.algorithms.link_prediction', 'networkx.algorithms.lowest_common_ancestors', 'networkx.algorithms.isolate', 'networkx.algorithms.matching', 'networkx.algorithms.minors', 'networkx.algorithms.mis', 'networkx.algorithms.operators', 'networkx.algorithms.operators.all', 'networkx.algorithms.operators.binary', 'networkx.algorithms.operators.product', 'networkx.algorithms.operators.unary', 'networkx.algorithms.planarity', 'networkx.algorithms.planar_drawing', 'networkx.algorithms.reciprocity', 'networkx.algorithms.richclub', 'networkx.algorithms.shortest_paths', 'networkx.algorithms.shortest_paths.generic', 'networkx.algorithms.shortest_paths.unweighted', 'networkx.algorithms.shortest_paths.weighted', 'networkx.algorithms.shortest_paths.astar', 'networkx.algorithms.shortest_paths.dense', 'networkx.algorithms.similarity', 'networkx.algorithms.simple_paths', 'networkx.algorithms.smallworld', 'networkx.algorithms.smetric', 'networkx.algorithms.structuralholes', 'networkx.algorithms.sparsifiers', 'networkx.algorithms.swap', 'networkx.algorithms.traversal', 'networkx.algorithms.traversal.beamsearch', 'networkx.algorithms.traversal.breadth_first_search', 'networkx.algorithms.traversal.depth_first_search', 'networkx.algorithms.traversal.edgedfs', 'networkx.algorithms.traversal.edgebfs', 'networkx.algorithms.triads', 'networkx.algorithms.vitality', 'networkx.algorithms.voronoi', 'networkx.algorithms.wiener', 'networkx.algorithms.bipartite', 'networkx.algorithms.bipartite.basic', 'networkx.algorithms.bipartite.centrality', 'networkx.algorithms.bipartite.cluster', 'networkx.algorithms.bipartite.covering', 'networkx.algorithms.bipartite.matching', 'networkx.algorithms.bipartite.edgelist', 'networkx.algorithms.bipartite.matrix', 'networkx.algorithms.bipartite.projection', 'networkx.algorithms.bipartite.redundancy', 'networkx.algorithms.bipartite.spectral', 'networkx.algorithms.bipartite.generators', 'networkx.algorithms.node_classification', 'networkx.algorithms.node_classification.hmn', 'networkx.algorithms.node_classification.utils', 'networkx.algorithms.node_classification.lgc', 'networkx.algorithms.connectivity', 'networkx.algorithms.connectivity.connectivity', 'networkx.algorithms.flow', 'networkx.algorithms.flow.maxflow', 'networkx.algorithms.flow.boykovkolmogorov', 'networkx.algorithms.flow.utils', 'networkx.algorithms.flow.dinitz_alg', 'networkx.algorithms.flow.edmondskarp', 'networkx.algorithms.flow.preflowpush', 'networkx.algorithms.flow.shortestaugmentingpath', 'networkx.algorithms.flow.mincost', 'networkx.algorithms.flow.gomory_hu', 'networkx.algorithms.flow.capacityscaling', 'networkx.algorithms.flow.networksimplex', 'networkx.algorithms.connectivity.utils', 'networkx.algorithms.connectivity.cuts', 'networkx.algorithms.connectivity.edge_augmentation', 'networkx.algorithms.connectivity.edge_kcomponents', 'networkx.algorithms.connectivity.disjoint_paths', 'networkx.algorithms.connectivity.kcomponents', 'networkx.algorithms.connectivity.kcutsets', 'networkx.algorithms.connectivity.stoerwagner', 'networkx.algorithms.community', 'networkx.algorithms.community.asyn_fluid', 'networkx.algorithms.community.centrality', 'networkx.algorithms.community.community_generators', 'networkx.algorithms.community.kclique', 'networkx.algorithms.community.kernighan_lin', 'networkx.algorithms.community.community_utils', 'networkx.algorithms.community.label_propagation', 'networkx.algorithms.community.modularity_max', 'networkx.algorithms.community.quality', 'networkx.utils.mapped_queue', 'networkx.algorithms.isomorphism', 'networkx.algorithms.isomorphism.isomorph', 'networkx.algorithms.isomorphism.vf2userfunc', 'networkx.algorithms.isomorphism.isomorphvf2', 'networkx.algorithms.isomorphism.matchhelpers', 'networkx.algorithms.isomorphism.temporalisomorphvf2', 'networkx.algorithms.tournament', 'networkx.algorithms.tree', 'networkx.algorithms.tree.branchings', 'networkx.algorithms.tree.recognition', 'networkx.algorithms.tree.coding', 'networkx.algorithms.tree.mst', 'networkx.algorithms.tree.operations', 'networkx.generators.joint_degree_seq', 'networkx.generators.lattice', 'networkx.generators.line', 'networkx.generators.mycielski', 'networkx.generators.nonisomorphic_trees', 'networkx.generators.random_clustered', 'networkx.generators.random_graphs', 'networkx.generators.small', 'networkx.generators.social', 'networkx.generators.spectral_graph_forge', 'networkx.generators.stochastic', 'networkx.generators.triads', 'networkx.readwrite', 'networkx.readwrite.adjlist', 'networkx.readwrite.multiline_adjlist', 'networkx.readwrite.edgelist', 'networkx.readwrite.gpickle', 'networkx.readwrite.pajek', 'networkx.readwrite.leda', 'networkx.readwrite.sparse6', 'networkx.readwrite.graph6', 'networkx.readwrite.nx_yaml', 'networkx.readwrite.gml', 'networkx.readwrite.graphml', 'xml.etree.cElementTree', 'lxml', 'lxml.etree', 'lxml._elementpath', 'networkx.readwrite.gexf', 'networkx.readwrite.nx_shp', 'networkx.readwrite.json_graph', 'networkx.readwrite.json_graph.node_link', 'networkx.readwrite.json_graph.adjacency', 'networkx.readwrite.json_graph.tree', 'networkx.readwrite.json_graph.jit', 'networkx.readwrite.json_graph.cytoscape', 'networkx.linalg', 'networkx.linalg.attrmatrix', 'networkx.linalg.spectrum', 'networkx.linalg.graphmatrix', 'networkx.linalg.laplacianmatrix', 'networkx.linalg.algebraicconnectivity', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'networkx.linalg.modularitymatrix', 'networkx.tests', 'networkx.tests.test', 'networkx.drawing', 'networkx.drawing.layout', 'networkx.drawing.nx_pylab', 'networkx.drawing.nx_agraph', 'networkx.drawing.nx_pydot', 'dbt.context.providers', 'dbt.adapters.factory', 'dbt.config', 'dbt.config.profile', 'dbt.contracts.project', 'dbt.config.renderer', 'dbt.config.project', 'dbt.legacy_config_updater', 'dbt.config.runtime', 'dbt.context.context_config', 'dbt.contracts.results', 'dbt.task.compile', 'dbt.task.runnable', 'multiprocessing.dummy', 'multiprocessing.dummy.connection', 'dbt.task.base', 'dbt.perf_utils', 'dbt.parser', 'dbt.parser.analysis', 'dbt.parser.base', 'dbt.parser.results', 'dbt.parser.search', 'dbt.parser.data_test', 'dbt.parser.docs', 'dbt.parser.hooks', 'dbt.parser.macros', 'dbt.parser.models', 'dbt.parser.schemas', 'dbt.parser.schema_test_builders', 'dbt.parser.seeds', 'dbt.parser.snapshots', 'dbt.parser.manifest', 'dbt.context.docs', 'dbt.parser.sources', 'dbt.graph', 'dbt.graph.selector', 'dbt.task.debug', 'dbt.task.clean', 'dbt.task.deps', 'dbt.deps', 'dbt.deps.base', 'dbt.deps.resolver', 'dbt.deps.local', 'dbt.deps.git', 'dbt.clients.git', 'dbt.deps.registry', 'dbt.clients.registry', 'dbt.task.init', 'dbt.task.seed', 'dbt.task.test', 'dbt.task.snapshot', 'dbt.task.generate', 'dbt.task.serve', 'webbrowser', 'shlex', 'http.server', 'socketserver', 'dbt.task.freshness', 'dbt.task.run_operation', 'dbt.task.list', 'dbt.task.rpc', 'dbt.task.rpc.server', 'dbt.task.rpc.sql_commands', 'dbt.contracts.rpc', 'dbt.parser.rpc', 'dbt.rpc', 'dbt.rpc.error', 'jsonrpc', 'jsonrpc.manager', 'jsonrpc.utils', 'jsonrpc.six', 'jsonrpc.six.moves', 'jsonrpc.six.moves.urllib_parse', 'jsonrpc.six.moves.urllib.parse', 'jsonrpc.six.moves.urllib_error', 'jsonrpc.six.moves.urllib.error', 'jsonrpc.six.moves.urllib_request', 'jsonrpc.six.moves.urllib.request', 'jsonrpc.six.moves.urllib_response', 'jsonrpc.six.moves.urllib.response', 'jsonrpc.six.moves.urllib_robotparser', 'jsonrpc.six.moves.urllib.robotparser', 'jsonrpc.six.moves.urllib', 'jsonrpc.exceptions', 'jsonrpc.jsonrpc1', 'jsonrpc.base', 'jsonrpc.jsonrpc2', 'jsonrpc.jsonrpc', 'jsonrpc.dispatcher', 'dbt.rpc.node_runners', 'dbt.task.rpc.base', 'dbt.rpc.method', 'dbt.task.rpc.project_commands', 'dbt.task.rpc.cli', 'dbt.task.rpc.deps', 'werkzeug', 'werkzeug.serving', 'werkzeug._compat', 'werkzeug._internal', 'werkzeug.exceptions', 'werkzeug.utils', 'werkzeug.urls', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'werkzeug.middleware', 'werkzeug.middleware.dispatcher', 'dbt.rpc.logger', 'logbook.queues', 'dbt.rpc.response_manager', 'dbt.rpc.task_handler', 'dbt.rpc.task_handler_protocol', 'dbt.rpc.task_manager', 'dbt.rpc.gc', 'dbt.rpc.builtins', 'dbt.profiler', 'cProfile', '_lsprof', 'profile', 'pstats', 'dbt.adapters.bigquery', 'dbt.adapters.bigquery.connections', 'google.auth', 'google.auth._default', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'six.moves.urllib', 'google.cloud.bigquery', 'google.cloud.bigquery.client', 'pyarrow', 'pyarrow._generated_version', 'pyarrow.compat', 'cloudpickle', 'cloudpickle.cloudpickle', 'pyarrow.lib', 'pyarrow.util', 'pyarrow.filesystem', 'six.moves.urllib.parse', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'google.resumable_media', 'google.resumable_media.common', 'google.resumable_media.requests', 'google.resumable_media.requests.download', 'google.resumable_media._download', 'google.resumable_media._helpers', 'google.resumable_media.requests._helpers', 'google.resumable_media.requests.upload', 'google.resumable_media._upload', 'google.api_core', 'google.api_core.client_options', 'google.api_core.exceptions', 'google.api_core.page_iterator', 'google.auth.transport.requests', 'google.auth.transport._mtls_helper', 'google.cloud._helpers', 'google.protobuf', 'google.protobuf.duration_pb2', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'google.protobuf.internal.well_known_types', 'google.protobuf.timestamp_pb2', 'google.cloud.exceptions', 'google.cloud.client', 'google.auth.credentials', 'google.auth._helpers', 'google.oauth2', 'google.oauth2.service_account', 'google.auth._service_account_info', 'google.auth.crypt', 'google.auth.crypt.base', 'google.auth.crypt.rsa', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.es256', 'google.auth.jwt', 'cachetools', 'cachetools.keys', 'cachetools.cache', 'cachetools.abc', 'cachetools.lfu', 'cachetools.lru', 'cachetools.rr', 'cachetools.ttl', 'google.oauth2._client', 'google.cloud.bigquery._helpers', 'google.cloud.bigquery._http', 'google.cloud._http', 'google.api_core.client_info', 'google.cloud.bigquery._pandas_helpers', 'google.cloud.bigquery_storage_v1beta1.types', 'google.api_core.protobuf_helpers', 'google.protobuf.field_mask_pb2', 'google.protobuf.wrappers_pb2', 'google.cloud.bigquery_storage_v1beta1.proto', 'google.cloud.bigquery_storage_v1beta1.proto.arrow_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.avro_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.read_options_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.storage_pb2', 'google.api', 'google.api.annotations_pb2', 'google.api.http_pb2', 'google.protobuf.descriptor_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.table_reference_pb2', 'google.protobuf.empty_pb2', 'google.api.client_pb2', 'google.api_core.gapic_v1.client_info', 'pandas', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'timeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-21 23:48:52.056074 (MainThread): CACHEDIR=/Users/erikm/.matplotlib
2020-05-21 23:48:52.058940 (MainThread): Using fontManager instance from /Users/erikm/.matplotlib/fontlist-v310.json
2020-05-21 23:48:52.314554 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/erikm/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-05-21 23:48:52.319668 (MainThread): Tracking: tracking
2020-05-21 23:48:52.334345 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa18429990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa19942f90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1a1b1890>]}
2020-05-21 23:48:52.358120 (MainThread): Partial parsing not enabled
2020-05-21 23:48:52.361220 (MainThread): Parsing macros/core.sql
2020-05-21 23:48:52.368225 (MainThread): Parsing macros/materializations/helpers.sql
2020-05-21 23:48:52.376917 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-05-21 23:48:52.379161 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-05-21 23:48:52.396286 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-05-21 23:48:52.426730 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-05-21 23:48:52.448044 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-05-21 23:48:52.450520 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-05-21 23:48:52.456879 (MainThread): Parsing macros/materializations/common/merge.sql
2020-05-21 23:48:52.471145 (MainThread): Parsing macros/materializations/table/table.sql
2020-05-21 23:48:52.478073 (MainThread): Parsing macros/materializations/view/view.sql
2020-05-21 23:48:52.484430 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-05-21 23:48:52.489513 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-05-21 23:48:52.490674 (MainThread): Parsing macros/etc/query.sql
2020-05-21 23:48:52.492364 (MainThread): Parsing macros/etc/is_incremental.sql
2020-05-21 23:48:52.494192 (MainThread): Parsing macros/etc/datetime.sql
2020-05-21 23:48:52.503478 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-05-21 23:48:52.505643 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-05-21 23:48:52.506878 (MainThread): Parsing macros/adapters/common.sql
2020-05-21 23:48:52.557736 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-05-21 23:48:52.559276 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-05-21 23:48:52.560567 (MainThread): Parsing macros/schema_tests/unique.sql
2020-05-21 23:48:52.562165 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-05-21 23:48:52.565069 (MainThread): Parsing macros/etc.sql
2020-05-21 23:48:52.566938 (MainThread): Parsing macros/catalog.sql
2020-05-21 23:48:52.573647 (MainThread): Parsing macros/adapters.sql
2020-05-21 23:48:52.590230 (MainThread): Parsing macros/materializations/seed.sql
2020-05-21 23:48:52.592403 (MainThread): Parsing macros/materializations/view.sql
2020-05-21 23:48:52.595376 (MainThread): Parsing macros/materializations/table.sql
2020-05-21 23:48:52.605645 (MainThread): Parsing macros/materializations/incremental.sql
2020-05-21 23:48:52.618834 (MainThread): Parsing macros/materializations/snapshot.sql
2020-05-21 23:48:52.644925 (MainThread): Partial parsing not enabled
2020-05-21 23:48:52.678940 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:48:52.679075 (MainThread): Opening a new connection, currently in state init
2020-05-21 23:48:52.698282 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:48:52.698411 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.710398 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:48:52.710526 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.720768 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:48:52.720890 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.731640 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:48:52.731761 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.743253 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:48:52.743401 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.754497 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:48:52.754624 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.764536 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:48:52.764643 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.775187 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:48:52.775300 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.787131 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:48:52.787302 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:48:52.902316 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1aaae810>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1a1b1390>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1ac84a10>]}
2020-05-21 23:48:52.902542 (MainThread): Flushing usage events
2020-05-21 23:48:53.386538 (MainThread): Connection 'model.stripe_source.stg_stripe_balance_transaction' was properly closed.
2020-05-21 23:48:53.386864 (MainThread): Encountered an error:
2020-05-21 23:48:53.387127 (MainThread): Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'database': 'dbt-package-testing', 'schema': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'
2020-05-21 23:48:53.397592 (MainThread): jsonschema.exceptions.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 598, in _target_from_dict
    return cls.from_dict(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 594, in from_dict
    cls.validate(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 937, in validate
    raise ValidationError.create_from(error) from error
hologram.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 396, in run
    self._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 110, in _runtime_initialize
    super()._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 78, in _runtime_initialize
    self.load_manifest()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 66, in load_manifest
    self.manifest = get_full_manifest(self.config)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/perf_utils.py", line 23, in get_full_manifest
    return load_manifest(config, internal, set_header)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 641, in load_manifest
    return ManifestLoader.load_all(config, internal_manifest, macro_hook)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 356, in load_all
    loader.load(internal_manifest=internal_manifest)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 212, in load
    self.parse_project(project, macro_manifest, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 186, in parse_project
    self.parse_with_cache(path, parser, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 142, in parse_with_cache
    parser.parse_file(block)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 526, in parse_file
    for test_block in parser.parse():
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 615, in parse
    source = self._target_from_dict(UnparsedSourceDefinition, data)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 601, in _target_from_dict
    raise CompilationException(msg) from exc
dbt.exceptions.CompilationException: Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'database': 'dbt-package-testing', 'schema': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'

2020-05-21 23:50:00.644336 (MainThread): Running with dbt=0.17.0-rc1
2020-05-21 23:50:00.732478 (MainThread): Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
2020-05-21 23:50:00.920501 (MainThread): $HOME=/Users/erikm
2020-05-21 23:50:00.920748 (MainThread): CONFIGDIR=/Users/erikm/.matplotlib
2020-05-21 23:50:00.920890 (MainThread): matplotlib data path: /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-21 23:50:00.923339 (MainThread): loaded rc file /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-21 23:50:00.924670 (MainThread): matplotlib version 3.1.1
2020-05-21 23:50:00.924806 (MainThread): interactive is False
2020-05-21 23:50:00.924850 (MainThread): platform is darwin
2020-05-21 23:50:00.924968 (MainThread): loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'snowflake', 'sphinxcontrib', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'dbt', 'dbt.main', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'dbt.logger', 'dbt.flags', 'multiprocessing', 'multiprocessing.context', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'multiprocessing.process', 'signal', 'multiprocessing.reduction', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'socket', '_socket', 'selectors', 'math', 'select', 'errno', 'array', '__mp_main__', 'dbt.ui', 'dbt.ui.colors', 'colorama', 'colorama.initialise', 'atexit', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'logging', 'weakref', 'string', '_string', 'dataclasses', 'copy', 'inspect', 'dis', 'opcode', '_opcode', 'datetime', '_datetime', 'logbook', 'logbook.base', 'logbook.concurrency', 'gevent', '__future__', 'gevent._config', 'textwrap', 'gevent._compat', 'gevent.libev', 'gevent.libev.corecext', '_cython_0_29_2', 'cython_runtime', 'gevent._hub_local', 'gevent._util', 'gevent.__hub_local', 'greenlet', 'gevent.__greenlet_primitives', 'gc', 'gevent.exceptions', 'gevent._hub_primitives', 'gevent._greenlet_primitives', 'gevent._waiter', 'gevent.__waiter', 'gevent.timeout', 'gevent.__hub_primitives', 'gevent.greenlet', 'gevent._tblib', 'gevent._greenlet', 'gevent.__ident', 'gevent.hub', 'gevent._ident', 'gevent.os', 'fcntl', 'gevent.signal', 'gevent.monkey', 'gevent.thread', 'gevent.lock', 'gevent._semaphore', 'gevent._abstract_linkable', 'gevent.__abstract_linkable', 'gevent.__semaphore', 'gevent.local', 'gevent._local', 'gevent.threading', 'contextvars', '_contextvars', 'logbook.helpers', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'http', 'http.client', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'locale', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'logbook._fallback', 'logbook.handlers', 'gzip', 'zlib', '_compression', 'logbook.compat', 'logbook.__version__', 'hologram', 'uuid', '_uuid', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'six', 'decimal', 'numbers', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'jsonschema', 'jsonschema.exceptions', 'pprint', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'platform', 'subprocess', '_posixsubprocess', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version', 'jsonschema._utils', 'pkgutil', 'jsonschema.compat', 'urllib.request', 'tempfile', 'shutil', 'fnmatch', 'bz2', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'urllib.error', 'urllib.response', '_scproxy', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'unicodedata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._compat', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sysconfig', '_osx_support', '_sysconfigdata_m_darwin_darwin', 'argparse', 'gettext', 'dbt.version', 'glob', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'queue', '_queue', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._errors', 'asn1crypto._types', 'asn1crypto.algos', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._ordereddict', 'asn1crypto.core', 'fractions', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'dbt.exceptions', 'dbt.node_types', 'hologram.helpers', 'dbt.semver', 'dbt.utils', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'typing_extensions', 'dbt.clients', 'dbt.clients.yaml_helper', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', '_yaml', 'dbt.task', 'dbt.task.run', 'dbt.node_runners', 'dbt.deprecations', 'dbt.links', 'dbt.ui.printer', 'dbt.tracking', 'snowplow_tracker', 'snowplow_tracker._version', 'snowplow_tracker.subject', 'snowplow_tracker.emitters', 'snowplow_tracker.self_describing_json', 'snowplow_tracker.tracker', 'snowplow_tracker.payload', 'snowplow_tracker.timestamp', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dbt.adapters', 'dbt.adapters.base', 'dbt.contracts', 'dbt.contracts.connection', 'dbt.contracts.util', 'dbt.clients.system', 'tarfile', 'dbt.adapters.base.meta', 'dbt.adapters.base.connections', 'multiprocessing.synchronize', '_multiprocessing', 'multiprocessing.util', 'agate', 'agate.aggregations', 'agate.aggregations.base', 'agate.exceptions', 'agate.aggregations.all', 'agate.data_types', 'agate.data_types.base', 'agate.data_types.boolean', 'agate.data_types.date', 'isodate', 'isodate.isodates', 'isodate.isostrf', 'isodate.duration', 'isodate.isotzinfo', 'isodate.isoerror', 'isodate.tzinfo', 'isodate.isotime', 'isodate.isodatetime', 'isodate.isoduration', 'parsedatetime', 'parsedatetime.pdt_locales', 'parsedatetime.pdt_locales.icu', 'parsedatetime.context', 'parsedatetime.warns', 'parsedatetime.pdt_locales.de_DE', 'parsedatetime.pdt_locales.base', 'parsedatetime.pdt_locales.en_AU', 'parsedatetime.pdt_locales.en_US', 'parsedatetime.pdt_locales.es', 'parsedatetime.pdt_locales.nl_NL', 'parsedatetime.pdt_locales.pt_BR', 'parsedatetime.pdt_locales.ru_RU', 'parsedatetime.pdt_locales.fr_FR', 'agate.data_types.date_time', 'agate.data_types.number', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'babel.plural', 'agate.data_types.text', 'agate.data_types.time_delta', 'pytimeparse', 'pytimeparse.timeparse', 'agate.aggregations.any', 'agate.aggregations.count', 'agate.utils', 'slugify', 'slugify.special', 'slugify.slugify', 'html', 'html.entities', 'text_unidecode', 'agate.warns', 'agate.aggregations.deciles', 'agate.aggregations.has_nulls', 'agate.aggregations.percentiles', 'agate.aggregations.first', 'agate.aggregations.iqr', 'agate.aggregations.mad', 'agate.aggregations.median', 'agate.aggregations.max_length', 'agate.aggregations.max_precision', 'agate.aggregations.max', 'agate.aggregations.mean', 'agate.aggregations.sum', 'agate.aggregations.min', 'agate.aggregations.mode', 'agate.aggregations.quartiles', 'agate.aggregations.quintiles', 'agate.aggregations.stdev', 'agate.aggregations.variance', 'agate.aggregations.summary', 'agate.columns', 'agate.mapped_sequence', 'agate.computations', 'agate.computations.base', 'agate.computations.formula', 'agate.computations.change', 'agate.computations.percent', 'agate.computations.percent_change', 'agate.computations.rank', 'agate.computations.percentile_rank', 'agate.computations.slug', 'agate.config', 'agate.rows', 'agate.table', 'agate.type_tester', 'agate.table.aggregate', 'agate.table.bar_chart', 'leather', 'leather.axis', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'leather.svg', 'leather.theme', 'leather.data_types', 'leather.chart', 'leather.scales', 'leather.scales.base', 'leather.shapes', 'leather.shapes.base', 'leather.shapes.bars', 'leather.series', 'leather.series.base', 'leather.utils', 'leather.series.category', 'leather.shapes.columns', 'leather.shapes.dots', 'leather.shapes.line', 'leather.scales.linear', 'leather.ticks', 'leather.ticks.base', 'leather.ticks.score', 'leather.ticks.score_time', 'leather.scales.ordinal', 'leather.scales.temporal', 'leather.grid', 'leather.lattice', 'leather.testcase', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'agate.table.bins', 'babel.numbers', 'agate.table.column_chart', 'agate.table.compute', 'agate.table.denormalize', 'agate.table.distinct', 'agate.table.exclude', 'agate.table.find', 'agate.table.from_csv', 'agate.table.from_fixed', 'agate.fixed', 'agate.table.from_json', 'agate.table.from_object', 'agate.table.group_by', 'agate.tableset', 'agate.tableset.aggregate', 'agate.tableset.bar_chart', 'agate.tableset.column_chart', 'agate.tableset.from_csv', 'agate.tableset.from_json', 'agate.tableset.having', 'agate.tableset.line_chart', 'agate.tableset.merge', 'agate.tableset.print_structure', 'agate.tableset.proxy_methods', 'agate.tableset.scatterplot', 'agate.tableset.to_csv', 'agate.tableset.to_json', 'agate.table.homogenize', 'agate.table.join', 'agate.table.limit', 'agate.table.line_chart', 'agate.table.merge', 'agate.table.normalize', 'agate.table.order_by', 'agate.table.pivot', 'agate.table.print_bars', 'agate.table.print_html', 'agate.table.print_structure', 'agate.table.print_table', 'agate.table.rename', 'agate.table.scatterplot', 'agate.table.select', 'agate.table.to_csv', 'agate.table.to_json', 'agate.table.where', 'agate.testcase', 'agate.csv_py3', 'csv', '_csv', 'dbt.contracts.graph', 'dbt.contracts.graph.manifest', 'dbt.contracts.graph.compiled', 'dbt.contracts.graph.parsed', 'pathlib', 'dbt.contracts.graph.unparsed', 'dbt.helper_types', 'dbt.contracts.graph.model_config', 'dbt.hooks', 'sqlparse', 'sqlparse.sql', 'sqlparse.tokens', 'sqlparse.compat', 'sqlparse.utils', 'sqlparse.cli', 'sqlparse.exceptions', 'sqlparse.engine', 'sqlparse.engine.grouping', 'sqlparse.engine.filter_stack', 'sqlparse.lexer', 'sqlparse.keywords', 'sqlparse.engine.statement_splitter', 'sqlparse.filters', 'sqlparse.filters.others', 'sqlparse.filters.output', 'sqlparse.filters.tokens', 'sqlparse.filters.reindent', 'sqlparse.filters.right_margin', 'sqlparse.filters.aligned_indent', 'sqlparse.formatter', 'dbt.include', 'dbt.include.global_project', 'dbt.adapters.base.query_headers', 'dbt.clients.jinja', 'ast', '_ast', 'jinja2', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.bccache', 'jinja2._compat', 'jinja2.utils', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'jinja2.lexer', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'jinja2.ext', 'jinja2.nativetypes', 'jinja2.sandbox', 'dbt.clients._jinja_blocks', 'dbt.context', 'dbt.context.configured', 'dbt.context.base', 'dbt.context.target', 'dbt.adapters.base.relation', 'dbt.adapters.base.column', 'dbt.adapters.base.impl', 'dbt.clients.agate_helper', 'babel.dates', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'dbt.adapters.cache', 'dbt.adapters.base.plugin', 'dbt.compilation', 'dbt.linker', 'networkx', 'networkx.release', 'networkx.exception', 'networkx.utils', 'networkx.utils.misc', 'networkx.utils.decorators', 'decorator', 'networkx.utils.random_sequence', 'networkx.utils.union_find', 'networkx.utils.rcm', 'networkx.utils.heaps', 'networkx.utils.contextmanagers', 'networkx.classes', 'networkx.classes.graph', 'networkx.classes.coreviews', 'networkx.classes.reportviews', 'networkx.convert', 'networkx.classes.digraph', 'networkx.classes.multigraph', 'networkx.classes.multidigraph', 'networkx.classes.ordered', 'networkx.classes.function', 'networkx.classes.filters', 'networkx.classes.graphviews', 'networkx.convert_matrix', 'networkx.relabel', 'networkx.generators', 'networkx.generators.atlas', 'networkx.generators.classic', 'networkx.generators.community', 'networkx.generators.degree_seq', 'networkx.generators.directed', 'networkx.generators.duplication', 'networkx.generators.ego', 'networkx.generators.expanders', 'networkx.generators.geometric', 'scipy', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.pocketfft', 'numpy.fft.pocketfft_internal', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_12', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'mkl_fft._float_utils', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'numpy.random.entropy', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy._lib._util', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'numpy.dual', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'networkx.generators.intersection', 'networkx.algorithms', 'networkx.algorithms.assortativity', 'networkx.algorithms.assortativity.connectivity', 'networkx.algorithms.assortativity.correlation', 'networkx.algorithms.assortativity.mixing', 'networkx.algorithms.assortativity.pairs', 'networkx.algorithms.assortativity.neighbor_degree', 'networkx.algorithms.boundary', 'networkx.algorithms.bridges', 'networkx.algorithms.chains', 'networkx.algorithms.centrality', 'networkx.algorithms.centrality.betweenness', 'networkx.algorithms.centrality.betweenness_subset', 'networkx.algorithms.centrality.closeness', 'networkx.algorithms.centrality.subgraph_alg', 'networkx.algorithms.centrality.current_flow_closeness', 'networkx.algorithms.centrality.flow_matrix', 'networkx.algorithms.centrality.current_flow_betweenness', 'networkx.algorithms.centrality.current_flow_betweenness_subset', 'networkx.algorithms.centrality.degree_alg', 'networkx.algorithms.centrality.dispersion', 'networkx.algorithms.centrality.eigenvector', 'networkx.algorithms.centrality.harmonic', 'networkx.algorithms.centrality.katz', 'networkx.algorithms.centrality.load', 'networkx.algorithms.centrality.reaching', 'networkx.algorithms.centrality.percolation', 'networkx.algorithms.centrality.second_order', 'networkx.algorithms.centrality.voterank_alg', 'networkx.algorithms.chordal', 'networkx.algorithms.cluster', 'networkx.algorithms.clique', 'networkx.algorithms.communicability_alg', 'networkx.algorithms.components', 'networkx.algorithms.components.connected', 'networkx.algorithms.components.strongly_connected', 'networkx.algorithms.components.weakly_connected', 'networkx.algorithms.components.attracting', 'networkx.algorithms.components.biconnected', 'networkx.algorithms.components.semiconnected', 'networkx.algorithms.coloring', 'networkx.algorithms.coloring.greedy_coloring', 'networkx.algorithms.coloring.greedy_coloring_with_interchange', 'networkx.algorithms.coloring.equitable_coloring', 'networkx.algorithms.core', 'networkx.algorithms.covering', 'networkx.algorithms.cycles', 'networkx.algorithms.cuts', 'networkx.algorithms.dag', 'networkx.generators.trees', 'networkx.algorithms.distance_measures', 'networkx.algorithms.distance_regular', 'networkx.algorithms.dominance', 'networkx.algorithms.dominating', 'networkx.algorithms.efficiency', 'networkx.algorithms.euler', 'networkx.algorithms.graphical', 'networkx.algorithms.hierarchy', 'networkx.algorithms.hybrid', 'networkx.algorithms.link_analysis', 'networkx.algorithms.link_analysis.pagerank_alg', 'networkx.algorithms.link_analysis.hits_alg', 'networkx.algorithms.link_prediction', 'networkx.algorithms.lowest_common_ancestors', 'networkx.algorithms.isolate', 'networkx.algorithms.matching', 'networkx.algorithms.minors', 'networkx.algorithms.mis', 'networkx.algorithms.operators', 'networkx.algorithms.operators.all', 'networkx.algorithms.operators.binary', 'networkx.algorithms.operators.product', 'networkx.algorithms.operators.unary', 'networkx.algorithms.planarity', 'networkx.algorithms.planar_drawing', 'networkx.algorithms.reciprocity', 'networkx.algorithms.richclub', 'networkx.algorithms.shortest_paths', 'networkx.algorithms.shortest_paths.generic', 'networkx.algorithms.shortest_paths.unweighted', 'networkx.algorithms.shortest_paths.weighted', 'networkx.algorithms.shortest_paths.astar', 'networkx.algorithms.shortest_paths.dense', 'networkx.algorithms.similarity', 'networkx.algorithms.simple_paths', 'networkx.algorithms.smallworld', 'networkx.algorithms.smetric', 'networkx.algorithms.structuralholes', 'networkx.algorithms.sparsifiers', 'networkx.algorithms.swap', 'networkx.algorithms.traversal', 'networkx.algorithms.traversal.beamsearch', 'networkx.algorithms.traversal.breadth_first_search', 'networkx.algorithms.traversal.depth_first_search', 'networkx.algorithms.traversal.edgedfs', 'networkx.algorithms.traversal.edgebfs', 'networkx.algorithms.triads', 'networkx.algorithms.vitality', 'networkx.algorithms.voronoi', 'networkx.algorithms.wiener', 'networkx.algorithms.bipartite', 'networkx.algorithms.bipartite.basic', 'networkx.algorithms.bipartite.centrality', 'networkx.algorithms.bipartite.cluster', 'networkx.algorithms.bipartite.covering', 'networkx.algorithms.bipartite.matching', 'networkx.algorithms.bipartite.edgelist', 'networkx.algorithms.bipartite.matrix', 'networkx.algorithms.bipartite.projection', 'networkx.algorithms.bipartite.redundancy', 'networkx.algorithms.bipartite.spectral', 'networkx.algorithms.bipartite.generators', 'networkx.algorithms.node_classification', 'networkx.algorithms.node_classification.hmn', 'networkx.algorithms.node_classification.utils', 'networkx.algorithms.node_classification.lgc', 'networkx.algorithms.connectivity', 'networkx.algorithms.connectivity.connectivity', 'networkx.algorithms.flow', 'networkx.algorithms.flow.maxflow', 'networkx.algorithms.flow.boykovkolmogorov', 'networkx.algorithms.flow.utils', 'networkx.algorithms.flow.dinitz_alg', 'networkx.algorithms.flow.edmondskarp', 'networkx.algorithms.flow.preflowpush', 'networkx.algorithms.flow.shortestaugmentingpath', 'networkx.algorithms.flow.mincost', 'networkx.algorithms.flow.gomory_hu', 'networkx.algorithms.flow.capacityscaling', 'networkx.algorithms.flow.networksimplex', 'networkx.algorithms.connectivity.utils', 'networkx.algorithms.connectivity.cuts', 'networkx.algorithms.connectivity.edge_augmentation', 'networkx.algorithms.connectivity.edge_kcomponents', 'networkx.algorithms.connectivity.disjoint_paths', 'networkx.algorithms.connectivity.kcomponents', 'networkx.algorithms.connectivity.kcutsets', 'networkx.algorithms.connectivity.stoerwagner', 'networkx.algorithms.community', 'networkx.algorithms.community.asyn_fluid', 'networkx.algorithms.community.centrality', 'networkx.algorithms.community.community_generators', 'networkx.algorithms.community.kclique', 'networkx.algorithms.community.kernighan_lin', 'networkx.algorithms.community.community_utils', 'networkx.algorithms.community.label_propagation', 'networkx.algorithms.community.modularity_max', 'networkx.algorithms.community.quality', 'networkx.utils.mapped_queue', 'networkx.algorithms.isomorphism', 'networkx.algorithms.isomorphism.isomorph', 'networkx.algorithms.isomorphism.vf2userfunc', 'networkx.algorithms.isomorphism.isomorphvf2', 'networkx.algorithms.isomorphism.matchhelpers', 'networkx.algorithms.isomorphism.temporalisomorphvf2', 'networkx.algorithms.tournament', 'networkx.algorithms.tree', 'networkx.algorithms.tree.branchings', 'networkx.algorithms.tree.recognition', 'networkx.algorithms.tree.coding', 'networkx.algorithms.tree.mst', 'networkx.algorithms.tree.operations', 'networkx.generators.joint_degree_seq', 'networkx.generators.lattice', 'networkx.generators.line', 'networkx.generators.mycielski', 'networkx.generators.nonisomorphic_trees', 'networkx.generators.random_clustered', 'networkx.generators.random_graphs', 'networkx.generators.small', 'networkx.generators.social', 'networkx.generators.spectral_graph_forge', 'networkx.generators.stochastic', 'networkx.generators.triads', 'networkx.readwrite', 'networkx.readwrite.adjlist', 'networkx.readwrite.multiline_adjlist', 'networkx.readwrite.edgelist', 'networkx.readwrite.gpickle', 'networkx.readwrite.pajek', 'networkx.readwrite.leda', 'networkx.readwrite.sparse6', 'networkx.readwrite.graph6', 'networkx.readwrite.nx_yaml', 'networkx.readwrite.gml', 'networkx.readwrite.graphml', 'xml.etree.cElementTree', 'lxml', 'lxml.etree', 'lxml._elementpath', 'networkx.readwrite.gexf', 'networkx.readwrite.nx_shp', 'networkx.readwrite.json_graph', 'networkx.readwrite.json_graph.node_link', 'networkx.readwrite.json_graph.adjacency', 'networkx.readwrite.json_graph.tree', 'networkx.readwrite.json_graph.jit', 'networkx.readwrite.json_graph.cytoscape', 'networkx.linalg', 'networkx.linalg.attrmatrix', 'networkx.linalg.spectrum', 'networkx.linalg.graphmatrix', 'networkx.linalg.laplacianmatrix', 'networkx.linalg.algebraicconnectivity', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'networkx.linalg.modularitymatrix', 'networkx.tests', 'networkx.tests.test', 'networkx.drawing', 'networkx.drawing.layout', 'networkx.drawing.nx_pylab', 'networkx.drawing.nx_agraph', 'networkx.drawing.nx_pydot', 'dbt.context.providers', 'dbt.adapters.factory', 'dbt.config', 'dbt.config.profile', 'dbt.contracts.project', 'dbt.config.renderer', 'dbt.config.project', 'dbt.legacy_config_updater', 'dbt.config.runtime', 'dbt.context.context_config', 'dbt.contracts.results', 'dbt.task.compile', 'dbt.task.runnable', 'multiprocessing.dummy', 'multiprocessing.dummy.connection', 'dbt.task.base', 'dbt.perf_utils', 'dbt.parser', 'dbt.parser.analysis', 'dbt.parser.base', 'dbt.parser.results', 'dbt.parser.search', 'dbt.parser.data_test', 'dbt.parser.docs', 'dbt.parser.hooks', 'dbt.parser.macros', 'dbt.parser.models', 'dbt.parser.schemas', 'dbt.parser.schema_test_builders', 'dbt.parser.seeds', 'dbt.parser.snapshots', 'dbt.parser.manifest', 'dbt.context.docs', 'dbt.parser.sources', 'dbt.graph', 'dbt.graph.selector', 'dbt.task.debug', 'dbt.task.clean', 'dbt.task.deps', 'dbt.deps', 'dbt.deps.base', 'dbt.deps.resolver', 'dbt.deps.local', 'dbt.deps.git', 'dbt.clients.git', 'dbt.deps.registry', 'dbt.clients.registry', 'dbt.task.init', 'dbt.task.seed', 'dbt.task.test', 'dbt.task.snapshot', 'dbt.task.generate', 'dbt.task.serve', 'webbrowser', 'shlex', 'http.server', 'socketserver', 'dbt.task.freshness', 'dbt.task.run_operation', 'dbt.task.list', 'dbt.task.rpc', 'dbt.task.rpc.server', 'dbt.task.rpc.sql_commands', 'dbt.contracts.rpc', 'dbt.parser.rpc', 'dbt.rpc', 'dbt.rpc.error', 'jsonrpc', 'jsonrpc.manager', 'jsonrpc.utils', 'jsonrpc.six', 'jsonrpc.six.moves', 'jsonrpc.six.moves.urllib_parse', 'jsonrpc.six.moves.urllib.parse', 'jsonrpc.six.moves.urllib_error', 'jsonrpc.six.moves.urllib.error', 'jsonrpc.six.moves.urllib_request', 'jsonrpc.six.moves.urllib.request', 'jsonrpc.six.moves.urllib_response', 'jsonrpc.six.moves.urllib.response', 'jsonrpc.six.moves.urllib_robotparser', 'jsonrpc.six.moves.urllib.robotparser', 'jsonrpc.six.moves.urllib', 'jsonrpc.exceptions', 'jsonrpc.jsonrpc1', 'jsonrpc.base', 'jsonrpc.jsonrpc2', 'jsonrpc.jsonrpc', 'jsonrpc.dispatcher', 'dbt.rpc.node_runners', 'dbt.task.rpc.base', 'dbt.rpc.method', 'dbt.task.rpc.project_commands', 'dbt.task.rpc.cli', 'dbt.task.rpc.deps', 'werkzeug', 'werkzeug.serving', 'werkzeug._compat', 'werkzeug._internal', 'werkzeug.exceptions', 'werkzeug.utils', 'werkzeug.urls', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'werkzeug.middleware', 'werkzeug.middleware.dispatcher', 'dbt.rpc.logger', 'logbook.queues', 'dbt.rpc.response_manager', 'dbt.rpc.task_handler', 'dbt.rpc.task_handler_protocol', 'dbt.rpc.task_manager', 'dbt.rpc.gc', 'dbt.rpc.builtins', 'dbt.profiler', 'cProfile', '_lsprof', 'profile', 'pstats', 'dbt.adapters.bigquery', 'dbt.adapters.bigquery.connections', 'google.auth', 'google.auth._default', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'six.moves.urllib', 'google.cloud.bigquery', 'google.cloud.bigquery.client', 'pyarrow', 'pyarrow._generated_version', 'pyarrow.compat', 'cloudpickle', 'cloudpickle.cloudpickle', 'pyarrow.lib', 'pyarrow.util', 'pyarrow.filesystem', 'six.moves.urllib.parse', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'google.resumable_media', 'google.resumable_media.common', 'google.resumable_media.requests', 'google.resumable_media.requests.download', 'google.resumable_media._download', 'google.resumable_media._helpers', 'google.resumable_media.requests._helpers', 'google.resumable_media.requests.upload', 'google.resumable_media._upload', 'google.api_core', 'google.api_core.client_options', 'google.api_core.exceptions', 'google.api_core.page_iterator', 'google.auth.transport.requests', 'google.auth.transport._mtls_helper', 'google.cloud._helpers', 'google.protobuf', 'google.protobuf.duration_pb2', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'google.protobuf.internal.well_known_types', 'google.protobuf.timestamp_pb2', 'google.cloud.exceptions', 'google.cloud.client', 'google.auth.credentials', 'google.auth._helpers', 'google.oauth2', 'google.oauth2.service_account', 'google.auth._service_account_info', 'google.auth.crypt', 'google.auth.crypt.base', 'google.auth.crypt.rsa', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.es256', 'google.auth.jwt', 'cachetools', 'cachetools.keys', 'cachetools.cache', 'cachetools.abc', 'cachetools.lfu', 'cachetools.lru', 'cachetools.rr', 'cachetools.ttl', 'google.oauth2._client', 'google.cloud.bigquery._helpers', 'google.cloud.bigquery._http', 'google.cloud._http', 'google.api_core.client_info', 'google.cloud.bigquery._pandas_helpers', 'google.cloud.bigquery_storage_v1beta1.types', 'google.api_core.protobuf_helpers', 'google.protobuf.field_mask_pb2', 'google.protobuf.wrappers_pb2', 'google.cloud.bigquery_storage_v1beta1.proto', 'google.cloud.bigquery_storage_v1beta1.proto.arrow_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.avro_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.read_options_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.storage_pb2', 'google.api', 'google.api.annotations_pb2', 'google.api.http_pb2', 'google.protobuf.descriptor_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.table_reference_pb2', 'google.protobuf.empty_pb2', 'google.api.client_pb2', 'google.api_core.gapic_v1.client_info', 'pandas', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'timeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-21 23:50:00.993221 (MainThread): CACHEDIR=/Users/erikm/.matplotlib
2020-05-21 23:50:00.995330 (MainThread): Using fontManager instance from /Users/erikm/.matplotlib/fontlist-v310.json
2020-05-21 23:50:01.167544 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/erikm/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-05-21 23:50:01.173220 (MainThread): Tracking: tracking
2020-05-21 23:50:01.183811 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa20dae450>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa2234acd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa21ffd1d0>]}
2020-05-21 23:50:01.206851 (MainThread): Partial parsing not enabled
2020-05-21 23:50:01.208546 (MainThread): Parsing macros/core.sql
2020-05-21 23:50:01.213240 (MainThread): Parsing macros/materializations/helpers.sql
2020-05-21 23:50:01.221661 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-05-21 23:50:01.223491 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-05-21 23:50:01.240971 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-05-21 23:50:01.272814 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-05-21 23:50:01.294130 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-05-21 23:50:01.295993 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-05-21 23:50:01.303589 (MainThread): Parsing macros/materializations/common/merge.sql
2020-05-21 23:50:01.317637 (MainThread): Parsing macros/materializations/table/table.sql
2020-05-21 23:50:01.324716 (MainThread): Parsing macros/materializations/view/view.sql
2020-05-21 23:50:01.331121 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-05-21 23:50:01.336095 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-05-21 23:50:01.337470 (MainThread): Parsing macros/etc/query.sql
2020-05-21 23:50:01.338865 (MainThread): Parsing macros/etc/is_incremental.sql
2020-05-21 23:50:01.340684 (MainThread): Parsing macros/etc/datetime.sql
2020-05-21 23:50:01.349953 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-05-21 23:50:01.351941 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-05-21 23:50:01.352998 (MainThread): Parsing macros/adapters/common.sql
2020-05-21 23:50:01.404614 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-05-21 23:50:01.405811 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-05-21 23:50:01.406832 (MainThread): Parsing macros/schema_tests/unique.sql
2020-05-21 23:50:01.408031 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-05-21 23:50:01.410463 (MainThread): Parsing macros/etc.sql
2020-05-21 23:50:01.411121 (MainThread): Parsing macros/catalog.sql
2020-05-21 23:50:01.417624 (MainThread): Parsing macros/adapters.sql
2020-05-21 23:50:01.434988 (MainThread): Parsing macros/materializations/seed.sql
2020-05-21 23:50:01.436973 (MainThread): Parsing macros/materializations/view.sql
2020-05-21 23:50:01.438949 (MainThread): Parsing macros/materializations/table.sql
2020-05-21 23:50:01.448914 (MainThread): Parsing macros/materializations/incremental.sql
2020-05-21 23:50:01.463476 (MainThread): Parsing macros/materializations/snapshot.sql
2020-05-21 23:50:01.486055 (MainThread): Partial parsing not enabled
2020-05-21 23:50:01.519682 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:50:01.519817 (MainThread): Opening a new connection, currently in state init
2020-05-21 23:50:01.538809 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:50:01.538936 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.549307 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:50:01.549428 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.559491 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:50:01.559611 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.569499 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:50:01.569606 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.580334 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:50:01.580456 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.589966 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:50:01.590073 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.599468 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:50:01.599568 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.609512 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:50:01.609629 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.619986 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:50:01.620110 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:50:01.733499 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa23218390>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa235afbd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa23677bd0>]}
2020-05-21 23:50:01.733744 (MainThread): Flushing usage events
2020-05-21 23:50:02.135625 (MainThread): Connection 'model.stripe_source.stg_stripe_balance_transaction' was properly closed.
2020-05-21 23:50:02.135959 (MainThread): Encountered an error:
2020-05-21 23:50:02.136230 (MainThread): Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'database': 'dbt-package-testing', 'schema': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'
2020-05-21 23:50:02.140350 (MainThread): jsonschema.exceptions.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 598, in _target_from_dict
    return cls.from_dict(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 594, in from_dict
    cls.validate(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 937, in validate
    raise ValidationError.create_from(error) from error
hologram.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 396, in run
    self._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 110, in _runtime_initialize
    super()._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 78, in _runtime_initialize
    self.load_manifest()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 66, in load_manifest
    self.manifest = get_full_manifest(self.config)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/perf_utils.py", line 23, in get_full_manifest
    return load_manifest(config, internal, set_header)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 641, in load_manifest
    return ManifestLoader.load_all(config, internal_manifest, macro_hook)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 356, in load_all
    loader.load(internal_manifest=internal_manifest)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 212, in load
    self.parse_project(project, macro_manifest, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 186, in parse_project
    self.parse_with_cache(path, parser, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 142, in parse_with_cache
    parser.parse_file(block)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 526, in parse_file
    for test_block in parser.parse():
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 615, in parse
    source = self._target_from_dict(UnparsedSourceDefinition, data)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 601, in _target_from_dict
    raise CompilationException(msg) from exc
dbt.exceptions.CompilationException: Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'database': 'dbt-package-testing', 'schema': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': None}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'

2020-05-21 23:57:27.107097 (MainThread): Running with dbt=0.17.0-rc1
2020-05-21 23:57:27.252005 (MainThread): Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
2020-05-21 23:57:27.676987 (MainThread): $HOME=/Users/erikm
2020-05-21 23:57:27.677170 (MainThread): CONFIGDIR=/Users/erikm/.matplotlib
2020-05-21 23:57:27.677275 (MainThread): matplotlib data path: /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-21 23:57:27.680493 (MainThread): loaded rc file /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-21 23:57:27.681978 (MainThread): matplotlib version 3.1.1
2020-05-21 23:57:27.682125 (MainThread): interactive is False
2020-05-21 23:57:27.682170 (MainThread): platform is darwin
2020-05-21 23:57:27.682274 (MainThread): loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'snowflake', 'sphinxcontrib', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'dbt', 'dbt.main', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'dbt.logger', 'dbt.flags', 'multiprocessing', 'multiprocessing.context', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'multiprocessing.process', 'signal', 'multiprocessing.reduction', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'socket', '_socket', 'selectors', 'math', 'select', 'errno', 'array', '__mp_main__', 'dbt.ui', 'dbt.ui.colors', 'colorama', 'colorama.initialise', 'atexit', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'logging', 'weakref', 'string', '_string', 'dataclasses', 'copy', 'inspect', 'dis', 'opcode', '_opcode', 'datetime', '_datetime', 'logbook', 'logbook.base', 'logbook.concurrency', 'gevent', '__future__', 'gevent._config', 'textwrap', 'gevent._compat', 'gevent.libev', 'gevent.libev.corecext', '_cython_0_29_2', 'cython_runtime', 'gevent._hub_local', 'gevent._util', 'gevent.__hub_local', 'greenlet', 'gevent.__greenlet_primitives', 'gc', 'gevent.exceptions', 'gevent._hub_primitives', 'gevent._greenlet_primitives', 'gevent._waiter', 'gevent.__waiter', 'gevent.timeout', 'gevent.__hub_primitives', 'gevent.greenlet', 'gevent._tblib', 'gevent._greenlet', 'gevent.__ident', 'gevent.hub', 'gevent._ident', 'gevent.os', 'fcntl', 'gevent.signal', 'gevent.monkey', 'gevent.thread', 'gevent.lock', 'gevent._semaphore', 'gevent._abstract_linkable', 'gevent.__abstract_linkable', 'gevent.__semaphore', 'gevent.local', 'gevent._local', 'gevent.threading', 'contextvars', '_contextvars', 'logbook.helpers', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'http', 'http.client', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'locale', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'logbook._fallback', 'logbook.handlers', 'gzip', 'zlib', '_compression', 'logbook.compat', 'logbook.__version__', 'hologram', 'uuid', '_uuid', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'six', 'decimal', 'numbers', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'jsonschema', 'jsonschema.exceptions', 'pprint', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'platform', 'subprocess', '_posixsubprocess', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version', 'jsonschema._utils', 'pkgutil', 'jsonschema.compat', 'urllib.request', 'tempfile', 'shutil', 'fnmatch', 'bz2', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'urllib.error', 'urllib.response', '_scproxy', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'unicodedata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._compat', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sysconfig', '_osx_support', '_sysconfigdata_m_darwin_darwin', 'argparse', 'gettext', 'dbt.version', 'glob', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'queue', '_queue', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._errors', 'asn1crypto._types', 'asn1crypto.algos', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._ordereddict', 'asn1crypto.core', 'fractions', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'dbt.exceptions', 'dbt.node_types', 'hologram.helpers', 'dbt.semver', 'dbt.utils', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'typing_extensions', 'dbt.clients', 'dbt.clients.yaml_helper', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', '_yaml', 'dbt.task', 'dbt.task.run', 'dbt.node_runners', 'dbt.deprecations', 'dbt.links', 'dbt.ui.printer', 'dbt.tracking', 'snowplow_tracker', 'snowplow_tracker._version', 'snowplow_tracker.subject', 'snowplow_tracker.emitters', 'snowplow_tracker.self_describing_json', 'snowplow_tracker.tracker', 'snowplow_tracker.payload', 'snowplow_tracker.timestamp', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dbt.adapters', 'dbt.adapters.base', 'dbt.contracts', 'dbt.contracts.connection', 'dbt.contracts.util', 'dbt.clients.system', 'tarfile', 'dbt.adapters.base.meta', 'dbt.adapters.base.connections', 'multiprocessing.synchronize', '_multiprocessing', 'multiprocessing.util', 'agate', 'agate.aggregations', 'agate.aggregations.base', 'agate.exceptions', 'agate.aggregations.all', 'agate.data_types', 'agate.data_types.base', 'agate.data_types.boolean', 'agate.data_types.date', 'isodate', 'isodate.isodates', 'isodate.isostrf', 'isodate.duration', 'isodate.isotzinfo', 'isodate.isoerror', 'isodate.tzinfo', 'isodate.isotime', 'isodate.isodatetime', 'isodate.isoduration', 'parsedatetime', 'parsedatetime.pdt_locales', 'parsedatetime.pdt_locales.icu', 'parsedatetime.context', 'parsedatetime.warns', 'parsedatetime.pdt_locales.de_DE', 'parsedatetime.pdt_locales.base', 'parsedatetime.pdt_locales.en_AU', 'parsedatetime.pdt_locales.en_US', 'parsedatetime.pdt_locales.es', 'parsedatetime.pdt_locales.nl_NL', 'parsedatetime.pdt_locales.pt_BR', 'parsedatetime.pdt_locales.ru_RU', 'parsedatetime.pdt_locales.fr_FR', 'agate.data_types.date_time', 'agate.data_types.number', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'babel.plural', 'agate.data_types.text', 'agate.data_types.time_delta', 'pytimeparse', 'pytimeparse.timeparse', 'agate.aggregations.any', 'agate.aggregations.count', 'agate.utils', 'slugify', 'slugify.special', 'slugify.slugify', 'html', 'html.entities', 'text_unidecode', 'agate.warns', 'agate.aggregations.deciles', 'agate.aggregations.has_nulls', 'agate.aggregations.percentiles', 'agate.aggregations.first', 'agate.aggregations.iqr', 'agate.aggregations.mad', 'agate.aggregations.median', 'agate.aggregations.max_length', 'agate.aggregations.max_precision', 'agate.aggregations.max', 'agate.aggregations.mean', 'agate.aggregations.sum', 'agate.aggregations.min', 'agate.aggregations.mode', 'agate.aggregations.quartiles', 'agate.aggregations.quintiles', 'agate.aggregations.stdev', 'agate.aggregations.variance', 'agate.aggregations.summary', 'agate.columns', 'agate.mapped_sequence', 'agate.computations', 'agate.computations.base', 'agate.computations.formula', 'agate.computations.change', 'agate.computations.percent', 'agate.computations.percent_change', 'agate.computations.rank', 'agate.computations.percentile_rank', 'agate.computations.slug', 'agate.config', 'agate.rows', 'agate.table', 'agate.type_tester', 'agate.table.aggregate', 'agate.table.bar_chart', 'leather', 'leather.axis', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'leather.svg', 'leather.theme', 'leather.data_types', 'leather.chart', 'leather.scales', 'leather.scales.base', 'leather.shapes', 'leather.shapes.base', 'leather.shapes.bars', 'leather.series', 'leather.series.base', 'leather.utils', 'leather.series.category', 'leather.shapes.columns', 'leather.shapes.dots', 'leather.shapes.line', 'leather.scales.linear', 'leather.ticks', 'leather.ticks.base', 'leather.ticks.score', 'leather.ticks.score_time', 'leather.scales.ordinal', 'leather.scales.temporal', 'leather.grid', 'leather.lattice', 'leather.testcase', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'agate.table.bins', 'babel.numbers', 'agate.table.column_chart', 'agate.table.compute', 'agate.table.denormalize', 'agate.table.distinct', 'agate.table.exclude', 'agate.table.find', 'agate.table.from_csv', 'agate.table.from_fixed', 'agate.fixed', 'agate.table.from_json', 'agate.table.from_object', 'agate.table.group_by', 'agate.tableset', 'agate.tableset.aggregate', 'agate.tableset.bar_chart', 'agate.tableset.column_chart', 'agate.tableset.from_csv', 'agate.tableset.from_json', 'agate.tableset.having', 'agate.tableset.line_chart', 'agate.tableset.merge', 'agate.tableset.print_structure', 'agate.tableset.proxy_methods', 'agate.tableset.scatterplot', 'agate.tableset.to_csv', 'agate.tableset.to_json', 'agate.table.homogenize', 'agate.table.join', 'agate.table.limit', 'agate.table.line_chart', 'agate.table.merge', 'agate.table.normalize', 'agate.table.order_by', 'agate.table.pivot', 'agate.table.print_bars', 'agate.table.print_html', 'agate.table.print_structure', 'agate.table.print_table', 'agate.table.rename', 'agate.table.scatterplot', 'agate.table.select', 'agate.table.to_csv', 'agate.table.to_json', 'agate.table.where', 'agate.testcase', 'agate.csv_py3', 'csv', '_csv', 'dbt.contracts.graph', 'dbt.contracts.graph.manifest', 'dbt.contracts.graph.compiled', 'dbt.contracts.graph.parsed', 'pathlib', 'dbt.contracts.graph.unparsed', 'dbt.helper_types', 'dbt.contracts.graph.model_config', 'dbt.hooks', 'sqlparse', 'sqlparse.sql', 'sqlparse.tokens', 'sqlparse.compat', 'sqlparse.utils', 'sqlparse.cli', 'sqlparse.exceptions', 'sqlparse.engine', 'sqlparse.engine.grouping', 'sqlparse.engine.filter_stack', 'sqlparse.lexer', 'sqlparse.keywords', 'sqlparse.engine.statement_splitter', 'sqlparse.filters', 'sqlparse.filters.others', 'sqlparse.filters.output', 'sqlparse.filters.tokens', 'sqlparse.filters.reindent', 'sqlparse.filters.right_margin', 'sqlparse.filters.aligned_indent', 'sqlparse.formatter', 'dbt.include', 'dbt.include.global_project', 'dbt.adapters.base.query_headers', 'dbt.clients.jinja', 'ast', '_ast', 'jinja2', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.bccache', 'jinja2._compat', 'jinja2.utils', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'jinja2.lexer', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'jinja2.ext', 'jinja2.nativetypes', 'jinja2.sandbox', 'dbt.clients._jinja_blocks', 'dbt.context', 'dbt.context.configured', 'dbt.context.base', 'dbt.context.target', 'dbt.adapters.base.relation', 'dbt.adapters.base.column', 'dbt.adapters.base.impl', 'dbt.clients.agate_helper', 'babel.dates', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'dbt.adapters.cache', 'dbt.adapters.base.plugin', 'dbt.compilation', 'dbt.linker', 'networkx', 'networkx.release', 'networkx.exception', 'networkx.utils', 'networkx.utils.misc', 'networkx.utils.decorators', 'decorator', 'networkx.utils.random_sequence', 'networkx.utils.union_find', 'networkx.utils.rcm', 'networkx.utils.heaps', 'networkx.utils.contextmanagers', 'networkx.classes', 'networkx.classes.graph', 'networkx.classes.coreviews', 'networkx.classes.reportviews', 'networkx.convert', 'networkx.classes.digraph', 'networkx.classes.multigraph', 'networkx.classes.multidigraph', 'networkx.classes.ordered', 'networkx.classes.function', 'networkx.classes.filters', 'networkx.classes.graphviews', 'networkx.convert_matrix', 'networkx.relabel', 'networkx.generators', 'networkx.generators.atlas', 'networkx.generators.classic', 'networkx.generators.community', 'networkx.generators.degree_seq', 'networkx.generators.directed', 'networkx.generators.duplication', 'networkx.generators.ego', 'networkx.generators.expanders', 'networkx.generators.geometric', 'scipy', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.pocketfft', 'numpy.fft.pocketfft_internal', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_12', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'mkl_fft._float_utils', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'numpy.random.entropy', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy._lib._util', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'numpy.dual', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'networkx.generators.intersection', 'networkx.algorithms', 'networkx.algorithms.assortativity', 'networkx.algorithms.assortativity.connectivity', 'networkx.algorithms.assortativity.correlation', 'networkx.algorithms.assortativity.mixing', 'networkx.algorithms.assortativity.pairs', 'networkx.algorithms.assortativity.neighbor_degree', 'networkx.algorithms.boundary', 'networkx.algorithms.bridges', 'networkx.algorithms.chains', 'networkx.algorithms.centrality', 'networkx.algorithms.centrality.betweenness', 'networkx.algorithms.centrality.betweenness_subset', 'networkx.algorithms.centrality.closeness', 'networkx.algorithms.centrality.subgraph_alg', 'networkx.algorithms.centrality.current_flow_closeness', 'networkx.algorithms.centrality.flow_matrix', 'networkx.algorithms.centrality.current_flow_betweenness', 'networkx.algorithms.centrality.current_flow_betweenness_subset', 'networkx.algorithms.centrality.degree_alg', 'networkx.algorithms.centrality.dispersion', 'networkx.algorithms.centrality.eigenvector', 'networkx.algorithms.centrality.harmonic', 'networkx.algorithms.centrality.katz', 'networkx.algorithms.centrality.load', 'networkx.algorithms.centrality.reaching', 'networkx.algorithms.centrality.percolation', 'networkx.algorithms.centrality.second_order', 'networkx.algorithms.centrality.voterank_alg', 'networkx.algorithms.chordal', 'networkx.algorithms.cluster', 'networkx.algorithms.clique', 'networkx.algorithms.communicability_alg', 'networkx.algorithms.components', 'networkx.algorithms.components.connected', 'networkx.algorithms.components.strongly_connected', 'networkx.algorithms.components.weakly_connected', 'networkx.algorithms.components.attracting', 'networkx.algorithms.components.biconnected', 'networkx.algorithms.components.semiconnected', 'networkx.algorithms.coloring', 'networkx.algorithms.coloring.greedy_coloring', 'networkx.algorithms.coloring.greedy_coloring_with_interchange', 'networkx.algorithms.coloring.equitable_coloring', 'networkx.algorithms.core', 'networkx.algorithms.covering', 'networkx.algorithms.cycles', 'networkx.algorithms.cuts', 'networkx.algorithms.dag', 'networkx.generators.trees', 'networkx.algorithms.distance_measures', 'networkx.algorithms.distance_regular', 'networkx.algorithms.dominance', 'networkx.algorithms.dominating', 'networkx.algorithms.efficiency', 'networkx.algorithms.euler', 'networkx.algorithms.graphical', 'networkx.algorithms.hierarchy', 'networkx.algorithms.hybrid', 'networkx.algorithms.link_analysis', 'networkx.algorithms.link_analysis.pagerank_alg', 'networkx.algorithms.link_analysis.hits_alg', 'networkx.algorithms.link_prediction', 'networkx.algorithms.lowest_common_ancestors', 'networkx.algorithms.isolate', 'networkx.algorithms.matching', 'networkx.algorithms.minors', 'networkx.algorithms.mis', 'networkx.algorithms.operators', 'networkx.algorithms.operators.all', 'networkx.algorithms.operators.binary', 'networkx.algorithms.operators.product', 'networkx.algorithms.operators.unary', 'networkx.algorithms.planarity', 'networkx.algorithms.planar_drawing', 'networkx.algorithms.reciprocity', 'networkx.algorithms.richclub', 'networkx.algorithms.shortest_paths', 'networkx.algorithms.shortest_paths.generic', 'networkx.algorithms.shortest_paths.unweighted', 'networkx.algorithms.shortest_paths.weighted', 'networkx.algorithms.shortest_paths.astar', 'networkx.algorithms.shortest_paths.dense', 'networkx.algorithms.similarity', 'networkx.algorithms.simple_paths', 'networkx.algorithms.smallworld', 'networkx.algorithms.smetric', 'networkx.algorithms.structuralholes', 'networkx.algorithms.sparsifiers', 'networkx.algorithms.swap', 'networkx.algorithms.traversal', 'networkx.algorithms.traversal.beamsearch', 'networkx.algorithms.traversal.breadth_first_search', 'networkx.algorithms.traversal.depth_first_search', 'networkx.algorithms.traversal.edgedfs', 'networkx.algorithms.traversal.edgebfs', 'networkx.algorithms.triads', 'networkx.algorithms.vitality', 'networkx.algorithms.voronoi', 'networkx.algorithms.wiener', 'networkx.algorithms.bipartite', 'networkx.algorithms.bipartite.basic', 'networkx.algorithms.bipartite.centrality', 'networkx.algorithms.bipartite.cluster', 'networkx.algorithms.bipartite.covering', 'networkx.algorithms.bipartite.matching', 'networkx.algorithms.bipartite.edgelist', 'networkx.algorithms.bipartite.matrix', 'networkx.algorithms.bipartite.projection', 'networkx.algorithms.bipartite.redundancy', 'networkx.algorithms.bipartite.spectral', 'networkx.algorithms.bipartite.generators', 'networkx.algorithms.node_classification', 'networkx.algorithms.node_classification.hmn', 'networkx.algorithms.node_classification.utils', 'networkx.algorithms.node_classification.lgc', 'networkx.algorithms.connectivity', 'networkx.algorithms.connectivity.connectivity', 'networkx.algorithms.flow', 'networkx.algorithms.flow.maxflow', 'networkx.algorithms.flow.boykovkolmogorov', 'networkx.algorithms.flow.utils', 'networkx.algorithms.flow.dinitz_alg', 'networkx.algorithms.flow.edmondskarp', 'networkx.algorithms.flow.preflowpush', 'networkx.algorithms.flow.shortestaugmentingpath', 'networkx.algorithms.flow.mincost', 'networkx.algorithms.flow.gomory_hu', 'networkx.algorithms.flow.capacityscaling', 'networkx.algorithms.flow.networksimplex', 'networkx.algorithms.connectivity.utils', 'networkx.algorithms.connectivity.cuts', 'networkx.algorithms.connectivity.edge_augmentation', 'networkx.algorithms.connectivity.edge_kcomponents', 'networkx.algorithms.connectivity.disjoint_paths', 'networkx.algorithms.connectivity.kcomponents', 'networkx.algorithms.connectivity.kcutsets', 'networkx.algorithms.connectivity.stoerwagner', 'networkx.algorithms.community', 'networkx.algorithms.community.asyn_fluid', 'networkx.algorithms.community.centrality', 'networkx.algorithms.community.community_generators', 'networkx.algorithms.community.kclique', 'networkx.algorithms.community.kernighan_lin', 'networkx.algorithms.community.community_utils', 'networkx.algorithms.community.label_propagation', 'networkx.algorithms.community.modularity_max', 'networkx.algorithms.community.quality', 'networkx.utils.mapped_queue', 'networkx.algorithms.isomorphism', 'networkx.algorithms.isomorphism.isomorph', 'networkx.algorithms.isomorphism.vf2userfunc', 'networkx.algorithms.isomorphism.isomorphvf2', 'networkx.algorithms.isomorphism.matchhelpers', 'networkx.algorithms.isomorphism.temporalisomorphvf2', 'networkx.algorithms.tournament', 'networkx.algorithms.tree', 'networkx.algorithms.tree.branchings', 'networkx.algorithms.tree.recognition', 'networkx.algorithms.tree.coding', 'networkx.algorithms.tree.mst', 'networkx.algorithms.tree.operations', 'networkx.generators.joint_degree_seq', 'networkx.generators.lattice', 'networkx.generators.line', 'networkx.generators.mycielski', 'networkx.generators.nonisomorphic_trees', 'networkx.generators.random_clustered', 'networkx.generators.random_graphs', 'networkx.generators.small', 'networkx.generators.social', 'networkx.generators.spectral_graph_forge', 'networkx.generators.stochastic', 'networkx.generators.triads', 'networkx.readwrite', 'networkx.readwrite.adjlist', 'networkx.readwrite.multiline_adjlist', 'networkx.readwrite.edgelist', 'networkx.readwrite.gpickle', 'networkx.readwrite.pajek', 'networkx.readwrite.leda', 'networkx.readwrite.sparse6', 'networkx.readwrite.graph6', 'networkx.readwrite.nx_yaml', 'networkx.readwrite.gml', 'networkx.readwrite.graphml', 'xml.etree.cElementTree', 'lxml', 'lxml.etree', 'lxml._elementpath', 'networkx.readwrite.gexf', 'networkx.readwrite.nx_shp', 'networkx.readwrite.json_graph', 'networkx.readwrite.json_graph.node_link', 'networkx.readwrite.json_graph.adjacency', 'networkx.readwrite.json_graph.tree', 'networkx.readwrite.json_graph.jit', 'networkx.readwrite.json_graph.cytoscape', 'networkx.linalg', 'networkx.linalg.attrmatrix', 'networkx.linalg.spectrum', 'networkx.linalg.graphmatrix', 'networkx.linalg.laplacianmatrix', 'networkx.linalg.algebraicconnectivity', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'networkx.linalg.modularitymatrix', 'networkx.tests', 'networkx.tests.test', 'networkx.drawing', 'networkx.drawing.layout', 'networkx.drawing.nx_pylab', 'networkx.drawing.nx_agraph', 'networkx.drawing.nx_pydot', 'dbt.context.providers', 'dbt.adapters.factory', 'dbt.config', 'dbt.config.profile', 'dbt.contracts.project', 'dbt.config.renderer', 'dbt.config.project', 'dbt.legacy_config_updater', 'dbt.config.runtime', 'dbt.context.context_config', 'dbt.contracts.results', 'dbt.task.compile', 'dbt.task.runnable', 'multiprocessing.dummy', 'multiprocessing.dummy.connection', 'dbt.task.base', 'dbt.perf_utils', 'dbt.parser', 'dbt.parser.analysis', 'dbt.parser.base', 'dbt.parser.results', 'dbt.parser.search', 'dbt.parser.data_test', 'dbt.parser.docs', 'dbt.parser.hooks', 'dbt.parser.macros', 'dbt.parser.models', 'dbt.parser.schemas', 'dbt.parser.schema_test_builders', 'dbt.parser.seeds', 'dbt.parser.snapshots', 'dbt.parser.manifest', 'dbt.context.docs', 'dbt.parser.sources', 'dbt.graph', 'dbt.graph.selector', 'dbt.task.debug', 'dbt.task.clean', 'dbt.task.deps', 'dbt.deps', 'dbt.deps.base', 'dbt.deps.resolver', 'dbt.deps.local', 'dbt.deps.git', 'dbt.clients.git', 'dbt.deps.registry', 'dbt.clients.registry', 'dbt.task.init', 'dbt.task.seed', 'dbt.task.test', 'dbt.task.snapshot', 'dbt.task.generate', 'dbt.task.serve', 'webbrowser', 'shlex', 'http.server', 'socketserver', 'dbt.task.freshness', 'dbt.task.run_operation', 'dbt.task.list', 'dbt.task.rpc', 'dbt.task.rpc.server', 'dbt.task.rpc.sql_commands', 'dbt.contracts.rpc', 'dbt.parser.rpc', 'dbt.rpc', 'dbt.rpc.error', 'jsonrpc', 'jsonrpc.manager', 'jsonrpc.utils', 'jsonrpc.six', 'jsonrpc.six.moves', 'jsonrpc.six.moves.urllib_parse', 'jsonrpc.six.moves.urllib.parse', 'jsonrpc.six.moves.urllib_error', 'jsonrpc.six.moves.urllib.error', 'jsonrpc.six.moves.urllib_request', 'jsonrpc.six.moves.urllib.request', 'jsonrpc.six.moves.urllib_response', 'jsonrpc.six.moves.urllib.response', 'jsonrpc.six.moves.urllib_robotparser', 'jsonrpc.six.moves.urllib.robotparser', 'jsonrpc.six.moves.urllib', 'jsonrpc.exceptions', 'jsonrpc.jsonrpc1', 'jsonrpc.base', 'jsonrpc.jsonrpc2', 'jsonrpc.jsonrpc', 'jsonrpc.dispatcher', 'dbt.rpc.node_runners', 'dbt.task.rpc.base', 'dbt.rpc.method', 'dbt.task.rpc.project_commands', 'dbt.task.rpc.cli', 'dbt.task.rpc.deps', 'werkzeug', 'werkzeug.serving', 'werkzeug._compat', 'werkzeug._internal', 'werkzeug.exceptions', 'werkzeug.utils', 'werkzeug.urls', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'werkzeug.middleware', 'werkzeug.middleware.dispatcher', 'dbt.rpc.logger', 'logbook.queues', 'dbt.rpc.response_manager', 'dbt.rpc.task_handler', 'dbt.rpc.task_handler_protocol', 'dbt.rpc.task_manager', 'dbt.rpc.gc', 'dbt.rpc.builtins', 'dbt.profiler', 'cProfile', '_lsprof', 'profile', 'pstats', 'dbt.adapters.bigquery', 'dbt.adapters.bigquery.connections', 'google.auth', 'google.auth._default', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'six.moves.urllib', 'google.cloud.bigquery', 'google.cloud.bigquery.client', 'pyarrow', 'pyarrow._generated_version', 'pyarrow.compat', 'cloudpickle', 'cloudpickle.cloudpickle', 'pyarrow.lib', 'pyarrow.util', 'pyarrow.filesystem', 'six.moves.urllib.parse', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'google.resumable_media', 'google.resumable_media.common', 'google.resumable_media.requests', 'google.resumable_media.requests.download', 'google.resumable_media._download', 'google.resumable_media._helpers', 'google.resumable_media.requests._helpers', 'google.resumable_media.requests.upload', 'google.resumable_media._upload', 'google.api_core', 'google.api_core.client_options', 'google.api_core.exceptions', 'google.api_core.page_iterator', 'google.auth.transport.requests', 'google.auth.transport._mtls_helper', 'google.cloud._helpers', 'google.protobuf', 'google.protobuf.duration_pb2', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'google.protobuf.internal.well_known_types', 'google.protobuf.timestamp_pb2', 'google.cloud.exceptions', 'google.cloud.client', 'google.auth.credentials', 'google.auth._helpers', 'google.oauth2', 'google.oauth2.service_account', 'google.auth._service_account_info', 'google.auth.crypt', 'google.auth.crypt.base', 'google.auth.crypt.rsa', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.es256', 'google.auth.jwt', 'cachetools', 'cachetools.keys', 'cachetools.cache', 'cachetools.abc', 'cachetools.lfu', 'cachetools.lru', 'cachetools.rr', 'cachetools.ttl', 'google.oauth2._client', 'google.cloud.bigquery._helpers', 'google.cloud.bigquery._http', 'google.cloud._http', 'google.api_core.client_info', 'google.cloud.bigquery._pandas_helpers', 'google.cloud.bigquery_storage_v1beta1.types', 'google.api_core.protobuf_helpers', 'google.protobuf.field_mask_pb2', 'google.protobuf.wrappers_pb2', 'google.cloud.bigquery_storage_v1beta1.proto', 'google.cloud.bigquery_storage_v1beta1.proto.arrow_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.avro_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.read_options_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.storage_pb2', 'google.api', 'google.api.annotations_pb2', 'google.api.http_pb2', 'google.protobuf.descriptor_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.table_reference_pb2', 'google.protobuf.empty_pb2', 'google.api.client_pb2', 'google.api_core.gapic_v1.client_info', 'pandas', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'timeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-21 23:57:27.773970 (MainThread): CACHEDIR=/Users/erikm/.matplotlib
2020-05-21 23:57:27.776353 (MainThread): Using fontManager instance from /Users/erikm/.matplotlib/fontlist-v310.json
2020-05-21 23:57:28.036085 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/erikm/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-05-21 23:57:28.041484 (MainThread): Tracking: tracking
2020-05-21 23:57:28.052870 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa182690d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa13b66cd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1a6551d0>]}
2020-05-21 23:57:28.077822 (MainThread): Partial parsing not enabled
2020-05-21 23:57:28.080030 (MainThread): Parsing macros/core.sql
2020-05-21 23:57:28.085626 (MainThread): Parsing macros/materializations/helpers.sql
2020-05-21 23:57:28.094406 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-05-21 23:57:28.096615 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-05-21 23:57:28.114208 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-05-21 23:57:28.144436 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-05-21 23:57:28.166327 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-05-21 23:57:28.170302 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-05-21 23:57:28.180198 (MainThread): Parsing macros/materializations/common/merge.sql
2020-05-21 23:57:28.195571 (MainThread): Parsing macros/materializations/table/table.sql
2020-05-21 23:57:28.202560 (MainThread): Parsing macros/materializations/view/view.sql
2020-05-21 23:57:28.209071 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-05-21 23:57:28.214634 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-05-21 23:57:28.215979 (MainThread): Parsing macros/etc/query.sql
2020-05-21 23:57:28.217342 (MainThread): Parsing macros/etc/is_incremental.sql
2020-05-21 23:57:28.219427 (MainThread): Parsing macros/etc/datetime.sql
2020-05-21 23:57:28.228655 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-05-21 23:57:28.230823 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-05-21 23:57:28.232229 (MainThread): Parsing macros/adapters/common.sql
2020-05-21 23:57:28.283199 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-05-21 23:57:28.284512 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-05-21 23:57:28.285548 (MainThread): Parsing macros/schema_tests/unique.sql
2020-05-21 23:57:28.286980 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-05-21 23:57:28.290142 (MainThread): Parsing macros/etc.sql
2020-05-21 23:57:28.291527 (MainThread): Parsing macros/catalog.sql
2020-05-21 23:57:28.298527 (MainThread): Parsing macros/adapters.sql
2020-05-21 23:57:28.316410 (MainThread): Parsing macros/materializations/seed.sql
2020-05-21 23:57:28.318945 (MainThread): Parsing macros/materializations/view.sql
2020-05-21 23:57:28.321157 (MainThread): Parsing macros/materializations/table.sql
2020-05-21 23:57:28.331720 (MainThread): Parsing macros/materializations/incremental.sql
2020-05-21 23:57:28.345799 (MainThread): Parsing macros/materializations/snapshot.sql
2020-05-21 23:57:28.366545 (MainThread): Partial parsing not enabled
2020-05-21 23:57:28.398929 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:57:28.399058 (MainThread): Opening a new connection, currently in state init
2020-05-21 23:57:28.417563 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:57:28.417785 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.428901 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:57:28.429018 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.439857 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:57:28.439980 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.450547 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:57:28.450668 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.461308 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:57:28.461429 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.471230 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:57:28.471332 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.481641 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:57:28.481770 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.492295 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:57:28.492421 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.503010 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:57:28.503135 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:57:28.615851 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1a8e8890>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1aababd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa1aabee90>]}
2020-05-21 23:57:28.616137 (MainThread): Flushing usage events
2020-05-21 23:57:29.060965 (MainThread): Connection 'model.stripe_source.stg_stripe_balance_transaction' was properly closed.
2020-05-21 23:57:29.061297 (MainThread): Encountered an error:
2020-05-21 23:57:29.061598 (MainThread): Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'database': 'dbt-package-testing', 'schema': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': 'test'}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'
2020-05-21 23:57:29.072481 (MainThread): jsonschema.exceptions.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 598, in _target_from_dict
    return cls.from_dict(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 594, in from_dict
    cls.validate(data)
  File "/opt/anaconda3/lib/python3.7/site-packages/hologram/__init__.py", line 937, in validate
    raise ValidationError.create_from(error) from error
hologram.ValidationError: None is not of type 'string'

Failed validating 'type' in schema['properties']['tables']['items']['properties']['columns']['items']['properties']['description']:
    {'default': '', 'type': 'string'}

On instance['tables'][0]['columns'][2]['description']:
    None

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 396, in run
    self._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 110, in _runtime_initialize
    super()._runtime_initialize()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 78, in _runtime_initialize
    self.load_manifest()
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/task/runnable.py", line 66, in load_manifest
    self.manifest = get_full_manifest(self.config)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/perf_utils.py", line 23, in get_full_manifest
    return load_manifest(config, internal, set_header)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 641, in load_manifest
    return ManifestLoader.load_all(config, internal_manifest, macro_hook)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 356, in load_all
    loader.load(internal_manifest=internal_manifest)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 212, in load
    self.parse_project(project, macro_manifest, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 186, in parse_project
    self.parse_with_cache(path, parser, old_results)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/manifest.py", line 142, in parse_with_cache
    parser.parse_file(block)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 526, in parse_file
    for test_block in parser.parse():
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 615, in parse
    source = self._target_from_dict(UnparsedSourceDefinition, data)
  File "/opt/anaconda3/lib/python3.7/site-packages/dbt/parser/schemas.py", line 601, in _target_from_dict
    raise CompilationException(msg) from exc
dbt.exceptions.CompilationException: Compilation Error
  Invalid sources config given in models/dbt_stripe_source.yml @ sources: {'name': 'stripe', 'database': 'dbt-package-testing', 'schema': 'stripe', 'loader': 'fivetran', 'loaded_at_field': '_fivetran_synced', 'freshness': {'warn_after': {'count': 72, 'period': 'hour'}, 'error_after': {'count': 168, 'period': 'hour'}}, 'tables': [{'name': 'balance_transaction', 'description': "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Gross amount of the transaction, in cents.'}, {'name': 'available_on', 'description': None}, {'name': 'created', 'description': 'Timestamp of when the transaction was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'exchange_rate', 'description': 'test'}, {'name': 'fee', 'description': 'fees (in cents) paid for this transaction.'}, {'name': 'net', 'description': 'Net amount of the transaction, in cents.'}, {'name': 'source', 'description': 'The Stripe object to which this transaction is related.'}, {'name': 'status', 'description': "If the transaction’s net funds are available in the Stripe balance yet. Either 'available' or 'pending'."}, {'name': 'type', 'description': 'the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.'}]}, {'name': 'card', 'description': 'details of a credit card that has been saved to the system.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'country', 'description': 'Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.'}, {'name': 'created', 'description': 'Timestamp of when the entry for the card was created'}, {'name': 'customer_id', 'description': 'The customer that this card belongs to.  NULL if belongs to an account or recipient.'}, {'name': 'name', 'description': 'Cardholder name'}, {'name': 'recipient', 'description': 'The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.'}]}, {'name': 'charge', 'description': 'To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_refunded', 'description': 'The amount of the charge, if any, that has been refunded.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the charge.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'}, {'name': 'captured', 'description': 'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'}, {'name': 'card_id', 'description': 'ID of the card that was charged.'}, {'name': 'created_at', 'description': 'Timestamp of the when the charge took place.'}, {'name': 'customer_id', 'description': 'ID of the customer this charge is for if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'failure_code', 'description': 'Error code explaining reason for charge failure if available.'}, {'name': 'failure_message', 'description': 'Message to user further explaining reason for charge failure if available.'}, {'name': 'paid', 'description': 'true if the charge succeeded, or was successfully authorized for later capture.'}, {'name': 'payment_intent_id', 'description': 'ID of the PaymentIntent associated with this charge, if one exists.'}, {'name': 'receipt_email', 'description': 'This is the email address that the receipt for this charge was sent to.'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this charge.'}, {'name': 'refunded', 'description': 'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'}, {'name': 'status', 'description': 'The status of the payment is either succeeded, pending, or failed.'}]}, {'name': 'customer', 'description': 'Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'account_balance', 'description': 'Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.'}, {'name': 'created_at', 'description': 'Timestamp of when the customer emtry was created.'}, {'name': 'currency', 'description': 'Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.'}, {'name': 'default_card_id', 'description': 'ID for the default card used by the cusomter.'}, {'name': 'deliguent', 'description': 'When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'email', 'description': 'The customer’s email address.'}, {'name': 'shipping_address_city', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_country', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_1', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_line_2', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_postal_code', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_address_state', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_name', 'description': "Attribute of the cusotmer's shipping address."}, {'name': 'shipping_phone', 'description': "Attribute of the cusotmer's shipping address."}]}, {'name': 'fee', 'description': 'The details of a fee associated with a balance_transation', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'balance_transaction_id', 'description': 'ID of the balance transaction entry the fee applies to'}, {'name': 'amount', 'description': 'Amount of the fee, in cents.'}, {'name': 'application', 'description': 'ID of the Connect application that earned the fee.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'type', 'description': 'Type of the fee, can be application_fee, stripe_fee or tax.'}]}, {'name': 'payment_intent', 'description': 'A PaymentIntent guides you through the process of collecting a payment from your customer.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)'}, {'name': 'amount_capturable', 'description': 'Amount that can be captured from this PaymentIntent.'}, {'name': 'amount_received', 'description': 'Amount that was collected by this PaymentIntent.'}, {'name': 'application', 'description': 'ID of the Connect application that created the PaymentIntent.'}, {'name': 'application_fee_amount', 'description': 'The amount of the application fee (if any) for the resulting payment.'}, {'name': 'canceled_at', 'description': 'Populated when status is canceled, this is the time at which the PaymentIntent was canceled.'}, {'name': 'cancellation_reason', 'description': 'Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).'}, {'name': 'capture_method', 'description': 'Controls when the funds will be captured from the customer’s account.'}, {'name': 'confirmation_method', 'description': 'Whether confirmed automatically or manualy'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'customer_id', 'description': 'ID of the Customer this PaymentIntent belongs to, if one exists.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'payment_method_id', 'description': 'ID of the payment method used in this PaymentIntent.'}, {'name': 'receipt_email', 'description': 'Email address that the receipt for the resulting payment will be sent to.'}, {'name': 'statement_descriptor', 'description': 'For non-card charges, you can use this value as the complete description that appears on your customers’ statements.'}, {'name': 'status', 'description': 'Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.'}]}, {'name': 'payment_method_card', 'description': 'Table with the relationships between a payment methods and a card', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'payment_method_id', 'description': 'ID of the payment method'}, {'name': 'brand', 'description': 'Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.'}, {'name': 'funding', 'description': 'Card funding type. Can be credit, debit, prepaid, or unknown.'}]}, {'name': 'payment_method', 'description': "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'customer_id', 'description': 'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'}, {'name': 'type', 'description': 'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'}]}, {'name': 'payout', 'description': 'A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount (in cents) to be transferred to your bank account or debit card.'}, {'name': 'arrival_date', 'description': 'Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.'}, {'name': 'automatic', 'description': 'true if the payout was created by an automated payout schedule, and false if it was requested manually.'}, {'name': 'balance_transaction_id', 'description': 'ID of the balance transaction that describes the impact of this payout on your account balance.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users.'}, {'name': 'method', 'description': 'The method used to send this payout, which can be standard or instant.'}, {'name': 'source_type', 'description': 'The source balance this payout came from. One of card, fpx, or bank_account.'}, {'name': 'status', 'description': 'Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.'}, {'name': 'type', 'description': 'Can be bank_account or card.'}]}, {'name': 'refund', 'description': 'Details of transactions that have been refunded', 'loaded_at_field': '_fivetran_synced', 'columns': [{'name': 'id', 'description': 'Unique identifier for the object.', 'tests': ['unique', 'not_null']}, {'name': 'amount', 'description': 'Amount, in cents.'}, {'name': 'balance_transaction_id', 'description': 'ID for the balance transaction that describes the impact on your account balance.'}, {'name': 'charge_id', 'description': 'ID of the charge that was refunded.'}, {'name': 'created', 'description': 'Time at which the object was created.'}, {'name': 'currency', 'description': 'Three-letter ISO currency code, in lowercase.'}, {'name': 'description', 'description': 'An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)'}, {'name': 'reason', 'description': 'Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).'}, {'name': 'receipt_number', 'description': 'This is the transaction number that appears on email receipts sent for this refund.'}, {'name': 'status', 'description': 'Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.'}]}]} - at path ['tables'][0]['columns'][2]['description']: None is not of type 'string'

2020-05-21 23:58:22.353452 (MainThread): Running with dbt=0.17.0-rc1
2020-05-21 23:58:22.448274 (MainThread): Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
2020-05-21 23:58:22.652509 (MainThread): $HOME=/Users/erikm
2020-05-21 23:58:22.652734 (MainThread): CONFIGDIR=/Users/erikm/.matplotlib
2020-05-21 23:58:22.652867 (MainThread): matplotlib data path: /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-21 23:58:22.655847 (MainThread): loaded rc file /opt/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-21 23:58:22.657852 (MainThread): matplotlib version 3.1.1
2020-05-21 23:58:22.658175 (MainThread): interactive is False
2020-05-21 23:58:22.658260 (MainThread): platform is darwin
2020-05-21 23:58:22.658395 (MainThread): loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'snowflake', 'sphinxcontrib', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'dbt', 'dbt.main', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'dbt.logger', 'dbt.flags', 'multiprocessing', 'multiprocessing.context', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'multiprocessing.process', 'signal', 'multiprocessing.reduction', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'socket', '_socket', 'selectors', 'math', 'select', 'errno', 'array', '__mp_main__', 'dbt.ui', 'dbt.ui.colors', 'colorama', 'colorama.initialise', 'atexit', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'logging', 'weakref', 'string', '_string', 'dataclasses', 'copy', 'inspect', 'dis', 'opcode', '_opcode', 'datetime', '_datetime', 'logbook', 'logbook.base', 'logbook.concurrency', 'gevent', '__future__', 'gevent._config', 'textwrap', 'gevent._compat', 'gevent.libev', 'gevent.libev.corecext', '_cython_0_29_2', 'cython_runtime', 'gevent._hub_local', 'gevent._util', 'gevent.__hub_local', 'greenlet', 'gevent.__greenlet_primitives', 'gc', 'gevent.exceptions', 'gevent._hub_primitives', 'gevent._greenlet_primitives', 'gevent._waiter', 'gevent.__waiter', 'gevent.timeout', 'gevent.__hub_primitives', 'gevent.greenlet', 'gevent._tblib', 'gevent._greenlet', 'gevent.__ident', 'gevent.hub', 'gevent._ident', 'gevent.os', 'fcntl', 'gevent.signal', 'gevent.monkey', 'gevent.thread', 'gevent.lock', 'gevent._semaphore', 'gevent._abstract_linkable', 'gevent.__abstract_linkable', 'gevent.__semaphore', 'gevent.local', 'gevent._local', 'gevent.threading', 'contextvars', '_contextvars', 'logbook.helpers', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'http', 'http.client', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'locale', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'logbook._fallback', 'logbook.handlers', 'gzip', 'zlib', '_compression', 'logbook.compat', 'logbook.__version__', 'hologram', 'uuid', '_uuid', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'six', 'decimal', 'numbers', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'jsonschema', 'jsonschema.exceptions', 'pprint', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'platform', 'subprocess', '_posixsubprocess', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'attr._version', 'jsonschema._utils', 'pkgutil', 'jsonschema.compat', 'urllib.request', 'tempfile', 'shutil', 'fnmatch', 'bz2', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'urllib.error', 'urllib.response', '_scproxy', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'unicodedata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._compat', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sysconfig', '_osx_support', '_sysconfigdata_m_darwin_darwin', 'argparse', 'gettext', 'dbt.version', 'glob', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'queue', '_queue', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._errors', 'asn1crypto._types', 'asn1crypto.algos', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._ordereddict', 'asn1crypto.core', 'fractions', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'dbt.exceptions', 'dbt.node_types', 'hologram.helpers', 'dbt.semver', 'dbt.utils', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'typing_extensions', 'dbt.clients', 'dbt.clients.yaml_helper', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', '_yaml', 'dbt.task', 'dbt.task.run', 'dbt.node_runners', 'dbt.deprecations', 'dbt.links', 'dbt.ui.printer', 'dbt.tracking', 'snowplow_tracker', 'snowplow_tracker._version', 'snowplow_tracker.subject', 'snowplow_tracker.emitters', 'snowplow_tracker.self_describing_json', 'snowplow_tracker.tracker', 'snowplow_tracker.payload', 'snowplow_tracker.timestamp', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dbt.adapters', 'dbt.adapters.base', 'dbt.contracts', 'dbt.contracts.connection', 'dbt.contracts.util', 'dbt.clients.system', 'tarfile', 'dbt.adapters.base.meta', 'dbt.adapters.base.connections', 'multiprocessing.synchronize', '_multiprocessing', 'multiprocessing.util', 'agate', 'agate.aggregations', 'agate.aggregations.base', 'agate.exceptions', 'agate.aggregations.all', 'agate.data_types', 'agate.data_types.base', 'agate.data_types.boolean', 'agate.data_types.date', 'isodate', 'isodate.isodates', 'isodate.isostrf', 'isodate.duration', 'isodate.isotzinfo', 'isodate.isoerror', 'isodate.tzinfo', 'isodate.isotime', 'isodate.isodatetime', 'isodate.isoduration', 'parsedatetime', 'parsedatetime.pdt_locales', 'parsedatetime.pdt_locales.icu', 'parsedatetime.context', 'parsedatetime.warns', 'parsedatetime.pdt_locales.de_DE', 'parsedatetime.pdt_locales.base', 'parsedatetime.pdt_locales.en_AU', 'parsedatetime.pdt_locales.en_US', 'parsedatetime.pdt_locales.es', 'parsedatetime.pdt_locales.nl_NL', 'parsedatetime.pdt_locales.pt_BR', 'parsedatetime.pdt_locales.ru_RU', 'parsedatetime.pdt_locales.fr_FR', 'agate.data_types.date_time', 'agate.data_types.number', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'babel.plural', 'agate.data_types.text', 'agate.data_types.time_delta', 'pytimeparse', 'pytimeparse.timeparse', 'agate.aggregations.any', 'agate.aggregations.count', 'agate.utils', 'slugify', 'slugify.special', 'slugify.slugify', 'html', 'html.entities', 'text_unidecode', 'agate.warns', 'agate.aggregations.deciles', 'agate.aggregations.has_nulls', 'agate.aggregations.percentiles', 'agate.aggregations.first', 'agate.aggregations.iqr', 'agate.aggregations.mad', 'agate.aggregations.median', 'agate.aggregations.max_length', 'agate.aggregations.max_precision', 'agate.aggregations.max', 'agate.aggregations.mean', 'agate.aggregations.sum', 'agate.aggregations.min', 'agate.aggregations.mode', 'agate.aggregations.quartiles', 'agate.aggregations.quintiles', 'agate.aggregations.stdev', 'agate.aggregations.variance', 'agate.aggregations.summary', 'agate.columns', 'agate.mapped_sequence', 'agate.computations', 'agate.computations.base', 'agate.computations.formula', 'agate.computations.change', 'agate.computations.percent', 'agate.computations.percent_change', 'agate.computations.rank', 'agate.computations.percentile_rank', 'agate.computations.slug', 'agate.config', 'agate.rows', 'agate.table', 'agate.type_tester', 'agate.table.aggregate', 'agate.table.bar_chart', 'leather', 'leather.axis', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'leather.svg', 'leather.theme', 'leather.data_types', 'leather.chart', 'leather.scales', 'leather.scales.base', 'leather.shapes', 'leather.shapes.base', 'leather.shapes.bars', 'leather.series', 'leather.series.base', 'leather.utils', 'leather.series.category', 'leather.shapes.columns', 'leather.shapes.dots', 'leather.shapes.line', 'leather.scales.linear', 'leather.ticks', 'leather.ticks.base', 'leather.ticks.score', 'leather.ticks.score_time', 'leather.scales.ordinal', 'leather.scales.temporal', 'leather.grid', 'leather.lattice', 'leather.testcase', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'agate.table.bins', 'babel.numbers', 'agate.table.column_chart', 'agate.table.compute', 'agate.table.denormalize', 'agate.table.distinct', 'agate.table.exclude', 'agate.table.find', 'agate.table.from_csv', 'agate.table.from_fixed', 'agate.fixed', 'agate.table.from_json', 'agate.table.from_object', 'agate.table.group_by', 'agate.tableset', 'agate.tableset.aggregate', 'agate.tableset.bar_chart', 'agate.tableset.column_chart', 'agate.tableset.from_csv', 'agate.tableset.from_json', 'agate.tableset.having', 'agate.tableset.line_chart', 'agate.tableset.merge', 'agate.tableset.print_structure', 'agate.tableset.proxy_methods', 'agate.tableset.scatterplot', 'agate.tableset.to_csv', 'agate.tableset.to_json', 'agate.table.homogenize', 'agate.table.join', 'agate.table.limit', 'agate.table.line_chart', 'agate.table.merge', 'agate.table.normalize', 'agate.table.order_by', 'agate.table.pivot', 'agate.table.print_bars', 'agate.table.print_html', 'agate.table.print_structure', 'agate.table.print_table', 'agate.table.rename', 'agate.table.scatterplot', 'agate.table.select', 'agate.table.to_csv', 'agate.table.to_json', 'agate.table.where', 'agate.testcase', 'agate.csv_py3', 'csv', '_csv', 'dbt.contracts.graph', 'dbt.contracts.graph.manifest', 'dbt.contracts.graph.compiled', 'dbt.contracts.graph.parsed', 'pathlib', 'dbt.contracts.graph.unparsed', 'dbt.helper_types', 'dbt.contracts.graph.model_config', 'dbt.hooks', 'sqlparse', 'sqlparse.sql', 'sqlparse.tokens', 'sqlparse.compat', 'sqlparse.utils', 'sqlparse.cli', 'sqlparse.exceptions', 'sqlparse.engine', 'sqlparse.engine.grouping', 'sqlparse.engine.filter_stack', 'sqlparse.lexer', 'sqlparse.keywords', 'sqlparse.engine.statement_splitter', 'sqlparse.filters', 'sqlparse.filters.others', 'sqlparse.filters.output', 'sqlparse.filters.tokens', 'sqlparse.filters.reindent', 'sqlparse.filters.right_margin', 'sqlparse.filters.aligned_indent', 'sqlparse.formatter', 'dbt.include', 'dbt.include.global_project', 'dbt.adapters.base.query_headers', 'dbt.clients.jinja', 'ast', '_ast', 'jinja2', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.bccache', 'jinja2._compat', 'jinja2.utils', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'jinja2.lexer', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'jinja2.ext', 'jinja2.nativetypes', 'jinja2.sandbox', 'dbt.clients._jinja_blocks', 'dbt.context', 'dbt.context.configured', 'dbt.context.base', 'dbt.context.target', 'dbt.adapters.base.relation', 'dbt.adapters.base.column', 'dbt.adapters.base.impl', 'dbt.clients.agate_helper', 'babel.dates', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'dbt.adapters.cache', 'dbt.adapters.base.plugin', 'dbt.compilation', 'dbt.linker', 'networkx', 'networkx.release', 'networkx.exception', 'networkx.utils', 'networkx.utils.misc', 'networkx.utils.decorators', 'decorator', 'networkx.utils.random_sequence', 'networkx.utils.union_find', 'networkx.utils.rcm', 'networkx.utils.heaps', 'networkx.utils.contextmanagers', 'networkx.classes', 'networkx.classes.graph', 'networkx.classes.coreviews', 'networkx.classes.reportviews', 'networkx.convert', 'networkx.classes.digraph', 'networkx.classes.multigraph', 'networkx.classes.multidigraph', 'networkx.classes.ordered', 'networkx.classes.function', 'networkx.classes.filters', 'networkx.classes.graphviews', 'networkx.convert_matrix', 'networkx.relabel', 'networkx.generators', 'networkx.generators.atlas', 'networkx.generators.classic', 'networkx.generators.community', 'networkx.generators.degree_seq', 'networkx.generators.directed', 'networkx.generators.duplication', 'networkx.generators.ego', 'networkx.generators.expanders', 'networkx.generators.geometric', 'scipy', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.pocketfft', 'numpy.fft.pocketfft_internal', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_12', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'mkl_fft._float_utils', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'numpy.random.entropy', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy._lib._util', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'numpy.dual', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'networkx.generators.intersection', 'networkx.algorithms', 'networkx.algorithms.assortativity', 'networkx.algorithms.assortativity.connectivity', 'networkx.algorithms.assortativity.correlation', 'networkx.algorithms.assortativity.mixing', 'networkx.algorithms.assortativity.pairs', 'networkx.algorithms.assortativity.neighbor_degree', 'networkx.algorithms.boundary', 'networkx.algorithms.bridges', 'networkx.algorithms.chains', 'networkx.algorithms.centrality', 'networkx.algorithms.centrality.betweenness', 'networkx.algorithms.centrality.betweenness_subset', 'networkx.algorithms.centrality.closeness', 'networkx.algorithms.centrality.subgraph_alg', 'networkx.algorithms.centrality.current_flow_closeness', 'networkx.algorithms.centrality.flow_matrix', 'networkx.algorithms.centrality.current_flow_betweenness', 'networkx.algorithms.centrality.current_flow_betweenness_subset', 'networkx.algorithms.centrality.degree_alg', 'networkx.algorithms.centrality.dispersion', 'networkx.algorithms.centrality.eigenvector', 'networkx.algorithms.centrality.harmonic', 'networkx.algorithms.centrality.katz', 'networkx.algorithms.centrality.load', 'networkx.algorithms.centrality.reaching', 'networkx.algorithms.centrality.percolation', 'networkx.algorithms.centrality.second_order', 'networkx.algorithms.centrality.voterank_alg', 'networkx.algorithms.chordal', 'networkx.algorithms.cluster', 'networkx.algorithms.clique', 'networkx.algorithms.communicability_alg', 'networkx.algorithms.components', 'networkx.algorithms.components.connected', 'networkx.algorithms.components.strongly_connected', 'networkx.algorithms.components.weakly_connected', 'networkx.algorithms.components.attracting', 'networkx.algorithms.components.biconnected', 'networkx.algorithms.components.semiconnected', 'networkx.algorithms.coloring', 'networkx.algorithms.coloring.greedy_coloring', 'networkx.algorithms.coloring.greedy_coloring_with_interchange', 'networkx.algorithms.coloring.equitable_coloring', 'networkx.algorithms.core', 'networkx.algorithms.covering', 'networkx.algorithms.cycles', 'networkx.algorithms.cuts', 'networkx.algorithms.dag', 'networkx.generators.trees', 'networkx.algorithms.distance_measures', 'networkx.algorithms.distance_regular', 'networkx.algorithms.dominance', 'networkx.algorithms.dominating', 'networkx.algorithms.efficiency', 'networkx.algorithms.euler', 'networkx.algorithms.graphical', 'networkx.algorithms.hierarchy', 'networkx.algorithms.hybrid', 'networkx.algorithms.link_analysis', 'networkx.algorithms.link_analysis.pagerank_alg', 'networkx.algorithms.link_analysis.hits_alg', 'networkx.algorithms.link_prediction', 'networkx.algorithms.lowest_common_ancestors', 'networkx.algorithms.isolate', 'networkx.algorithms.matching', 'networkx.algorithms.minors', 'networkx.algorithms.mis', 'networkx.algorithms.operators', 'networkx.algorithms.operators.all', 'networkx.algorithms.operators.binary', 'networkx.algorithms.operators.product', 'networkx.algorithms.operators.unary', 'networkx.algorithms.planarity', 'networkx.algorithms.planar_drawing', 'networkx.algorithms.reciprocity', 'networkx.algorithms.richclub', 'networkx.algorithms.shortest_paths', 'networkx.algorithms.shortest_paths.generic', 'networkx.algorithms.shortest_paths.unweighted', 'networkx.algorithms.shortest_paths.weighted', 'networkx.algorithms.shortest_paths.astar', 'networkx.algorithms.shortest_paths.dense', 'networkx.algorithms.similarity', 'networkx.algorithms.simple_paths', 'networkx.algorithms.smallworld', 'networkx.algorithms.smetric', 'networkx.algorithms.structuralholes', 'networkx.algorithms.sparsifiers', 'networkx.algorithms.swap', 'networkx.algorithms.traversal', 'networkx.algorithms.traversal.beamsearch', 'networkx.algorithms.traversal.breadth_first_search', 'networkx.algorithms.traversal.depth_first_search', 'networkx.algorithms.traversal.edgedfs', 'networkx.algorithms.traversal.edgebfs', 'networkx.algorithms.triads', 'networkx.algorithms.vitality', 'networkx.algorithms.voronoi', 'networkx.algorithms.wiener', 'networkx.algorithms.bipartite', 'networkx.algorithms.bipartite.basic', 'networkx.algorithms.bipartite.centrality', 'networkx.algorithms.bipartite.cluster', 'networkx.algorithms.bipartite.covering', 'networkx.algorithms.bipartite.matching', 'networkx.algorithms.bipartite.edgelist', 'networkx.algorithms.bipartite.matrix', 'networkx.algorithms.bipartite.projection', 'networkx.algorithms.bipartite.redundancy', 'networkx.algorithms.bipartite.spectral', 'networkx.algorithms.bipartite.generators', 'networkx.algorithms.node_classification', 'networkx.algorithms.node_classification.hmn', 'networkx.algorithms.node_classification.utils', 'networkx.algorithms.node_classification.lgc', 'networkx.algorithms.connectivity', 'networkx.algorithms.connectivity.connectivity', 'networkx.algorithms.flow', 'networkx.algorithms.flow.maxflow', 'networkx.algorithms.flow.boykovkolmogorov', 'networkx.algorithms.flow.utils', 'networkx.algorithms.flow.dinitz_alg', 'networkx.algorithms.flow.edmondskarp', 'networkx.algorithms.flow.preflowpush', 'networkx.algorithms.flow.shortestaugmentingpath', 'networkx.algorithms.flow.mincost', 'networkx.algorithms.flow.gomory_hu', 'networkx.algorithms.flow.capacityscaling', 'networkx.algorithms.flow.networksimplex', 'networkx.algorithms.connectivity.utils', 'networkx.algorithms.connectivity.cuts', 'networkx.algorithms.connectivity.edge_augmentation', 'networkx.algorithms.connectivity.edge_kcomponents', 'networkx.algorithms.connectivity.disjoint_paths', 'networkx.algorithms.connectivity.kcomponents', 'networkx.algorithms.connectivity.kcutsets', 'networkx.algorithms.connectivity.stoerwagner', 'networkx.algorithms.community', 'networkx.algorithms.community.asyn_fluid', 'networkx.algorithms.community.centrality', 'networkx.algorithms.community.community_generators', 'networkx.algorithms.community.kclique', 'networkx.algorithms.community.kernighan_lin', 'networkx.algorithms.community.community_utils', 'networkx.algorithms.community.label_propagation', 'networkx.algorithms.community.modularity_max', 'networkx.algorithms.community.quality', 'networkx.utils.mapped_queue', 'networkx.algorithms.isomorphism', 'networkx.algorithms.isomorphism.isomorph', 'networkx.algorithms.isomorphism.vf2userfunc', 'networkx.algorithms.isomorphism.isomorphvf2', 'networkx.algorithms.isomorphism.matchhelpers', 'networkx.algorithms.isomorphism.temporalisomorphvf2', 'networkx.algorithms.tournament', 'networkx.algorithms.tree', 'networkx.algorithms.tree.branchings', 'networkx.algorithms.tree.recognition', 'networkx.algorithms.tree.coding', 'networkx.algorithms.tree.mst', 'networkx.algorithms.tree.operations', 'networkx.generators.joint_degree_seq', 'networkx.generators.lattice', 'networkx.generators.line', 'networkx.generators.mycielski', 'networkx.generators.nonisomorphic_trees', 'networkx.generators.random_clustered', 'networkx.generators.random_graphs', 'networkx.generators.small', 'networkx.generators.social', 'networkx.generators.spectral_graph_forge', 'networkx.generators.stochastic', 'networkx.generators.triads', 'networkx.readwrite', 'networkx.readwrite.adjlist', 'networkx.readwrite.multiline_adjlist', 'networkx.readwrite.edgelist', 'networkx.readwrite.gpickle', 'networkx.readwrite.pajek', 'networkx.readwrite.leda', 'networkx.readwrite.sparse6', 'networkx.readwrite.graph6', 'networkx.readwrite.nx_yaml', 'networkx.readwrite.gml', 'networkx.readwrite.graphml', 'xml.etree.cElementTree', 'lxml', 'lxml.etree', 'lxml._elementpath', 'networkx.readwrite.gexf', 'networkx.readwrite.nx_shp', 'networkx.readwrite.json_graph', 'networkx.readwrite.json_graph.node_link', 'networkx.readwrite.json_graph.adjacency', 'networkx.readwrite.json_graph.tree', 'networkx.readwrite.json_graph.jit', 'networkx.readwrite.json_graph.cytoscape', 'networkx.linalg', 'networkx.linalg.attrmatrix', 'networkx.linalg.spectrum', 'networkx.linalg.graphmatrix', 'networkx.linalg.laplacianmatrix', 'networkx.linalg.algebraicconnectivity', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'networkx.linalg.modularitymatrix', 'networkx.tests', 'networkx.tests.test', 'networkx.drawing', 'networkx.drawing.layout', 'networkx.drawing.nx_pylab', 'networkx.drawing.nx_agraph', 'networkx.drawing.nx_pydot', 'dbt.context.providers', 'dbt.adapters.factory', 'dbt.config', 'dbt.config.profile', 'dbt.contracts.project', 'dbt.config.renderer', 'dbt.config.project', 'dbt.legacy_config_updater', 'dbt.config.runtime', 'dbt.context.context_config', 'dbt.contracts.results', 'dbt.task.compile', 'dbt.task.runnable', 'multiprocessing.dummy', 'multiprocessing.dummy.connection', 'dbt.task.base', 'dbt.perf_utils', 'dbt.parser', 'dbt.parser.analysis', 'dbt.parser.base', 'dbt.parser.results', 'dbt.parser.search', 'dbt.parser.data_test', 'dbt.parser.docs', 'dbt.parser.hooks', 'dbt.parser.macros', 'dbt.parser.models', 'dbt.parser.schemas', 'dbt.parser.schema_test_builders', 'dbt.parser.seeds', 'dbt.parser.snapshots', 'dbt.parser.manifest', 'dbt.context.docs', 'dbt.parser.sources', 'dbt.graph', 'dbt.graph.selector', 'dbt.task.debug', 'dbt.task.clean', 'dbt.task.deps', 'dbt.deps', 'dbt.deps.base', 'dbt.deps.resolver', 'dbt.deps.local', 'dbt.deps.git', 'dbt.clients.git', 'dbt.deps.registry', 'dbt.clients.registry', 'dbt.task.init', 'dbt.task.seed', 'dbt.task.test', 'dbt.task.snapshot', 'dbt.task.generate', 'dbt.task.serve', 'webbrowser', 'shlex', 'http.server', 'socketserver', 'dbt.task.freshness', 'dbt.task.run_operation', 'dbt.task.list', 'dbt.task.rpc', 'dbt.task.rpc.server', 'dbt.task.rpc.sql_commands', 'dbt.contracts.rpc', 'dbt.parser.rpc', 'dbt.rpc', 'dbt.rpc.error', 'jsonrpc', 'jsonrpc.manager', 'jsonrpc.utils', 'jsonrpc.six', 'jsonrpc.six.moves', 'jsonrpc.six.moves.urllib_parse', 'jsonrpc.six.moves.urllib.parse', 'jsonrpc.six.moves.urllib_error', 'jsonrpc.six.moves.urllib.error', 'jsonrpc.six.moves.urllib_request', 'jsonrpc.six.moves.urllib.request', 'jsonrpc.six.moves.urllib_response', 'jsonrpc.six.moves.urllib.response', 'jsonrpc.six.moves.urllib_robotparser', 'jsonrpc.six.moves.urllib.robotparser', 'jsonrpc.six.moves.urllib', 'jsonrpc.exceptions', 'jsonrpc.jsonrpc1', 'jsonrpc.base', 'jsonrpc.jsonrpc2', 'jsonrpc.jsonrpc', 'jsonrpc.dispatcher', 'dbt.rpc.node_runners', 'dbt.task.rpc.base', 'dbt.rpc.method', 'dbt.task.rpc.project_commands', 'dbt.task.rpc.cli', 'dbt.task.rpc.deps', 'werkzeug', 'werkzeug.serving', 'werkzeug._compat', 'werkzeug._internal', 'werkzeug.exceptions', 'werkzeug.utils', 'werkzeug.urls', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'werkzeug.middleware', 'werkzeug.middleware.dispatcher', 'dbt.rpc.logger', 'logbook.queues', 'dbt.rpc.response_manager', 'dbt.rpc.task_handler', 'dbt.rpc.task_handler_protocol', 'dbt.rpc.task_manager', 'dbt.rpc.gc', 'dbt.rpc.builtins', 'dbt.profiler', 'cProfile', '_lsprof', 'profile', 'pstats', 'dbt.adapters.bigquery', 'dbt.adapters.bigquery.connections', 'google.auth', 'google.auth._default', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'six.moves.urllib', 'google.cloud.bigquery', 'google.cloud.bigquery.client', 'pyarrow', 'pyarrow._generated_version', 'pyarrow.compat', 'cloudpickle', 'cloudpickle.cloudpickle', 'pyarrow.lib', 'pyarrow.util', 'pyarrow.filesystem', 'six.moves.urllib.parse', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'google.resumable_media', 'google.resumable_media.common', 'google.resumable_media.requests', 'google.resumable_media.requests.download', 'google.resumable_media._download', 'google.resumable_media._helpers', 'google.resumable_media.requests._helpers', 'google.resumable_media.requests.upload', 'google.resumable_media._upload', 'google.api_core', 'google.api_core.client_options', 'google.api_core.exceptions', 'google.api_core.page_iterator', 'google.auth.transport.requests', 'google.auth.transport._mtls_helper', 'google.cloud._helpers', 'google.protobuf', 'google.protobuf.duration_pb2', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'google.protobuf.internal.well_known_types', 'google.protobuf.timestamp_pb2', 'google.cloud.exceptions', 'google.cloud.client', 'google.auth.credentials', 'google.auth._helpers', 'google.oauth2', 'google.oauth2.service_account', 'google.auth._service_account_info', 'google.auth.crypt', 'google.auth.crypt.base', 'google.auth.crypt.rsa', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.es256', 'google.auth.jwt', 'cachetools', 'cachetools.keys', 'cachetools.cache', 'cachetools.abc', 'cachetools.lfu', 'cachetools.lru', 'cachetools.rr', 'cachetools.ttl', 'google.oauth2._client', 'google.cloud.bigquery._helpers', 'google.cloud.bigquery._http', 'google.cloud._http', 'google.api_core.client_info', 'google.cloud.bigquery._pandas_helpers', 'google.cloud.bigquery_storage_v1beta1.types', 'google.api_core.protobuf_helpers', 'google.protobuf.field_mask_pb2', 'google.protobuf.wrappers_pb2', 'google.cloud.bigquery_storage_v1beta1.proto', 'google.cloud.bigquery_storage_v1beta1.proto.arrow_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.avro_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.read_options_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.storage_pb2', 'google.api', 'google.api.annotations_pb2', 'google.api.http_pb2', 'google.protobuf.descriptor_pb2', 'google.cloud.bigquery_storage_v1beta1.proto.table_reference_pb2', 'google.protobuf.empty_pb2', 'google.api.client_pb2', 'google.api_core.gapic_v1.client_info', 'pandas', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'timeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-21 23:58:22.737533 (MainThread): CACHEDIR=/Users/erikm/.matplotlib
2020-05-21 23:58:22.739796 (MainThread): Using fontManager instance from /Users/erikm/.matplotlib/fontlist-v310.json
2020-05-21 23:58:22.920026 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/erikm/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-05-21 23:58:22.925492 (MainThread): Tracking: tracking
2020-05-21 23:58:22.935464 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa275ee390>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa28b74d90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa28827250>]}
2020-05-21 23:58:22.961766 (MainThread): Partial parsing not enabled
2020-05-21 23:58:22.963553 (MainThread): Parsing macros/core.sql
2020-05-21 23:58:22.968984 (MainThread): Parsing macros/materializations/helpers.sql
2020-05-21 23:58:22.977432 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-05-21 23:58:22.979305 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-05-21 23:58:22.995957 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-05-21 23:58:23.027458 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-05-21 23:58:23.048758 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-05-21 23:58:23.050736 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-05-21 23:58:23.058006 (MainThread): Parsing macros/materializations/common/merge.sql
2020-05-21 23:58:23.072200 (MainThread): Parsing macros/materializations/table/table.sql
2020-05-21 23:58:23.079297 (MainThread): Parsing macros/materializations/view/view.sql
2020-05-21 23:58:23.085962 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-05-21 23:58:23.090755 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-05-21 23:58:23.091993 (MainThread): Parsing macros/etc/query.sql
2020-05-21 23:58:23.093392 (MainThread): Parsing macros/etc/is_incremental.sql
2020-05-21 23:58:23.095338 (MainThread): Parsing macros/etc/datetime.sql
2020-05-21 23:58:23.104366 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-05-21 23:58:23.106561 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-05-21 23:58:23.107660 (MainThread): Parsing macros/adapters/common.sql
2020-05-21 23:58:23.158697 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-05-21 23:58:23.160373 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-05-21 23:58:23.161337 (MainThread): Parsing macros/schema_tests/unique.sql
2020-05-21 23:58:23.162417 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-05-21 23:58:23.164771 (MainThread): Parsing macros/etc.sql
2020-05-21 23:58:23.165445 (MainThread): Parsing macros/catalog.sql
2020-05-21 23:58:23.171905 (MainThread): Parsing macros/adapters.sql
2020-05-21 23:58:23.189318 (MainThread): Parsing macros/materializations/seed.sql
2020-05-21 23:58:23.191401 (MainThread): Parsing macros/materializations/view.sql
2020-05-21 23:58:23.193416 (MainThread): Parsing macros/materializations/table.sql
2020-05-21 23:58:23.203599 (MainThread): Parsing macros/materializations/incremental.sql
2020-05-21 23:58:23.217265 (MainThread): Parsing macros/materializations/snapshot.sql
2020-05-21 23:58:23.238921 (MainThread): Partial parsing not enabled
2020-05-21 23:58:23.271686 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:58:23.271814 (MainThread): Opening a new connection, currently in state init
2020-05-21 23:58:23.289379 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:58:23.289538 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.300261 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:58:23.300386 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.310143 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:58:23.310256 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.319682 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:58:23.319787 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.329522 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:58:23.329635 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.340165 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:58:23.340441 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.350295 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:58:23.350412 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.360275 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:58:23.360385 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:23.370704 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:58:23.370828 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:24.947090 (MainThread): Found 10 models, 16 tests, 0 snapshots, 0 analyses, 146 macros, 0 operations, 0 seed files, 10 sources
2020-05-21 23:58:24.967375 (MainThread): 
2020-05-21 23:58:24.967783 (MainThread): Acquiring new bigquery connection "master".
2020-05-21 23:58:24.967921 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:24.998740 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_erik".
2020-05-21 23:58:24.999002 (ThreadPoolExecutor-1_0): Opening a new connection, currently in state init
2020-05-21 23:58:25.001587 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-05-21 23:58:26.609707 (MainThread): Acquiring new bigquery connection "master".
2020-05-21 23:58:26.609999 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:26.610492 (MainThread): 16:58:26 | Concurrency: 4 threads (target='dev')
2020-05-21 23:58:26.610756 (MainThread): 16:58:26 | 
2020-05-21 23:58:26.615988 (Thread-1): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-05-21 23:58:26.616513 (Thread-2): Began running node model.stripe_source.stg_stripe_card
2020-05-21 23:58:26.616962 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-05-21 23:58:26.617115 (Thread-3): Began running node model.stripe_source.stg_stripe_charge
2020-05-21 23:58:26.617350 (Thread-4): Began running node model.stripe_source.stg_stripe_customer
2020-05-21 23:58:26.617770 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-05-21 23:58:26.617945 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_erik).
2020-05-21 23:58:26.618313 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-05-21 23:58:26.618672 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-05-21 23:58:26.618809 (Thread-2): Opening a new connection, currently in state init
2020-05-21 23:58:26.618945 (Thread-1): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-05-21 23:58:26.619052 (Thread-3): Opening a new connection, currently in state init
2020-05-21 23:58:26.619153 (Thread-4): Opening a new connection, currently in state init
2020-05-21 23:58:26.619310 (Thread-2): Compiling model.stripe_source.stg_stripe_card
2020-05-21 23:58:26.624965 (Thread-3): Compiling model.stripe_source.stg_stripe_charge
2020-05-21 23:58:26.633763 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-05-21 23:58:26.633920 (Thread-4): Compiling model.stripe_source.stg_stripe_customer
2020-05-21 23:58:26.640198 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-05-21 23:58:26.646032 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-05-21 23:58:26.653192 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-05-21 23:58:26.654309 (Thread-3): finished collecting timing info
2020-05-21 23:58:26.654944 (Thread-3): Finished running node model.stripe_source.stg_stripe_charge
2020-05-21 23:58:26.655123 (Thread-3): Began running node model.stripe_source.stg_stripe_fee
2020-05-21 23:58:26.655389 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-05-21 23:58:26.655495 (Thread-3): Opening a new connection, currently in state closed
2020-05-21 23:58:26.655635 (Thread-3): Compiling model.stripe_source.stg_stripe_fee
2020-05-21 23:58:26.655822 (Thread-1): finished collecting timing info
2020-05-21 23:58:26.661107 (Thread-2): finished collecting timing info
2020-05-21 23:58:26.663081 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-05-21 23:58:26.663415 (Thread-1): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-05-21 23:58:26.663497 (Thread-4): finished collecting timing info
2020-05-21 23:58:26.663833 (Thread-2): Finished running node model.stripe_source.stg_stripe_card
2020-05-21 23:58:26.664085 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-05-21 23:58:26.664428 (Thread-4): Finished running node model.stripe_source.stg_stripe_customer
2020-05-21 23:58:26.664740 (Thread-2): Began running node model.stripe_source.stg_stripe_payment_method
2020-05-21 23:58:26.665026 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-05-21 23:58:26.665100 (Thread-3): finished collecting timing info
2020-05-21 23:58:26.665343 (Thread-4): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-05-21 23:58:26.665599 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-05-21 23:58:26.665722 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_balance_transaction).
2020-05-21 23:58:26.666025 (Thread-3): Finished running node model.stripe_source.stg_stripe_fee
2020-05-21 23:58:26.666317 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-05-21 23:58:26.666524 (Thread-2): Opening a new connection, currently in state closed
2020-05-21 23:58:26.666740 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-05-21 23:58:26.666883 (Thread-3): Began running node model.stripe_source.stg_stripe_payout
2020-05-21 23:58:26.667102 (Thread-4): Opening a new connection, currently in state closed
2020-05-21 23:58:26.667260 (Thread-2): Compiling model.stripe_source.stg_stripe_payment_method
2020-05-21 23:58:26.673680 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-05-21 23:58:26.673987 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-05-21 23:58:26.674106 (Thread-4): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-05-21 23:58:26.680152 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-05-21 23:58:26.680339 (Thread-3): Opening a new connection, currently in state closed
2020-05-21 23:58:26.686386 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-05-21 23:58:26.686743 (Thread-1): finished collecting timing info
2020-05-21 23:58:26.686999 (Thread-3): Compiling model.stripe_source.stg_stripe_payout
2020-05-21 23:58:26.687646 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-05-21 23:58:26.687728 (Thread-2): finished collecting timing info
2020-05-21 23:58:26.694164 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-05-21 23:58:26.694303 (Thread-4): finished collecting timing info
2020-05-21 23:58:26.694556 (Thread-1): Began running node model.stripe_source.stg_stripe_refund
2020-05-21 23:58:26.694883 (Thread-2): Finished running node model.stripe_source.stg_stripe_payment_method
2020-05-21 23:58:26.695343 (Thread-4): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-05-21 23:58:26.695608 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-05-21 23:58:26.695922 (Thread-3): finished collecting timing info
2020-05-21 23:58:26.696254 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-05-21 23:58:26.696475 (Thread-3): Finished running node model.stripe_source.stg_stripe_payout
2020-05-21 23:58:26.696576 (Thread-1): Compiling model.stripe_source.stg_stripe_refund
2020-05-21 23:58:26.702818 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-05-21 23:58:26.703200 (Thread-1): finished collecting timing info
2020-05-21 23:58:26.703571 (Thread-1): Finished running node model.stripe_source.stg_stripe_refund
2020-05-21 23:58:26.719562 (MainThread): Acquiring new bigquery connection "master".
2020-05-21 23:58:26.719857 (MainThread): Opening a new connection, currently in state closed
2020-05-21 23:58:26.720368 (MainThread): 16:58:26 | 
2020-05-21 23:58:26.720634 (MainThread): 16:58:26 | Finished running  in 1.75s.
2020-05-21 23:58:26.720854 (MainThread): Connection 'master' was properly closed.
2020-05-21 23:58:26.721013 (MainThread): Connection 'model.stripe_source.stg_stripe_refund' was left open.
2020-05-21 23:58:26.721162 (MainThread): Connection 'model.stripe_source.stg_stripe_payment_method' was properly closed.
2020-05-21 23:58:26.721305 (MainThread): Connection 'model.stripe_source.stg_stripe_payout' was properly closed.
2020-05-21 23:58:26.721443 (MainThread): Connection 'model.stripe_source.stg_stripe_payment_method_card' was properly closed.
2020-05-21 23:58:26.722660 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa293d7d90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1102a2910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa29f4f150>]}
2020-05-21 23:58:26.723142 (MainThread): Flushing usage events
