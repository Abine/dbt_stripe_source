{"results": [{"node": {"raw_sql": "with balance_transaction as (\n\n    select *\n    from {{ var('balance_transaction') }}\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_balance_transaction"], "unique_id": "model.stripe_source.stg_stripe_balance_transaction", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_balance_transaction.sql", "original_file_path": "models/stg_stripe_balance_transaction.sql", "name": "stg_stripe_balance_transaction", "resource_type": "model", "alias": "stg_stripe_balance_transaction", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transaction was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_balance_transaction.sql", "compiled": true, "compiled_sql": "with balance_transaction as (\n\n    select *\n    from stripe.balance_transaction\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction as (\n\n    select *\n    from stripe.balance_transaction\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (8)", "execution_time": 2.3571701049804688, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:36.768112Z", "completed_at": "2020-07-23T18:24:36.858133Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:36.858980Z", "completed_at": "2020-07-23T18:24:39.122694Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with customer as (\n\n    select *\n    from {{ var('customer') }}\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_delinquent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_customer"], "unique_id": "model.stripe_source.stg_stripe_customer", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_customer.sql", "original_file_path": "models/stg_stripe_customer.sql", "name": "stg_stripe_customer", "resource_type": "model", "alias": "stg_stripe_customer", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "customer"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.customer"]}, "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the customer emtry was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the cusomter.", "meta": {}, "data_type": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_customer.sql", "compiled": true, "compiled_sql": "with customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_delinquent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_delinquent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (1)", "execution_time": 3.586541175842285, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:36.813525Z", "completed_at": "2020-07-23T18:24:36.912604Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:36.913022Z", "completed_at": "2020-07-23T18:24:40.353707Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with card as (\n\n    select *\n    from {{ var('card') }}\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not coalesce(is_deleted, false)\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_card"], "unique_id": "model.stripe_source.stg_stripe_card", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_card.sql", "original_file_path": "models/stg_stripe_card.sql", "name": "stg_stripe_card", "resource_type": "model", "alias": "stg_stripe_card", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "card"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.card"]}, "description": "Details of a credit card that has been saved to the system.", "columns": {"card_id": {"name": "card_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the entry for the card was created", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "Cardholder name", "meta": {}, "data_type": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_card.sql", "compiled": true, "compiled_sql": "with card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not coalesce(is_deleted, false)\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not coalesce(is_deleted, false)\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (4)", "execution_time": 3.6141672134399414, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:36.768468Z", "completed_at": "2020-07-23T18:24:36.858648Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:36.875820Z", "completed_at": "2020-07-23T18:24:40.379881Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with charge as (\n\n    select *\n    from {{ var('charge') }}\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status,\n      invoice_id\n    from charge\n    \n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_charge"], "unique_id": "model.stripe_source.stg_stripe_charge", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_charge.sql", "original_file_path": "models/stg_stripe_charge.sql", "name": "stg_stripe_charge", "resource_type": "model", "alias": "stg_stripe_charge", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "charge"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.charge"]}, "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"charge_id": {"name": "charge_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "tags": []}, "is_captured": {"name": "is_captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of the when the charge took place.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "tags": []}, "is_refunded": {"name": "is_refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_charge.sql", "compiled": true, "compiled_sql": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status,\n      invoice_id\n    from charge\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status,\n      invoice_id\n    from charge\n    \n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (4)", "execution_time": 3.8955237865448, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:36.785984Z", "completed_at": "2020-07-23T18:24:36.881132Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:36.881482Z", "completed_at": "2020-07-23T18:24:40.662338Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}\n\n), fields as (\n\n    select\n      id as invoice_id,\n      amount_due,\n      amount_paid,\n      amount_remaining,\n      attempt_count,\n      auto_advance,\n      billing_reason,\n      charge_id,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      due_date,\n      number,\n      paid as is_paid,\n      receipt_number,\n      status,\n      subtotal,\n      tax,\n      tax_percent,\n      total\n    from invoice\n    where not coalesce(is_deleted, false)\n\n)\n\nselect * from fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_invoice"], "unique_id": "model.stripe_source.stg_stripe_invoice", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_invoice.sql", "original_file_path": "models/stg_stripe_invoice.sql", "name": "stg_stripe_invoice", "resource_type": "model", "alias": "stg_stripe_invoice", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "invoice"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.stripe_source.stripe.invoice"]}, "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_invoice.sql", "compiled": true, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice`\n\n), fields as (\n\n    select\n      id as invoice_id,\n      amount_due,\n      amount_paid,\n      amount_remaining,\n      attempt_count,\n      auto_advance,\n      billing_reason,\n      charge_id,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      due_date,\n      number,\n      paid as is_paid,\n      receipt_number,\n      status,\n      subtotal,\n      tax,\n      tax_percent,\n      total\n    from invoice\n    where not coalesce(is_deleted, false)\n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice`\n\n), fields as (\n\n    select\n      id as invoice_id,\n      amount_due,\n      amount_paid,\n      amount_remaining,\n      attempt_count,\n      auto_advance,\n      billing_reason,\n      charge_id,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      due_date,\n      number,\n      paid as is_paid,\n      receipt_number,\n      status,\n      subtotal,\n      tax,\n      tax_percent,\n      total\n    from invoice\n    where not coalesce(is_deleted, false)\n\n)\n\nselect * from fields"}, "error": "Runtime Error in model stg_stripe_invoice (models/stg_stripe_invoice.sql)\n  404 Not found: Table dbt-package-testing:stripe.invoice was not found in location US\n  \n  (job ID: 400cb65f-27ae-4365-9f08-c811b9838d44)", "status": "ERROR", "execution_time": 0.4456009864807129, "thread_id": "Thread-4", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }}\n\n), fields as (\n\n    select\n      id as invoice_line_item_id,\n      invoice_id,\n      amount,\n      currency,\n      description,\n      discountable as is_discountable,\n      plan_id,\n      proration,\n      quantity,\n      subscription_id,\n      subscription_item_id,\n      type,\n      unique_id\n    from invoice_line_item\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n\n)\n\nselect * from fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_invoice_line_item"], "unique_id": "model.stripe_source.stg_stripe_invoice_line_item", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_invoice_line_item.sql", "original_file_path": "models/stg_stripe_invoice_line_item.sql", "name": "stg_stripe_invoice_line_item", "resource_type": "model", "alias": "stg_stripe_invoice_line_item", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "invoice_line_item"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.stripe_source.stripe.invoice_line_item"]}, "description": "The different items that an invoice contains", "columns": {"invoice_line_item_id": {"name": "invoice_line_item_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "is_discountable": {"name": "is_discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoiceitem or a subscription.", "meta": {}, "data_type": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "A unique id generated for old invoice ID's from a past version of the API", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_invoice_line_item.sql", "compiled": true, "compiled_sql": "\n\nwith invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice_line_item`\n\n), fields as (\n\n    select\n      id as invoice_line_item_id,\n      invoice_id,\n      amount,\n      currency,\n      description,\n      discountable as is_discountable,\n      plan_id,\n      proration,\n      quantity,\n      subscription_id,\n      subscription_item_id,\n      type,\n      unique_id\n    from invoice_line_item\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice_line_item`\n\n), fields as (\n\n    select\n      id as invoice_line_item_id,\n      invoice_id,\n      amount,\n      currency,\n      description,\n      discountable as is_discountable,\n      plan_id,\n      proration,\n      quantity,\n      subscription_id,\n      subscription_item_id,\n      type,\n      unique_id\n    from invoice_line_item\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n\n)\n\nselect * from fields"}, "error": "Runtime Error in model stg_stripe_invoice_line_item (models/stg_stripe_invoice_line_item.sql)\n  404 Not found: Table dbt-package-testing:stripe.invoice_line_item was not found in location US\n  \n  (job ID: a8f9d2a8-c2d1-488e-ae6f-d89c033d09c4)", "status": "ERROR", "execution_time": 0.42748498916625977, "thread_id": "Thread-2", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with fee as (\n\n    select *\n    from {{ var('fee') }}\n\n), fields as (\n\n    select \n      balance_transaction_id,\n      amount,\n      application,\n      currency,\n      description,\n      type\n    from fee\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_fee"], "unique_id": "model.stripe_source.stg_stripe_fee", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_fee.sql", "original_file_path": "models/stg_stripe_fee.sql", "name": "stg_stripe_fee", "resource_type": "model", "alias": "stg_stripe_fee", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "fee"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.fee"]}, "description": "The details of a fee associated with a balance_transation", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_fee.sql", "compiled": true, "compiled_sql": "with fee as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`fee`\n\n), fields as (\n\n    select \n      balance_transaction_id,\n      amount,\n      application,\n      currency,\n      description,\n      type\n    from fee\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with fee as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`fee`\n\n), fields as (\n\n    select \n      balance_transaction_id,\n      amount,\n      application,\n      currency,\n      description,\n      type\n    from fee\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (4)", "execution_time": 2.0353379249572754, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:39.124932Z", "completed_at": "2020-07-23T18:24:39.140445Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:39.140727Z", "completed_at": "2020-07-23T18:24:41.159245Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with payment_intent as (\n\n    select *\n    from {{ var('payment_intent') }}\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payment_intent"], "unique_id": "model.stripe_source.stg_stripe_payment_intent", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_payment_intent.sql", "original_file_path": "models/stg_stripe_payment_intent.sql", "name": "stg_stripe_payment_intent", "resource_type": "model", "alias": "stg_stripe_payment_intent", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payment_intent"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.payment_intent"]}, "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"payment_intent_id": {"name": "payment_intent_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manualy", "meta": {}, "data_type": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_payment_intent.sql", "compiled": true, "compiled_sql": "with payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (4)", "execution_time": 1.8784959316253662, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:40.664349Z", "completed_at": "2020-07-23T18:24:40.684123Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:40.684452Z", "completed_at": "2020-07-23T18:24:42.541993Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith payment_method_card as (\n\n    select *\n    from {{ var('payment_method_card') }}\n\n), fields as (\n\n    select \n      payment_method_id,\n      brand,\n      funding\n    from payment_method_card\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payment_method_card"], "unique_id": "model.stripe_source.stg_stripe_payment_method_card", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_payment_method_card.sql", "original_file_path": "models/stg_stripe_payment_method_card.sql", "name": "stg_stripe_payment_method_card", "resource_type": "model", "alias": "stg_stripe_payment_method_card", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payment_method_card"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.payment_method_card"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/stripe_source/models/stg_stripe_payment_method_card.sql", "compiled": true, "compiled_sql": "\n\nwith payment_method_card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method_card`\n\n), fields as (\n\n    select \n      payment_method_id,\n      brand,\n      funding\n    from payment_method_card\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith payment_method_card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method_card`\n\n), fields as (\n\n    select \n      payment_method_id,\n      brand,\n      funding\n    from payment_method_card\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (1)", "execution_time": 2.010343074798584, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:40.830904Z", "completed_at": "2020-07-23T18:24:40.864490Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:40.872702Z", "completed_at": "2020-07-23T18:24:42.838829Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith payment_method as (\n\n    select *\n    from {{ var('payment_method') }}\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payment_method"], "unique_id": "model.stripe_source.stg_stripe_payment_method", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_payment_method.sql", "original_file_path": "models/stg_stripe_payment_method.sql", "name": "stg_stripe_payment_method", "resource_type": "model", "alias": "stg_stripe_payment_method", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payment_method"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.payment_method"]}, "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_payment_method.sql", "compiled": true, "compiled_sql": "\n\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (1)", "execution_time": 2.081929922103882, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:40.802711Z", "completed_at": "2020-07-23T18:24:40.817128Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:40.818241Z", "completed_at": "2020-07-23T18:24:42.883497Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with refund as (\n\n    select *\n    from {{ var('refund') }}\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_refund"], "unique_id": "model.stripe_source.stg_stripe_refund", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_refund.sql", "original_file_path": "models/stg_stripe_refund.sql", "name": "stg_stripe_refund", "resource_type": "model", "alias": "stg_stripe_refund", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "refund"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.stripe_source.stripe.refund"]}, "description": "Details of transactions that have been refunded", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_refund.sql", "compiled": true, "compiled_sql": "with refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields"}, "error": "Runtime Error in model stg_stripe_refund (models/stg_stripe_refund.sql)\n  404 Not found: Table dbt-package-testing:stripe.refund was not found in location US\n  \n  (job ID: 4274198b-7a54-40fc-a9db-05bf4cc60bc3)", "status": "ERROR", "execution_time": 0.40044593811035156, "thread_id": "Thread-3", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with payout as (\n\n    select *\n    from {{ var('payout') }}\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payout"], "unique_id": "model.stripe_source.stg_stripe_payout", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_payout.sql", "original_file_path": "models/stg_stripe_payout.sql", "name": "stg_stripe_payout", "resource_type": "model", "alias": "stg_stripe_payout", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payout"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.stripe_source.stripe.payout"]}, "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"payout_id": {"name": "payout_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "tags": []}, "arrival_date": {"name": "arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "tags": []}, "is_automatic": {"name": "is_automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_payout.sql", "compiled": true, "compiled_sql": "with payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "CREATE TABLE (4)", "execution_time": 1.9655652046203613, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:24:41.161539Z", "completed_at": "2020-07-23T18:24:41.178460Z"}, {"name": "execute", "started_at": "2020-07-23T18:24:41.178958Z", "completed_at": "2020-07-23T18:24:43.126231Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith subscription as (\n\n    select *\n    from {{ var('subscription') }}\n\n), fields as (\n\n    select\n      id as subscription_id,\n      status,\n      billing,\n      billing_cycle_anchor,\n      cancel_at,\n      cancel_at_period_end,\n      canceled_at,\n      created as created_at,\n      current_period_start,\n      current_period_end,\n      customer_id,\n      days_until_due,\n      start_date,\n      ended_at\n    from subscription\n\n)\n\nselect * from fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_subscription"], "unique_id": "model.stripe_source.stg_stripe_subscription", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe_source", "path": "stg_stripe_subscription.sql", "original_file_path": "models/stg_stripe_subscription.sql", "name": "stg_stripe_subscription", "resource_type": "model", "alias": "stg_stripe_subscription", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "subscription"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.stripe_source.stripe.subscription"]}, "description": "Subscriptions allow you to charge a customer on a recurring basis.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/run/stripe_source/models/stg_stripe_subscription.sql", "compiled": true, "compiled_sql": "\n\nwith subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`subscription`\n\n), fields as (\n\n    select\n      id as subscription_id,\n      status,\n      billing,\n      billing_cycle_anchor,\n      cancel_at,\n      cancel_at_period_end,\n      canceled_at,\n      created as created_at,\n      current_period_start,\n      current_period_end,\n      customer_id,\n      days_until_due,\n      start_date,\n      ended_at\n    from subscription\n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`subscription`\n\n), fields as (\n\n    select\n      id as subscription_id,\n      status,\n      billing,\n      billing_cycle_anchor,\n      cancel_at,\n      cancel_at_period_end,\n      canceled_at,\n      created as created_at,\n      current_period_start,\n      current_period_end,\n      customer_id,\n      days_until_due,\n      start_date,\n      ended_at\n    from subscription\n\n)\n\nselect * from fields"}, "error": "Runtime Error in model stg_stripe_subscription (models/stg_stripe_subscription.sql)\n  404 Not found: Table dbt-package-testing:stripe.subscription was not found in location US\n  \n  (job ID: 8a376498-0be8-4325-bbed-13ef88aff6fc)", "status": "ERROR", "execution_time": 0.4138219356536865, "thread_id": "Thread-2", "timing": [], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-07-23T18:24:43.262061Z", "elapsed_time": 8.569551944732666}